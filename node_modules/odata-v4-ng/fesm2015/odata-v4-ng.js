import { HttpHeaders, HttpResponse, HttpClient, HttpClientModule } from '@angular/common/http';
import { UUID } from 'angular2-uuid';
import { map } from 'rxjs/operators';
import { Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const OperatorComparison = {
    EQ: 0, NE: 1, GT: 2, GE: 3, LT: 4, LE: 5, HAS: 6,
};
OperatorComparison[OperatorComparison.EQ] = 'EQ';
OperatorComparison[OperatorComparison.NE] = 'NE';
OperatorComparison[OperatorComparison.GT] = 'GT';
OperatorComparison[OperatorComparison.GE] = 'GE';
OperatorComparison[OperatorComparison.LT] = 'LT';
OperatorComparison[OperatorComparison.LE] = 'LE';
OperatorComparison[OperatorComparison.HAS] = 'HAS';
/** @enum {number} */
const OperatorLogical = {
    AND: 0, OR: 1, NOT: 2,
};
OperatorLogical[OperatorLogical.AND] = 'AND';
OperatorLogical[OperatorLogical.OR] = 'OR';
OperatorLogical[OperatorLogical.NOT] = 'NOT';
/** @enum {number} */
const OperatorArithmetic = {
    ADD: 0, SUB: 1, MUL: 2, DIV: 3, MOD: 4,
};
OperatorArithmetic[OperatorArithmetic.ADD] = 'ADD';
OperatorArithmetic[OperatorArithmetic.SUB] = 'SUB';
OperatorArithmetic[OperatorArithmetic.MUL] = 'MUL';
OperatorArithmetic[OperatorArithmetic.DIV] = 'DIV';
OperatorArithmetic[OperatorArithmetic.MOD] = 'MOD';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class QuotedString {
    /**
     * @param {?} value
     */
    constructor(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Utils {
    /**
     * @param {?} value
     * @return {?}
     */
    static isNull(value) {
        return value === null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isUndefined(value) {
        return value === undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNullOrUndefined(value) {
        return Utils.isNull(value) || Utils.isUndefined(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNotNullNorUndefined(value) {
        return !Utils.isNull(value) && !Utils.isUndefined(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isEmpty(value) {
        if (Utils.isNullOrUndefined(value)
            || typeof (value) === 'string' && !value.length
            || value instanceof Array && !value.length
            || typeof (value.isEmpty) === 'function' && value.isEmpty()) {
            return true;
        }
        if (value instanceof Array && value) {
            for (const v of value) {
                if (!Utils.isEmpty(v)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNull(fieldValue, fieldName) {
        if (fieldValue !== null) {
            throw new Error(fieldName + ' must be null');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireUndefined(fieldValue, fieldName) {
        if (fieldValue !== undefined) {
            throw new Error(fieldName + ' must be undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNull(fieldValue, fieldName) {
        if (fieldValue === null) {
            throw new Error(fieldName + ' cannot be null');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotUndefined(fieldValue, fieldName) {
        if (fieldValue === undefined) {
            throw new Error(fieldName + ' cannot be undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNullNorUndefined(fieldValue, fieldName) {
        Utils.requireNotNull(fieldValue, fieldName);
        Utils.requireNotUndefined(fieldValue, fieldName);
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNullOrUndefined(fieldValue, fieldName) {
        if (!Utils.isNull(fieldValue) && !Utils.isUndefined(fieldValue)) {
            throw new Error(fieldName + ' must be null or undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotEmpty(fieldValue, fieldName) {
        if (Utils.isEmpty(fieldValue)) {
            throw new Error(fieldName + ' cannot be empty');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNegative(fieldValue, fieldName) {
        if (fieldValue < 0) {
            throw new Error(fieldName + ' cannot be negative');
        }
    }
    /**
     * @param {?} path
     * @param {?} segment
     * @return {?}
     */
    static appendSegment(path, segment) {
        Utils.requireNotNullNorUndefined(path, 'path');
        Utils.requireNotNullNorUndefined(segment, 'segment');
        if (!path.endsWith('/')) {
            path += '/';
        }
        return path + segment;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static removeEndingSeparator(value) {
        Utils.requireNotNullNorUndefined(value, 'value');
        if (value.endsWith('/')) {
            if (value.length === 1) {
                return '';
            }
            return value.substring(0, value.length - 1);
        }
        return value;
    }
    /**
     * @param {?} value
     * @param {?} encodeURI
     * @return {?}
     */
    static getValueURI(value, encodeURI) {
        Utils.requireNotUndefined(value, 'value');
        Utils.requireNotNullNorUndefined(encodeURI, 'encodeURI');
        /** @type {?} */
        let res = value;
        if (typeof (res) === 'string') {
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
        }
        else if (res instanceof QuotedString) {
            // escape single quote
            res = res.toString().replace(/'/g, '\'\'');
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
            // add start/ending quotes
            res = '\'' + res + '\'';
        }
        // boolean, number
        return res;
    }
    /**
     * @param {?} items
     * @param {?=} operator
     * @param {?=} operatorUppercase
     * @return {?}
     */
    static toString(items, operator, operatorUppercase = false) {
        /** @type {?} */
        let res = '';
        if (Utils.isNullOrUndefined(items) || !items.length) {
            return res;
        }
        for (const item of items) {
            if (res.length) {
                if (Utils.isNotNullNorUndefined(operator)) {
                    /** @type {?} */
                    const operatorString = Utils.getOperatorString(operator, operatorUppercase);
                    res += ` ${operatorString} `;
                }
                else {
                    res += ',';
                }
            }
            if (Utils.isNotNullNorUndefined(operator) && operator === OperatorLogical.NOT) {
                /** @type {?} */
                const operatorString = Utils.getOperatorString(operator, operatorUppercase);
                res += `${operatorString} `;
            }
            res += item;
        }
        if (Utils.isNotNullNorUndefined(operator)) {
            return `(${res})`;
        }
        return res;
    }
    /**
     * @param {?} operator
     * @param {?} operatorUppercase
     * @return {?}
     */
    static getOperatorString(operator, operatorUppercase) {
        /** @type {?} */
        let operatorString = OperatorLogical[operator].toLowerCase();
        if (Utils.isNotNullNorUndefined(operatorUppercase) && operatorUppercase) {
            operatorString = operatorString.toUpperCase();
        }
        return operatorString;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class ODataQueryAbstract {
    /**
     * @param {?} odataService
     * @param {?} serviceRoot
     */
    constructor(odataService, serviceRoot) {
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        this.odataService = odataService;
        this.serviceRoot = serviceRoot;
        this.queryString = serviceRoot;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const Method = {
    GET: 0, POST: 1, PUT: 2, PATCH: 3, DELETE: 4,
};
Method[Method.GET] = 'GET';
Method[Method.POST] = 'POST';
Method[Method.PUT] = 'PUT';
Method[Method.PATCH] = 'PATCH';
Method[Method.DELETE] = 'DELETE';
class BatchRequest {
    /**
     * @param {?} method
     * @param {?} odataQuery
     * @param {?=} body
     * @param {?=} httpOptions
     */
    constructor(method, odataQuery, body, httpOptions) {
        this.method = method;
        this.odataQuery = odataQuery;
        this.body = body;
        this.httpOptions = httpOptions;
    }
}
class ODataQueryBatch extends ODataQueryAbstract {
    /**
     * @param {?} odataService
     * @param {?} serviceRoot
     */
    constructor(odataService, serviceRoot) {
        super(odataService, serviceRoot);
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        this.queryString = Utils.appendSegment(serviceRoot, ODataQueryBatch.$BATCH);
        this.requests = [];
        this.batchBoundary = ODataQueryBatch.BATCH_PREFIX + this.getUUID();
        this.changesetBoundary = null;
        this.changesetID = 1;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    get(odataQuery, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.GET, odataQuery, undefined, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.POST, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    put(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.PUT, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.PATCH, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(odataQuery, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.DELETE, odataQuery, undefined, httpOptions));
        return this;
    }
    /**
     * @param {?=} httpOptions
     * @return {?}
     */
    execute(httpOptions) {
        // set headers
        if (Utils.isNullOrUndefined(httpOptions)) {
            httpOptions = {};
        }
        if (Utils.isNullOrUndefined(httpOptions.headers)) {
            httpOptions.headers = new HttpHeaders();
        }
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ODATA_VERSION, ODataQueryBatch.VERSION_4_0);
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.CONTENT_TYPE, ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.batchBoundary);
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ACCEPT, ODataQueryBatch.MULTIPART_MIXED);
        // send request
        return this.odataService.post(this, this.getBody(), httpOptions);
    }
    /**
     * @return {?}
     */
    toString() {
        return this.queryString;
    }
    /**
     * @return {?}
     */
    getBody() {
        /** @type {?} */
        let res = '';
        for (const request of this.requests) {
            /** @type {?} */
            const method = request.method;
            /** @type {?} */
            const odataQuery = request.odataQuery;
            /** @type {?} */
            const httpOptions = request.httpOptions;
            /** @type {?} */
            const body = request.body;
            // if method is GET and there is a changeset boundary open then close it
            if (method === Method.GET && Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                this.changesetBoundary = null;
            }
            // if there is no changeset boundary open then open a batch boundary
            if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.NEWLINE;
            }
            // if method is not GET and there is no changeset boundary open then open a changeset boundary
            if (method !== Method.GET) {
                if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                    this.changesetBoundary = ODataQueryBatch.CHANGESET_PREFIX + this.getUUID();
                    res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.changesetBoundary + ODataQueryBatch.NEWLINE;
                    res += ODataQueryBatch.NEWLINE;
                }
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.NEWLINE;
            }
            res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_HTTP + ODataQueryBatch.NEWLINE;
            res += ODataQueryBatch.CONTENT_TRANSFER_ENCODING + ': ' + ODataQueryBatch.BINARY + ODataQueryBatch.NEWLINE;
            if (method !== Method.GET) {
                res += ODataQueryBatch.CONTENT_ID + ': ' + this.changesetID++ + ODataQueryBatch.NEWLINE;
            }
            res += ODataQueryBatch.NEWLINE;
            res += Method[method] + ' ' + odataQuery + ' ' + ODataQueryBatch.HTTP11 + ODataQueryBatch.NEWLINE;
            res += this.getHeaders(method, httpOptions);
            res += ODataQueryBatch.NEWLINE;
            if (method === Method.GET || method === Method.DELETE) {
                res += ODataQueryBatch.NEWLINE;
            }
            else {
                res += JSON.stringify(body) + ODataQueryBatch.NEWLINE;
            }
        }
        if (res.length) {
            if (Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                this.changesetBoundary = null;
            }
            res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX;
        }
        return res;
    }
    /**
     * @param {?} method
     * @param {?} httpOptions
     * @return {?}
     */
    getHeaders(method, httpOptions) {
        /** @type {?} */
        let res = '';
        if (method === Method.POST || method === Method.PATCH || method === Method.PUT) {
            res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_JSON + ODataQueryBatch.NEWLINE;
        }
        if (Utils.isNullOrUndefined(httpOptions) || Utils.isNullOrUndefined(httpOptions.headers)) {
            return res;
        }
        for (const key of httpOptions.headers.keys()) {
            res += key + ': ' + httpOptions.headers.getAll(key) + ODataQueryBatch.NEWLINE;
        }
        return res;
    }
    /**
     * @return {?}
     */
    getUUID() {
        return UUID.UUID();
    }
}
ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX = '--';
ODataQueryBatch.BATCH_PREFIX = 'batch_';
ODataQueryBatch.CHANGESET_PREFIX = 'changeset_';
ODataQueryBatch.NEWLINE = '\r\n';
ODataQueryBatch.$BATCH = '$batch';
ODataQueryBatch.HTTP11 = 'HTTP/1.1';
ODataQueryBatch.ODATA_VERSION = 'OData-Version';
ODataQueryBatch.CONTENT_TYPE = 'Content-Type';
ODataQueryBatch.ACCEPT = 'Accept';
ODataQueryBatch.CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';
ODataQueryBatch.CONTENT_ID = 'Content-ID';
ODataQueryBatch.VERSION_4_0 = '4.0';
ODataQueryBatch.MULTIPART_MIXED = 'multipart/mixed';
ODataQueryBatch.MULTIPART_MIXED_BOUNDARY = 'multipart/mixed;boundary=';
ODataQueryBatch.APPLICATION_HTTP = 'application/http';
ODataQueryBatch.BINARY = 'binary';
ODataQueryBatch.APPLICATION_JSON = 'application/json';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FilterString {
    /**
     * @param {?} filter
     */
    constructor(filter) {
        Utils.requireNotNullNorUndefined(filter, 'filter');
        Utils.requireNotEmpty(filter, 'filter');
        this.filter = filter;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.filter;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return Utils.isNullOrUndefined(this.filter) || !this.filter.length;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Expand {
    /**
     * @param {?} entitySet
     */
    constructor(entitySet) {
        Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
        Utils.requireNotEmpty(entitySet, 'entitySet');
        this.entitySet = entitySet;
        this.queryOptions = new QueryOptions(Expand.SEPARATOR);
    }
    /**
     * @param {?} select
     * @return {?}
     */
    select(select) {
        this.queryOptions.select(select);
        return this;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    filter(filter) {
        this.queryOptions.filter(filter);
        return this;
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    expand(expand) {
        this.queryOptions.expand(expand);
        return this;
    }
    /**
     * @param {?} orderby
     * @return {?}
     */
    orderby(orderby) {
        this.queryOptions.orderby(orderby);
        return this;
    }
    /**
     * @param {?} search
     * @return {?}
     */
    search(search) {
        this.queryOptions.search(search);
        return this;
    }
    /**
     * @param {?} skip
     * @return {?}
     */
    skip(skip) {
        this.queryOptions.skip(skip);
        return this;
    }
    /**
     * @param {?} top
     * @return {?}
     */
    top(top) {
        this.queryOptions.top(top);
        return this;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    customOption(key, value) {
        this.queryOptions.customOption(key, value);
        return this;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = this.entitySet;
        if (!Utils.isEmpty(this.queryOptions)) {
            res += '(' + this.queryOptions + ')';
        }
        return res;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return Utils.isEmpty(this.entitySet);
    }
}
Expand.SEPARATOR = ';';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const Order = {
    ASC: 0, DESC: 1,
};
Order[Order.ASC] = 'ASC';
Order[Order.DESC] = 'DESC';
class Orderby {
    /**
     * @param {?} property
     * @param {?=} order
     */
    constructor(property, order) {
        Utils.requireNotNullNorUndefined(property, 'property');
        this.property = property;
        this.order = order;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = this.property;
        if (!Utils.isNullOrUndefined(this.order)) {
            res += ' ' + Order[this.order].toLowerCase();
        }
        return res;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class QueryOptions {
    /**
     * @param {?} separator
     */
    constructor(separator) {
        Utils.requireNotNullNorUndefined(separator, 'separator');
        Utils.requireNotEmpty(separator, 'separator');
        this._separator = separator;
        this._select = null;
        this._filter = null;
        this._expand = null;
        this._orderby = null;
        this._search = null;
        this._skip = null;
        this._top = null;
        this._count = null;
        this._customOptions = null;
        this._format = null;
    }
    /**
     * @param {?} select
     * @return {?}
     */
    select(select) {
        if (Utils.isNullOrUndefined(select) || Utils.isEmpty(select)) {
            this._select = null;
        }
        else {
            this._select = typeof (select) === 'string' ? [select] : select;
        }
        return this;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    filter(filter) {
        if (Utils.isNullOrUndefined(filter) || Utils.isEmpty(filter)) {
            this._filter = null;
        }
        else {
            this._filter = typeof (filter) === 'string' ? new FilterString(filter) : filter;
        }
        return this;
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    expand(expand) {
        if (Utils.isNullOrUndefined(expand) || Utils.isEmpty(expand)) {
            this._expand = null;
        }
        else {
            this._expand = typeof (expand) === 'string' ? [new Expand(expand)] : expand instanceof Expand ? [expand] : expand;
        }
        return this;
    }
    /**
     * @param {?} orderby
     * @return {?}
     */
    orderby(orderby) {
        if (Utils.isNullOrUndefined(orderby) || Utils.isEmpty(orderby)) {
            this._orderby = null;
        }
        else {
            this._orderby = typeof (orderby) === 'string' ? [new Orderby(orderby)] : orderby;
        }
        return this;
    }
    /**
     * @param {?} search
     * @return {?}
     */
    search(search) {
        this._search = search;
        return this;
    }
    /**
     * @param {?} skip
     * @return {?}
     */
    skip(skip) {
        Utils.requireNotNegative(skip, 'skip');
        this._skip = skip;
        return this;
    }
    /**
     * @param {?} top
     * @return {?}
     */
    top(top) {
        Utils.requireNotNegative(top, 'top');
        this._top = top;
        return this;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    count(count) {
        this._count = count;
        return this;
    }
    /**
     * @param {?} format
     * @return {?}
     */
    format(format) {
        this._format = format;
        return this;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    customOption(key, value) {
        Utils.requireNotNullNorUndefined(key, 'key');
        if (Utils.isNullOrUndefined(this._customOptions)) {
            this._customOptions = new Map();
        }
        this._customOptions.set(key, value);
        return this;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let queryOptions = '';
        // add select
        if (!Utils.isNullOrUndefined(this._select) && !Utils.isEmpty(this._select)) {
            queryOptions += '$select=';
            if (typeof (this._select) === 'string') {
                queryOptions += this._select;
            }
            else {
                queryOptions += Utils.toString(this._select);
            }
        }
        // add filter
        if (!Utils.isNullOrUndefined(this._filter) && !Utils.isEmpty(this._filter)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$filter=' + encodeURIComponent(this._filter.toString());
        }
        // add expand
        if (!Utils.isNullOrUndefined(this._expand) && !Utils.isEmpty(this._expand)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$expand=';
            if (typeof (this._expand) === 'string') {
                queryOptions += this._expand;
            }
            else {
                queryOptions += Utils.toString(this._expand);
            }
        }
        // add orderby
        if (!Utils.isNullOrUndefined(this._orderby) && !Utils.isEmpty(this._orderby)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$orderby=';
            if (typeof (this._orderby) === 'string') {
                queryOptions += this._orderby;
            }
            else {
                queryOptions += Utils.toString(this._orderby);
            }
        }
        // add search
        if (!Utils.isNullOrUndefined(this._search) && !Utils.isEmpty(this._search)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$search=' + encodeURIComponent(this._search.toString());
        }
        // add skip
        if (!Utils.isNullOrUndefined(this._skip) && !Utils.isEmpty(this._skip)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$skip=' + this._skip;
        }
        // add top
        if (!Utils.isNullOrUndefined(this._top) && !Utils.isEmpty(this._top)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$top=' + this._top;
        }
        // add count
        if (!Utils.isNullOrUndefined(this._count) && !Utils.isEmpty(this._count)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$count=' + this._count;
        }
        // add custom query options
        if (Utils.isNotNullNorUndefined(this._customOptions) && this._customOptions.size > 0) {
            this._customOptions.forEach((value, key, map$$1) => {
                if (Utils.isNotNullNorUndefined(key) && !Utils.isEmpty(key)
                    && Utils.isNotNullNorUndefined(value) && !Utils.isEmpty(value)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += key + '=' + encodeURIComponent(value);
                }
            });
        }
        // add format
        if (!Utils.isNullOrUndefined(this._format) && !Utils.isEmpty(this._format)) {
            if (queryOptions.length) {
                queryOptions += this._separator;
            }
            queryOptions += '$format=' + this._format;
        }
        return queryOptions;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        for (const key in this) {
            if (key === '_purpose' || key === '_separator') {
                continue;
            }
            if (this.hasOwnProperty(key) && !Utils.isEmpty(this[key])) {
                return false;
            }
        }
        return true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ODataQuery extends ODataQueryAbstract {
    /**
     * @param {?} odataService
     * @param {?} serviceRoot
     */
    constructor(odataService, serviceRoot) {
        super(odataService, serviceRoot);
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        this.queryOptions = new QueryOptions(ODataQuery.SEPARATOR);
        this.segments = [];
        this.lastSegment = null;
    }
    /**
     * @return {?}
     */
    metadata() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.METADATA), ODataQuery.METADATA);
        if (this.segments.length) {
            throw new Error('metadata segment cannot be appended to other segments');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$METADATA);
        this.addSegment(ODataQuery.METADATA);
        return this;
    }
    /**
     * @param {?} entitySet
     * @return {?}
     */
    entitySet(entitySet) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.ENTITY_SET), ODataQuery.ENTITY_SET);
        Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
        Utils.requireNotEmpty(entitySet, 'entitySet');
        this.queryString = Utils.appendSegment(this.queryString, entitySet);
        this.addSegment(ODataQuery.ENTITY_SET);
        return this;
    }
    /**
     * @param {?} entityKey
     * @return {?}
     */
    entityKey(entityKey) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('entityKey can only be appended to entitySet or navigationProperty');
        }
        Utils.requireNotNullNorUndefined(entityKey, 'entityKey');
        Utils.requireNotEmpty(entityKey, 'entityKey');
        entityKey = Utils.getValueURI(entityKey, true);
        this.queryString = Utils.removeEndingSeparator(this.queryString) + '(' + entityKey + ')';
        this.addSegment(ODataQuery.ENTITY_KEY);
        return this;
    }
    /**
     * @param {?} singleton
     * @return {?}
     */
    singleton(singleton) {
        if (this.segments.length) {
            throw new Error('singleton segment cannot be appended to other segments');
        }
        Utils.requireNotNullNorUndefined(singleton, 'singleton');
        Utils.requireNotEmpty(singleton, 'singleton');
        this.queryString = Utils.appendSegment(this.queryString, singleton);
        this.addSegment(ODataQuery.SINGLETON);
        return this;
    }
    /**
     * @param {?} typeName
     * @return {?}
     */
    typeName(typeName) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY && this.lastSegment !== ODataQuery.ENTITY_KEY) {
            throw new Error('typeName can only be appended to entitySet, navigationProperty or entityKey');
        }
        Utils.requireNotNullNorUndefined(typeName, 'typeName');
        Utils.requireNotEmpty(typeName, 'typeName');
        this.queryString = Utils.appendSegment(this.queryString, typeName);
        this.addSegment(ODataQuery.TYPE_NAME);
        return this;
    }
    /**
     * @param {?} property
     * @return {?}
     */
    property(property) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.PROPERTY), ODataQuery.PROPERTY);
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON) {
            throw new Error('property can only be appended to entityKey or singleton');
        }
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        this.queryString = Utils.appendSegment(this.queryString, property);
        this.addSegment(ODataQuery.PROPERTY);
        return this;
    }
    /**
     * @param {?} navigationProperty
     * @return {?}
     */
    navigationProperty(navigationProperty) {
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON && this.lastSegment !== ODataQuery.TYPE_NAME) {
            throw new Error('navigationProperty can only be appended to entityKey, singleton or typeName');
        }
        Utils.requireNotNullNorUndefined(navigationProperty, 'navigationProperty');
        Utils.requireNotEmpty(navigationProperty, 'navigationProperty');
        this.queryString = Utils.appendSegment(this.queryString, navigationProperty);
        this.addSegment(ODataQuery.NAVIGATION_PROPERTY);
        return this;
    }
    /**
     * @return {?}
     */
    ref() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.REF), ODataQuery.REF);
        if (this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('ref can only be appended to navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$REF);
        this.addSegment(ODataQuery.REF);
        return this;
    }
    /**
     * @return {?}
     */
    value() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.VALUE), ODataQuery.VALUE);
        if (this.lastSegment !== ODataQuery.PROPERTY) {
            throw new Error('value can only be appended to property');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$VALUE);
        this.addSegment(ODataQuery.VALUE);
        return this;
    }
    /**
     * @return {?}
     */
    countSegment() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.COUNT), ODataQuery.COUNT);
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('count can only be appended to entitySet or navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$COUNT);
        this.addSegment(ODataQuery.COUNT);
        return this;
    }
    /**
     * @param {?} functionCall
     * @return {?}
     */
    functionCall(functionCall) {
        Utils.requireNotNullNorUndefined(functionCall, 'functionCall');
        Utils.requireNotEmpty(functionCall, 'functionCall');
        this.queryString = Utils.appendSegment(this.queryString, functionCall);
        this.addSegment(ODataQuery.FUNCTION_CALL);
        return this;
    }
    /**
     * @param {?} actionCall
     * @return {?}
     */
    actionCall(actionCall) {
        Utils.requireNotNullNorUndefined(actionCall, 'actionCall');
        Utils.requireNotEmpty(actionCall, 'actionCall');
        this.queryString = Utils.appendSegment(this.queryString, actionCall);
        this.addSegment(ODataQuery.ACTION_CALL);
        return this;
    }
    /**
     * @return {?}
     */
    batch() {
        return new ODataQueryBatch(this.odataService, this.serviceRoot);
    }
    /**
     * @param {?} select
     * @return {?}
     */
    select(select) {
        this.queryOptions.select(select);
        return this;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    filter(filter) {
        this.queryOptions.filter(filter);
        return this;
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    expand(expand) {
        this.queryOptions.expand(expand);
        return this;
    }
    /**
     * @param {?} orderby
     * @return {?}
     */
    orderby(orderby) {
        this.queryOptions.orderby(orderby);
        return this;
    }
    /**
     * @param {?} search
     * @return {?}
     */
    search(search) {
        this.queryOptions.search(search);
        return this;
    }
    /**
     * @param {?} skip
     * @return {?}
     */
    skip(skip) {
        this.queryOptions.skip(skip);
        return this;
    }
    /**
     * @param {?} top
     * @return {?}
     */
    top(top) {
        this.queryOptions.top(top);
        return this;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    countOption(count) {
        this.queryOptions.count(count);
        return this;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    customOption(key, value) {
        this.queryOptions.customOption(key, value);
        return this;
    }
    /**
     * @param {?} format
     * @return {?}
     */
    format(format) {
        this.queryOptions.format(format);
        return this;
    }
    /**
     * @param {?=} httpOptions
     * @return {?}
     */
    get(httpOptions) {
        return this.odataService.get(this, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(body, httpOptions) {
        return this.odataService.post(this, body, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(body, etag, httpOptions) {
        return this.odataService.patch(this, body, etag, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    put(body, etag, httpOptions) {
        return this.odataService.put(this, body, etag, httpOptions);
    }
    /**
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(etag, httpOptions) {
        return this.odataService.delete(this, etag, httpOptions);
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = this.queryString;
        if (Utils.isNotNullNorUndefined(this.queryOptions) && !this.queryOptions.isEmpty()) {
            res += '?' + this.queryOptions.toString();
        }
        return res;
    }
    /**
     * @param {?} segment
     * @return {?}
     */
    getSegment(segment) {
        Utils.requireNotNull(segment, 'segment');
        /** @type {?} */
        const res = this.segments.find((value, index, segments) => {
            return value === segment;
        });
        return res;
    }
    /**
     * @param {?} segment
     * @return {?}
     */
    addSegment(segment) {
        Utils.requireNotNull(segment, 'segment');
        this.segments.push(segment);
        if (Utils.isNotNullNorUndefined(this.segments) && this.segments.length) {
            this.lastSegment = this.segments[this.segments.length - 1];
        }
    }
}
// QUERY OPTIONS SEPARATOR
ODataQuery.SEPARATOR = '&';
ODataQuery.METADATA = 'metadata';
ODataQuery.ENTITY_SET = 'entitySet';
ODataQuery.ENTITY_KEY = 'entityKey';
ODataQuery.SINGLETON = 'singleton';
ODataQuery.TYPE_NAME = 'typeName';
ODataQuery.PROPERTY = 'property';
ODataQuery.NAVIGATION_PROPERTY = 'navigationProperty';
ODataQuery.REF = 'ref';
ODataQuery.VALUE = 'value';
ODataQuery.COUNT = 'count';
ODataQuery.FUNCTION_CALL = 'functionCall';
ODataQuery.ACTION_CALL = 'actionCall';
ODataQuery.$METADATA = '$metadata';
ODataQuery.$REF = '$ref';
ODataQuery.$VALUE = '$value';
ODataQuery.$COUNT = '$count';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlAnnotable {
    /**
     * @param {?=} annotationList
     */
    constructor(annotationList) {
        this.annotationList = annotationList;
    }
}
class CsdlAnnotations extends CsdlAnnotable {
    /**
     * @param {?} target
     * @param {?} annotationList
     * @param {?=} qualifier
     */
    constructor(target, annotationList, qualifier) {
        super(annotationList);
        this.target = target;
        this.qualifier = qualifier;
    }
}
class CsdlAnnotation {
    /**
     * @param {?} term
     * @param {?=} qualifier
     */
    constructor(term, qualifier) {
        this.term = term;
        this.qualifier = qualifier;
    }
}
class CsdlTerm {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} baseTerm
     * @param {?=} defaultValue
     * @param {?=} appliesTo
     * @param {?=} nullable
     * @param {?=} maxLength
     * @param {?=} precision
     * @param {?=} scale
     * @param {?=} srid
     */
    constructor(name, type, baseTerm, defaultValue, appliesTo, nullable, maxLength, precision, scale, srid) {
        this.name = name;
        this.type = type;
        this.baseTerm = baseTerm;
        this.defaultValue = defaultValue;
        this.appliesTo = appliesTo;
        this.nullable = nullable;
        this.maxLength = maxLength;
        this.precision = precision;
        this.scale = scale;
        this.srid = srid;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlEntityContainer {
    /**
     * @param {?} name
     * @param {?=} extend
     * @param {?=} entitySets
     * @param {?=} singletons
     * @param {?=} functionImports
     * @param {?=} actionImports
     */
    constructor(name, extend, entitySets, singletons, functionImports, actionImports) {
        this.name = name;
        this.extend = extend;
        this.entitySets = entitySets;
        this.singletons = singletons;
        this.functionImports = functionImports;
        this.actionImports = actionImports;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlEntitySet {
    /**
     * @param {?} name
     * @param {?} entityType
     * @param {?=} navigationPropertyBinding
     * @param {?=} includeInServiceDocument
     */
    constructor(name, entityType, navigationPropertyBinding, includeInServiceDocument) {
        this.name = name;
        this.entityType = entityType;
        this.navigationPropertyBinding = navigationPropertyBinding;
        this.includeInServiceDocument = includeInServiceDocument;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlEnumType {
    /**
     * @param {?} name
     * @param {?} members
     * @param {?=} underlyingType
     * @param {?=} isFlags
     */
    constructor(name, members, underlyingType, isFlags) {
        this.name = name;
        this.members = members;
        this.underlyingType = underlyingType;
        this.isFlags = isFlags;
    }
}
class CsdlEnumMember {
    /**
     * @param {?} name
     * @param {?=} value
     */
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlFunction {
    /**
     * @param {?} name
     * @param {?} returnType
     * @param {?=} isBound
     * @param {?=} entitySetPath
     * @param {?=} isComposable
     * @param {?=} parameters
     */
    constructor(name, returnType, isBound, entitySetPath, isComposable, parameters) {
        this.name = name;
        this.returnType = returnType;
        this.isBound = isBound;
        this.entitySetPath = entitySetPath;
        this.isComposable = isComposable;
        this.parameters = parameters;
    }
}
class CsdlAction {
    /**
     * @param {?} name
     * @param {?=} returnType
     * @param {?=} isBound
     * @param {?=} entitySetPath
     * @param {?=} parameters
     */
    constructor(name, returnType, isBound, entitySetPath, parameters) {
        this.name = name;
        this.returnType = returnType;
        this.isBound = isBound;
        this.entitySetPath = entitySetPath;
        this.parameters = parameters;
    }
}
class CsdlFunctionImport {
    /**
     * @param {?} name
     * @param {?} functionName
     * @param {?=} entitySet
     * @param {?=} IncludeInServiceDocument
     */
    constructor(name, functionName, entitySet, IncludeInServiceDocument) {
        this.name = name;
        this.functionName = functionName;
        this.entitySet = entitySet;
        this.IncludeInServiceDocument = IncludeInServiceDocument;
    }
}
class CsdlActionImport {
    /**
     * @param {?} name
     * @param {?} action
     * @param {?=} entitySet
     */
    constructor(name, action, entitySet) {
        this.name = name;
        this.action = action;
        this.entitySet = entitySet;
    }
}
class CsdlParameter {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} nullable
     * @param {?=} maxLength
     * @param {?=} precision
     * @param {?=} scale
     * @param {?=} srid
     */
    constructor(name, type, nullable, maxLength, precision, scale, srid) {
        this.name = name;
        this.type = type;
        this.nullable = nullable;
        this.maxLength = maxLength;
        this.precision = precision;
        this.scale = scale;
        this.srid = srid;
    }
}
class CsdlReturnType {
    /**
     * @param {?} type
     * @param {?=} nullable
     * @param {?=} maxLength
     * @param {?=} precision
     * @param {?=} scale
     * @param {?=} srid
     */
    constructor(type, nullable, maxLength, precision, scale, srid) {
        this.type = type;
        this.nullable = nullable;
        this.maxLength = maxLength;
        this.precision = precision;
        this.scale = scale;
        this.srid = srid;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlNavigationPropertyBinding {
    /**
     * @param {?} path
     * @param {?} target
     */
    constructor(path, target) {
        this.path = path;
        this.target = target;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlReference extends CsdlAnnotable {
    /**
     * @param {?} uri
     * @param {?=} includes
     * @param {?=} includeAnnotations
     * @param {?=} annotationList
     */
    constructor(uri, includes, includeAnnotations, annotationList) {
        super(annotationList);
        this.uri = uri;
        this.includes = includes;
        this.includeAnnotations = includeAnnotations;
    }
}
class CsdlInclude {
    /**
     * @param {?} namespace
     * @param {?=} alias
     */
    constructor(namespace, alias) {
        this.namespace = namespace;
        this.alias = alias;
    }
}
class CsdlIncludeAnnotations {
    /**
     * @param {?} termNamespace
     * @param {?=} qualifier
     * @param {?=} targetNamespace
     */
    constructor(termNamespace, qualifier, targetNamespace) {
        this.termNamespace = termNamespace;
        this.qualifier = qualifier;
        this.targetNamespace = targetNamespace;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlSchema extends CsdlAnnotable {
    /**
     * @param {?} namespace
     * @param {?=} alias
     * @param {?=} enumTypes
     * @param {?=} complexTypes
     * @param {?=} entityTypes
     * @param {?=} functions
     * @param {?=} actions
     * @param {?=} entityContainer
     * @param {?=} typeDefinitions
     * @param {?=} terms
     * @param {?=} annotationsList
     * @param {?=} annotationList
     */
    constructor(namespace, alias, enumTypes, complexTypes, entityTypes, functions, actions, entityContainer, typeDefinitions, terms, annotationsList, annotationList) {
        super(annotationList);
        this.namespace = namespace;
        this.alias = alias;
        this.enumTypes = enumTypes;
        this.complexTypes = complexTypes;
        this.entityTypes = entityTypes;
        this.functions = functions;
        this.actions = actions;
        this.entityContainer = entityContainer;
        this.typeDefinitions = typeDefinitions;
        this.terms = terms;
        this.annotationsList = annotationsList;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlSingleton {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} navigationPropertyBindings
     */
    constructor(name, type, navigationPropertyBindings) {
        this.name = name;
        this.type = type;
        this.navigationPropertyBindings = navigationPropertyBindings;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class CsdlStructuralProperty {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} nullable
     */
    constructor(name, type, nullable) {
        this.name = name;
        this.type = type;
        this.nullable = nullable;
    }
}
class CsdlProperty extends CsdlStructuralProperty {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} nullable
     * @param {?=} maxLength
     * @param {?=} precision
     * @param {?=} scale
     * @param {?=} unicode
     * @param {?=} srid
     * @param {?=} defaultValue
     */
    constructor(name, type, nullable, maxLength, precision, scale, unicode, srid, defaultValue) {
        super(name, type, nullable);
        this.maxLength = maxLength;
        this.precision = precision;
        this.scale = scale;
        this.unicode = unicode;
        this.srid = srid;
        this.defaultValue = defaultValue;
    }
}
class CsdlNavigationProperty extends CsdlStructuralProperty {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?=} nullable
     * @param {?=} partner
     * @param {?=} containsTarget
     * @param {?=} referentialConstraints
     * @param {?=} onDelete
     */
    constructor(name, type, nullable, partner, containsTarget, referentialConstraints, onDelete) {
        super(name, type, nullable);
        this.partner = partner;
        this.containsTarget = containsTarget;
        this.referentialConstraints = referentialConstraints;
        this.onDelete = onDelete;
    }
}
class CsdlReferentialConstraint {
    /**
     * @param {?} property
     * @param {?} referencedProperty
     */
    constructor(property, referencedProperty) {
        this.property = property;
        this.referencedProperty = referencedProperty;
    }
}
class CsdlOnDelete {
    /**
     * @param {?} action
     */
    constructor(action) {
        this.action = action;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlStructuredType {
    /**
     * @param {?} name
     * @param {?=} properties
     * @param {?=} navigationProperties
     * @param {?=} baseType
     * @param {?=} openType
     * @param {?=} abstract
     */
    constructor(name, properties, navigationProperties, baseType, openType, abstract) {
        this.name = name;
        this.properties = properties;
        this.navigationProperties = navigationProperties;
        this.baseType = baseType;
        this.openType = openType;
        this.abstract = abstract;
    }
}
class CsdlComplexType extends CsdlStructuredType {
    /**
     * @param {?} name
     * @param {?=} properties
     * @param {?=} navigationProperties
     * @param {?=} baseType
     * @param {?=} openType
     * @param {?=} abstract
     */
    constructor(name, properties, navigationProperties, baseType, openType, abstract) {
        super(name, properties, navigationProperties, baseType, openType, abstract);
    }
}
class CsdlEntityType extends CsdlStructuredType {
    /**
     * @param {?} name
     * @param {?=} key
     * @param {?=} properties
     * @param {?=} navigationProperties
     * @param {?=} baseType
     * @param {?=} openType
     * @param {?=} abstract
     * @param {?=} hasStream
     */
    constructor(name, key, properties, navigationProperties, baseType, openType, abstract, hasStream) {
        super(name, properties, navigationProperties, baseType, openType, abstract);
        this.key = key;
        this.hasStream = hasStream;
    }
}
class CsdlKey {
    /**
     * @param {?} propertyRefs
     */
    constructor(propertyRefs) {
        this.propertyRefs = propertyRefs;
    }
}
class CsdlPropertyRef {
    /**
     * @param {?} name
     * @param {?=} alias
     */
    constructor(name, alias) {
        this.name = name;
        this.alias = alias;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CsdlTypeDefinition extends CsdlAnnotable {
    /**
     * @param {?} name
     * @param {?} underlayingType
     * @param {?=} maxLength
     * @param {?=} precision
     * @param {?=} scale
     * @param {?=} unicode
     * @param {?=} srid
     * @param {?=} annotationList
     */
    constructor(name, underlayingType, maxLength, precision, scale, unicode, srid, annotationList) {
        super(annotationList);
        this.name = name;
        this.underlayingType = underlayingType;
        this.maxLength = maxLength;
        this.precision = precision;
        this.scale = scale;
        this.unicode = unicode;
        this.srid = srid;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class EntitySet {
    /**
     * @param {?} entities
     * @param {?} count
     * @param {?} type
     */
    constructor(entities, count, type) {
        Utils.requireNotNullNorUndefined(entities, 'entities');
        this.entities = [];
        entities.forEach(entity => {
            if (Utils.isNullOrUndefined(type)) {
                this.entities.push(Object.assign({}, entity));
            }
            else {
                this.entities.push(Object.assign(new type(), entity));
            }
        });
        this.count = count;
    }
    /**
     * @return {?}
     */
    getEntities() {
        return this.entities;
    }
    /**
     * @return {?}
     */
    getCount() {
        return this.count;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const FieldType = {
    ATTRIBUTE: 0, TAG: 1,
};
FieldType[FieldType.ATTRIBUTE] = 'ATTRIBUTE';
FieldType[FieldType.TAG] = 'TAG';
class Field {
    /**
     * @param {?} name
     * @param {?} fieldType
     */
    constructor(name, fieldType) {
        this.name = name;
        this.fieldType = fieldType;
    }
}
class Metadata {
    /**
     * @param {?} xml
     */
    constructor(xml) {
        try {
            /** @type {?} */
            const parser = new DOMParser();
            /** @type {?} */
            const document = parser.parseFromString(xml, 'text/xml');
            this.checkVersion(document);
            this.version = this.getFieldValueByAttribute(new Field(Metadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE), document.documentElement.attributes);
            this.references = this.getObjects(document.documentElement, Metadata.TAG_REFERENCE, [
                new Field(Metadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),
                new Field(Metadata.TAG_INCLUDE, FieldType.TAG),
                new Field(Metadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
            ]);
            /** @type {?} */
            const dataServices = document.documentElement.getElementsByTagName(Metadata.TAG_DATA_SERVICES)[0];
            this.schemas = this.getObjects(dataServices, Metadata.TAG_SCHEMA, [
                new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),
                new Field(Metadata.TAG_ENUM_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_COMPLEX_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_ENTITY_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_FUNCTION, FieldType.TAG),
                new Field(Metadata.TAG_ACTION, FieldType.TAG),
                new Field(Metadata.TAG_ENTITY_CONTAINER, FieldType.TAG),
                new Field(Metadata.TAG_TYPE_DEFINITION, FieldType.TAG),
                new Field(Metadata.TAG_TERM, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATIONS, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
            ]);
        }
        catch (error) {
            throw new Error('Unable to parse metadata, ' + error);
        }
    }
    /**
     * @param {?} document
     * @return {?}
     */
    checkVersion(document) {
        /** @type {?} */
        const attributes = document.documentElement.attributes;
        if (Utils.isNullOrUndefined(attributes)) {
            throw new Error('OData version is not specified in the metadata');
        }
        /** @type {?} */
        const attr = attributes.getNamedItem('Version');
        if (Utils.isNullOrUndefined(attr)) {
            throw new Error('OData version is not specified in the metadata');
        }
        /** @type {?} */
        const odataVersion = attr.nodeValue;
        if (odataVersion !== '4.0') {
            throw new Error('OData version "' + odataVersion + '" is not supported');
        }
    }
    /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    getObjects(parentElement, tag, fieldNames) {
        /** @type {?} */
        let objects;
        /** @type {?} */
        const children = parentElement.children;
        for (let index = 0; index < children.length; index++) {
            /** @type {?} */
            const element = children.item(index);
            if (element.nodeName !== tag) {
                continue;
            }
            /** @type {?} */
            const attributes = element.attributes;
            /** @type {?} */
            const fieldValues = this.getFieldValues(fieldNames, attributes, element);
            if (Utils.isNullOrUndefined(objects)) {
                objects = [];
            }
            switch (tag) {
                case Metadata.TAG_REFERENCE:
                    objects.push(new CsdlReference(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_INCLUDE:
                    objects.push(new CsdlInclude(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_INCLUDE_ANNOTATIONS:
                    objects.push(new CsdlIncludeAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_TERM:
                    objects.push(new CsdlTerm(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9]));
                    break;
                case Metadata.TAG_ANNOTATIONS:
                    objects.push(new CsdlAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_ANNOTATION:
                    objects.push(new CsdlAnnotation(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_SCHEMA:
                    objects.push(new CsdlSchema(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9], fieldValues[10], fieldValues[11]));
                    break;
                case Metadata.TAG_ENUM_TYPE:
                    objects.push(new CsdlEnumType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_COMPLEX_TYPE:
                    objects.push(new CsdlComplexType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                    break;
                case Metadata.TAG_ENTITY_TYPE:
                    objects.push(new CsdlEntityType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                    break;
                case Metadata.TAG_FUNCTION:
                    objects.push(new CsdlFunction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                    break;
                case Metadata.TAG_MEMBER:
                    objects.push(new CsdlEnumMember(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_PROPERTY:
                    objects.push(new CsdlProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8]));
                    break;
                case Metadata.TAG_PROPERTY_REF:
                    objects.push(new CsdlPropertyRef(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_NAVIGATION_PROPERTY:
                    objects.push(new CsdlNavigationProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                    break;
                case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                    objects.push(new CsdlReferentialConstraint(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_PARAMETER:
                    objects.push(new CsdlParameter(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                    break;
                case Metadata.TAG_ACTION:
                    objects.push(new CsdlAction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4]));
                    break;
                case Metadata.TAG_ENTITY_SET:
                    objects.push(new CsdlEntitySet(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_SINGLETON:
                    objects.push(new CsdlSingleton(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_FUNCTION_IMPORT:
                    objects.push(new CsdlFunctionImport(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_ACTION_IMPORT:
                    objects.push(new CsdlActionImport(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                    objects.push(new CsdlNavigationPropertyBinding(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_TYPE_DEFINITION:
                    objects.push(new CsdlTypeDefinition(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                    break;
                default: throw new Error('Unknwon tag:' + tag);
            }
        }
        return objects;
    }
    /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    getObject(parentElement, tag, fieldNames) {
        /** @type {?} */
        let object;
        /** @type {?} */
        const children = parentElement.children;
        /** @type {?} */
        let element;
        for (let index = 0; index < children.length; index++) {
            if (children.item(index).nodeName === tag) {
                if (Utils.isNotNullNorUndefined(element)) {
                    throw new Error('Expected one ' + tag);
                }
                element = children.item(index);
            }
        }
        if (Utils.isNotNullNorUndefined(element)) {
            /** @type {?} */
            const attributes = element.attributes;
            /** @type {?} */
            const fieldValues = this.getFieldValues(fieldNames, attributes, element);
            switch (tag) {
                case Metadata.TAG_KEY:
                    object = new CsdlKey(fieldValues[0]);
                    break;
                case Metadata.TAG_RETURN_TYPE:
                    object = new CsdlReturnType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                    break;
                case Metadata.TAG_ENTITY_CONTAINER:
                    object = new CsdlEntityContainer(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                    break;
                case Metadata.TAG_ON_DELETE:
                    object = new CsdlOnDelete(fieldValues[0]);
                    break;
                default: throw new Error('Unknwon tag:' + tag);
            }
        }
        return object;
    }
    /**
     * @param {?} fields
     * @param {?} attributes
     * @param {?} element
     * @return {?}
     */
    getFieldValues(fields, attributes, element) {
        /** @type {?} */
        const fieldValues = [];
        for (const field of fields) {
            if (field.fieldType === FieldType.TAG) {
                fieldValues.push(this.getFieldValueByTag(field, element));
            }
            else if (field.fieldType === FieldType.ATTRIBUTE) {
                fieldValues.push(this.getFieldValueByAttribute(field, attributes));
            }
            else {
                throw new Error('Unknown field type: ' + field.fieldType);
            }
        }
        return fieldValues;
    }
    /**
     * @param {?} field
     * @param {?} attributes
     * @return {?}
     */
    getFieldValueByAttribute(field, attributes) {
        switch (field.name) {
            case Metadata.ATTRIBUTE_VERSION:
            case Metadata.ATTRIBUTE_URI:
            case Metadata.ATTRIBUTE_NAMESPACE:
            case Metadata.ATTRIBUTE_ALIAS:
            case Metadata.ATTRIBUTE_TERM_NAMESPACE:
            case Metadata.ATTRIBUTE_TERM:
            case Metadata.ATTRIBUTE_QUALIFIER:
            case Metadata.ATTRIBUTE_TARGET_NAMESPACE:
            case Metadata.ATTRIBUTE_NAME:
            case Metadata.ATTRIBUTE_TYPE:
            case Metadata.ATTRIBUTE_SRID:
            case Metadata.ATTRIBUTE_DEFAULT_VALUE:
            case Metadata.ATTRIBUTE_PARTNER:
            case Metadata.ATTRIBUTE_PROPERTY:
            case Metadata.ATTRIBUTE_REFERENCED_PROPERTY:
            case Metadata.ATTRIBUTE_BASE_TYPE:
            case Metadata.ATTRIBUTE_ENTITY_SET_PATH:
            case Metadata.ATTRIBUTE_ENTITY_TYPE:
            case Metadata.ATTRIBUTE_PATH:
            case Metadata.ATTRIBUTE_TARGET:
            case Metadata.ATTRIBUTE_FUNCTION:
            case Metadata.ATTRIBUTE_ACTION:
            case Metadata.ATTRIBUTE_ENTITY_SET:
            case Metadata.ATTRIBUTE_UNDERLYING_TYPE:
            case Metadata.ATTRIBUTE_EXTENDS:
            case Metadata.ATTRIBUTE_BASE_TERM:
            case Metadata.ATTRIBUTE_APPLIES_TO:
                return this.getAttributeValue(attributes, field.name);
            case Metadata.ATTRIBUTE_NULLABLE:
            case Metadata.ATTRIBUTE_UNICODE:
            case Metadata.ATTRIBUTE_OPEN_TYPE:
            case Metadata.ATTRIBUTE_HAS_STREAM:
            case Metadata.ATTRIBUTE_IS_BOUND:
            case Metadata.ATTRIBUTE_IS_COMPOSABLE:
            case Metadata.ATTRIBUTE_CONTAINS_TARGET:
            case Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT:
            case Metadata.ATTRIBUTE_ABSTRACT:
            case Metadata.ATTRIBUTE_IS_FLAGS:
                return this.propertyValueToBoolean(this.getAttributeValue(attributes, field.name));
            case Metadata.ATTRIBUTE_VALUE:
            case Metadata.ATTRIBUTE_MAX_LENGTH:
            case Metadata.ATTRIBUTE_PRECISION:
            case Metadata.ATTRIBUTE_SCALE:
                return this.propertyValueToNumber(this.getAttributeValue(attributes, field.name));
            default: throw new Error('Unknwon attribute:' + field.name);
        }
    }
    /**
     * @param {?} field
     * @param {?} element
     * @return {?}
     */
    getFieldValueByTag(field, element) {
        switch (field.name) {
            case Metadata.TAG_INCLUDE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_INCLUDE_ANNOTATIONS:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TERM_NAMESPACE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TARGET_NAMESPACE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_TERM:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_BASE_TERM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_APPLIES_TO, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ANNOTATIONS:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ANNOTATION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TERM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ENUM_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_MEMBER, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_IS_FLAGS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_COMPLEX_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ENTITY_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_KEY, FieldType.TAG),
                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_HAS_STREAM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_FUNCTION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_IS_COMPOSABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                ]);
            case Metadata.TAG_MEMBER:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_VALUE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_PROPERTY:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_KEY:
                return this.getObject(element, field.name, [
                    new Field(Metadata.TAG_PROPERTY_REF, FieldType.TAG)
                ]);
            case Metadata.TAG_PROPERTY_REF:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_NAVIGATION_PROPERTY:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PARTNER, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_CONTAINS_TARGET, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_REFERENTIAL_CONSTRAINT, FieldType.TAG),
                    new Field(Metadata.TAG_ON_DELETE, FieldType.TAG)
                ]);
            case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_PROPERTY, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_REFERENCED_PROPERTY, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ON_DELETE:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_PARAMETER:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_RETURN_TYPE:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ACTION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                ]);
            case Metadata.TAG_ENTITY_CONTAINER:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_EXTENDS, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ENTITY_SET, FieldType.TAG),
                    new Field(Metadata.TAG_SINGLETON, FieldType.TAG),
                    new Field(Metadata.TAG_FUNCTION_IMPORT, FieldType.TAG),
                    new Field(Metadata.TAG_ACTION_IMPORT, FieldType.TAG)
                ]);
            case Metadata.TAG_ENTITY_SET:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_SINGLETON:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG)
                ]);
            case Metadata.TAG_FUNCTION_IMPORT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_FUNCTION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ACTION_IMPORT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_TYPE_DEFINITION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
                ]);
            default: throw new Error('Unknwon tag:' + field.name);
        }
    }
    /**
     * @param {?} attributes
     * @param {?} attributeName
     * @return {?}
     */
    getAttributeValue(attributes, attributeName) {
        /** @type {?} */
        const attribute = attributes.getNamedItem(attributeName);
        if (Utils.isNotNullNorUndefined(attribute)) {
            return attribute.nodeValue;
        }
        return undefined;
    }
    /**
     * @param {?} attributeValue
     * @return {?}
     */
    propertyValueToNumber(attributeValue) {
        return Utils.isNotNullNorUndefined(attributeValue) ? Number(attributeValue) : undefined;
    }
    /**
     * @param {?} attributeValue
     * @return {?}
     */
    propertyValueToBoolean(attributeValue) {
        return Utils.isNotNullNorUndefined(attributeValue) ? attributeValue === 'true' : undefined;
    }
}
Metadata.TAG_EDMX = 'edmx:Edmx';
Metadata.TAG_DATA_SERVICES = 'edmx:DataServices';
Metadata.TAG_REFERENCE = 'edmx:Reference';
Metadata.TAG_INCLUDE = 'edmx:Include';
Metadata.TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';
Metadata.TAG_TERM = 'Term';
Metadata.TAG_ANNOTATIONS = 'Annotations';
Metadata.TAG_ANNOTATION = 'Annotation';
Metadata.TAG_SCHEMA = 'Schema';
Metadata.TAG_ENUM_TYPE = 'EnumType';
Metadata.TAG_MEMBER = 'Member';
Metadata.TAG_COMPLEX_TYPE = 'ComplexType';
Metadata.TAG_ENTITY_TYPE = 'EntityType';
Metadata.TAG_PROPERTY = 'Property';
Metadata.TAG_KEY = 'Key';
Metadata.TAG_PROPERTY_REF = 'PropertyRef';
Metadata.TAG_NAVIGATION_PROPERTY = 'NavigationProperty';
Metadata.TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';
Metadata.TAG_ON_DELETE = 'OnDelete';
Metadata.TAG_FUNCTION = 'Function';
Metadata.TAG_RETURN_TYPE = 'ReturnType';
Metadata.TAG_PARAMETER = 'Parameter';
Metadata.TAG_ACTION = 'Action';
Metadata.TAG_ENTITY_CONTAINER = 'EntityContainer';
Metadata.TAG_ENTITY_SET = 'EntitySet';
Metadata.TAG_SINGLETON = 'Singleton';
Metadata.TAG_FUNCTION_IMPORT = 'FunctionImport';
Metadata.TAG_ACTION_IMPORT = 'ActionImport';
Metadata.TAG_NAVIGATION_PROPERTY_BINDING = 'NavigationPropertyBinding';
Metadata.TAG_TYPE_DEFINITION = 'TypeDefinition';
Metadata.ATTRIBUTE_VERSION = 'Version';
Metadata.ATTRIBUTE_URI = 'Uri';
Metadata.ATTRIBUTE_ALIAS = 'Alias';
Metadata.ATTRIBUTE_NAMESPACE = 'Namespace';
Metadata.ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';
Metadata.ATTRIBUTE_QUALIFIER = 'Qualifier';
Metadata.ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';
Metadata.ATTRIBUTE_TERM = 'Term';
Metadata.ATTRIBUTE_NAME = 'Name';
Metadata.ATTRIBUTE_VALUE = 'Value';
Metadata.ATTRIBUTE_BASE_TYPE = 'BaseType';
Metadata.ATTRIBUTE_OPEN_TYPE = 'OpenType';
Metadata.ATTRIBUTE_TYPE = 'Type';
Metadata.ATTRIBUTE_NULLABLE = 'Nullable';
Metadata.ATTRIBUTE_MAX_LENGTH = 'MaxLength';
Metadata.ATTRIBUTE_PRECISION = 'Precision';
Metadata.ATTRIBUTE_SCALE = 'Scale';
Metadata.ATTRIBUTE_UNICODE = 'Unicode';
Metadata.ATTRIBUTE_SRID = 'SRID';
Metadata.ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';
Metadata.ATTRIBUTE_PARTNER = 'Partner';
Metadata.ATTRIBUTE_PROPERTY = 'Property';
Metadata.ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';
Metadata.ATTRIBUTE_HAS_STREAM = 'HasStream';
Metadata.ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';
Metadata.ATTRIBUTE_IS_BOUND = 'IsBound';
Metadata.ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';
Metadata.ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';
Metadata.ATTRIBUTE_ENTITY_TYPE = 'EntityType';
Metadata.ATTRIBUTE_PATH = 'Path';
Metadata.ATTRIBUTE_TARGET = 'Target';
Metadata.ATTRIBUTE_FUNCTION = 'Function';
Metadata.ATTRIBUTE_ACTION = 'Action';
Metadata.ATTRIBUTE_ENTITY_SET = 'EntitySet';
Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT = 'IncludeInServiceDocument';
Metadata.ATTRIBUTE_ABSTRACT = 'Abstract';
Metadata.ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';
Metadata.ATTRIBUTE_IS_FLAGS = 'IsFlags';
Metadata.ATTRIBUTE_EXTENDS = 'Extends';
Metadata.ATTRIBUTE_BASE_TERM = 'BaseTerm';
Metadata.ATTRIBUTE_APPLIES_TO = 'AppliesTo';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        this.httpResponse = httpResponse;
    }
    /**
     * @return {?}
     */
    getHttpResponse() {
        return this.httpResponse;
    }
    /**
     * @return {?}
     */
    isOk() {
        return this.httpResponse.ok;
    }
    /**
     * @return {?}
     */
    getBodyAsJson() {
        return null;
    }
    /**
     * @return {?}
     */
    getBodyAsText() {
        return this.httpResponse.body;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = `${this.httpResponse.status} ${this.httpResponse.statusText}\n`;
        /** @type {?} */
        const headers = this.httpResponse.headers;
        for (const key of headers.keys()) {
            res += key + ': ';
            /** @type {?} */
            let valueString = '';
            for (const value of headers.getAll(key)) {
                if (valueString.length) {
                    valueString += ' ';
                }
                valueString += value;
            }
            res += valueString + '\n';
        }
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json)) {
            res += JSON.stringify(json, null, 4);
        }
        else {
            res += this.getBodyAsText();
        }
        return res;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ODataResponse extends ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        super(httpResponse);
    }
    /**
     * @return {?}
     */
    getBodyAsJson() {
        /** @type {?} */
        const contentType = this.getHttpResponse().headers.get('Content-Type');
        if (Utils.isNotNullNorUndefined(contentType) && contentType.includes('json')) {
            try {
                return JSON.parse(this.getBodyAsText());
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    toMetadata() {
        /** @type {?} */
        const xml = this.getBodyAsText();
        return new Metadata(xml);
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toEntitySet(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            let count = null;
            if (json.hasOwnProperty(ODataResponse.ODATA_COUNT)) {
                count = json[ODataResponse.ODATA_COUNT];
            }
            return new EntitySet(json[ODataResponse.VALUE], count, type);
        }
        return null;
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toComplexCollection(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            const res = [];
            for (const object of json[ODataResponse.VALUE]) {
                res.push(this.toObject(object, type));
            }
            return res;
        }
        return null;
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toEntity(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        return this.toObject(json, type);
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toComplexValue(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        return this.toObject(json, type);
    }
    /**
     * @template T
     * @return {?}
     */
    toPropertyValue() {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json)) {
            if (json.hasOwnProperty(ODataResponse.VALUE)) {
                return /** @type {?} */ (json[ODataResponse.VALUE]);
            }
            return null;
        }
        else {
            return /** @type {?} */ (JSON.parse(this.getBodyAsText()));
        }
    }
    /**
     * @return {?}
     */
    toCount() {
        return Number(this.getBodyAsText());
    }
    /**
     * @return {?}
     */
    toODataResponseBatch() {
        return new ODataResponseBatch(this.getHttpResponse());
    }
    /**
     * @template T
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    toObject(object, type) {
        if (Utils.isNotNullNorUndefined(object)) {
            if (Utils.isNullOrUndefined(type)) {
                return Object.assign({}, object);
            }
            else {
                return Object.assign(new type(), object);
            }
        }
        return null;
    }
}
ODataResponse.VALUE = 'value';
ODataResponse.ODATA_COUNT = '@odata.count';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ODataResponseBatch extends ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        super(httpResponse);
        this.odataResponses = [];
        this.parseResponses();
    }
    /**
     * @return {?}
     */
    getODataResponses() {
        return this.odataResponses;
    }
    /**
     * @return {?}
     */
    parseResponses() {
        /** @type {?} */
        const contentType = this.getHttpResponse().headers.get(ODataResponseBatch.CONTENT_TYPE);
        /** @type {?} */
        const boundaryDelimiterBatch = this.getBoundaryDelimiter(contentType);
        /** @type {?} */
        const boundaryEndBatch = this.getBoundaryEnd(boundaryDelimiterBatch);
        /** @type {?} */
        const batchBody = this.getBodyAsText();
        /** @type {?} */
        const batchBodyLines = batchBody.split(ODataResponseBatch.NEWLINE);
        /** @type {?} */
        let odataResponseCS;
        /** @type {?} */
        let contentId;
        /** @type {?} */
        let boundaryDelimiterCS;
        /** @type {?} */
        let boundaryEndCS;
        /** @type {?} */
        let batchPartStartIndex;
        for (let index = 0; index < batchBodyLines.length; index++) {
            /** @type {?} */
            const batchBodyLine = batchBodyLines[index];
            if (batchBodyLine.startsWith(ODataResponseBatch.CONTENT_TYPE)) {
                /** @type {?} */
                const contentTypeValue = this.getHeaderValue(batchBodyLine);
                if (contentTypeValue === ODataResponseBatch.MULTIPART_MIXED) {
                    odataResponseCS = [];
                    contentId = undefined;
                    boundaryDelimiterCS = this.getBoundaryDelimiter(batchBodyLine);
                    boundaryEndCS = this.getBoundaryEnd(boundaryDelimiterCS);
                    batchPartStartIndex = undefined;
                }
                continue;
            }
            else if (Utils.isNotNullNorUndefined(odataResponseCS) && batchBodyLine.startsWith(ODataResponseBatch.CONTENT_ID)) {
                contentId = Number(this.getHeaderValue(batchBodyLine));
            }
            else if (batchBodyLine.startsWith(ODataResponseBatch.HTTP11)) {
                batchPartStartIndex = index;
            }
            else if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS
                || batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                if (!batchPartStartIndex) {
                    continue;
                }
                /** @type {?} */
                const odataResponse = this.createODataResponse(batchBodyLines, batchPartStartIndex, index - 1);
                if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                    odataResponseCS[contentId] = odataResponse;
                }
                else {
                    this.odataResponses.push(odataResponse);
                }
                if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS) {
                    batchPartStartIndex = index + 1;
                }
                else if (batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                    if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                        for (const response of odataResponseCS) {
                            if (Utils.isNotNullNorUndefined(response)) {
                                this.odataResponses.push(response);
                            }
                        }
                    }
                    odataResponseCS = undefined;
                    boundaryDelimiterCS = undefined;
                    boundaryEndCS = undefined;
                    batchPartStartIndex = undefined;
                }
            }
        }
    }
    /**
     * @param {?} header
     * @return {?}
     */
    getHeaderValue(header) {
        /** @type {?} */
        let res = header.split(';')[0].trim();
        res = res.split(':')[1].trim();
        return res;
    }
    /**
     * @param {?} contentType
     * @return {?}
     */
    getBoundaryDelimiter(contentType) {
        /** @type {?} */
        const contentTypeParts = contentType.split(';');
        if (contentTypeParts.length === 2) {
            /** @type {?} */
            const boundary = contentType.split(';')[1].trim();
            /** @type {?} */
            const boundaryDelimiter = ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX + boundary.split('=')[1];
            return boundaryDelimiter;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} boundaryDelimiter
     * @return {?}
     */
    getBoundaryEnd(boundaryDelimiter) {
        if (!boundaryDelimiter.length) {
            return '';
        }
        /** @type {?} */
        const boundaryEnd = boundaryDelimiter + ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
        return boundaryEnd;
    }
    /**
     * @param {?} batchBodyLines
     * @param {?} batchPartStartIndex
     * @param {?} batchPartEndIndex
     * @return {?}
     */
    createODataResponse(batchBodyLines, batchPartStartIndex, batchPartEndIndex) {
        /** @type {?} */
        let index = batchPartStartIndex;
        /** @type {?} */
        const statusLine = batchBodyLines[index];
        /** @type {?} */
        const statusLineParts = batchBodyLines[index].split(' ');
        /** @type {?} */
        const status = statusLineParts[1];
        /** @type {?} */
        const statusTextIndex = statusLine.indexOf(status) + status.length + 1;
        /** @type {?} */
        const statusText = statusLine.substring(statusTextIndex);
        /** @type {?} */
        let httpHeaders = new HttpHeaders();
        for (++index; index <= batchPartEndIndex; index++) {
            /** @type {?} */
            const batchBodyLine = batchBodyLines[index];
            if (batchBodyLine === '') {
                break;
            }
            /** @type {?} */
            const batchBodyLineParts = batchBodyLine.split(': ');
            httpHeaders = httpHeaders.append(batchBodyLineParts[0].trim(), batchBodyLineParts[1].trim());
        }
        /** @type {?} */
        let body = '';
        for (; index <= batchPartEndIndex; index++) {
            body += batchBodyLines[index];
        }
        return new ODataResponse(new HttpResponse({
            body: body,
            headers: httpHeaders,
            status: Number(status),
            statusText: statusText
        }));
    }
}
ODataResponseBatch.CONTENT_TYPE = 'Content-Type';
ODataResponseBatch.CONTENT_ID = 'Content-ID';
ODataResponseBatch.HTTP11 = 'HTTP/1.1';
ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX = '--';
ODataResponseBatch.NEWLINE = '\r\n';
ODataResponseBatch.MULTIPART_MIXED = 'multipart/mixed';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class HttpOptions {
    /**
     * @param {?=} headers
     * @param {?=} observe
     * @param {?=} params
     * @param {?=} reportProgress
     * @param {?=} responseType
     * @param {?=} withCredentials
     */
    constructor(headers, observe = 'response', params, reportProgress, responseType = 'text', withCredentials) {
        this.headers = headers;
        this.observe = observe;
        this.params = params;
        this.reportProgress = reportProgress;
        this.responseType = responseType;
        this.withCredentials = withCredentials;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ODataService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    get(odataQuery, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        const options = this.createHttpOptions(httpOptions);
        return this.http.get(url, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(odataQuery, body, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        const options = this.createHttpOptions(httpOptions);
        return this.http.post(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(odataQuery, body, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.patch(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    put(odataQuery, body, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.put(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(odataQuery, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.delete(url, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} httpOptions
     * @return {?}
     */
    createHttpOptions(httpOptions) {
        if (httpOptions instanceof HttpOptions) {
            return httpOptions;
        }
        return Object.assign(new HttpOptions(), httpOptions);
    }
    /**
     * @param {?} httpOptions
     * @param {?} etag
     * @return {?}
     */
    mergeETag(httpOptions, etag) {
        if (Utils.isNullOrUndefined(etag)) {
            return httpOptions;
        }
        if (Utils.isNullOrUndefined(httpOptions)) {
            httpOptions = new HttpOptions();
        }
        if (Utils.isNullOrUndefined(httpOptions.headers)) {
            httpOptions.headers = new HttpHeaders();
        }
        httpOptions.headers[ODataService.IF_MATCH_HEADER] = etag;
        return httpOptions;
    }
}
ODataService.IF_MATCH_HEADER = 'If-Match';
ODataService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ODataService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class Filter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class FilterHasProperty {
    /**
     * @param {?} property
     */
    constructor(property) {
        this.setProperty(property);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    setProperty(property) {
        Utils.requireNotNullNorUndefined(property, 'property');
        this.property = property;
    }
    /**
     * @return {?}
     */
    getProperty() {
        return this.property;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FilterComparison extends FilterHasProperty {
    /**
     * @param {?} property
     * @param {?} operator
     * @param {?} value
     */
    constructor(property, operator, value) {
        super(property);
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        Utils.requireNotUndefined(value, 'value');
        this.operator = operator;
        this.value = value;
    }
    /**
     * @return {?}
     */
    toString() {
        return `${this.property} ${OperatorComparison[this.operator].toLowerCase()} ${Utils.getValueURI(this.value, false)}`;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return (Utils.isNullOrUndefined(this.property) || !this.property.length)
            && Utils.isNullOrUndefined(this.operator)
            && Utils.isNullOrUndefined(this.value) || (this.value instanceof Filter && !this.value.isEmpty() || this.value instanceof Array && !this.value.length);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FilterFunction extends FilterHasProperty {
    /**
     * @param {?} functionName
     * @param {?} property
     * @param {?=} value
     */
    constructor(functionName, property, value) {
        super(property);
        Utils.requireNotNullNorUndefined(functionName, 'functionName');
        Utils.requireNotEmpty(functionName, 'functionName');
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        this.functionName = functionName;
        this.property = property;
        this.value = value;
    }
    /**
     * @return {?}
     */
    toString() {
        if (Utils.isNotNullNorUndefined(this.property) && Utils.isNotNullNorUndefined(this.value)) {
            return `${this.functionName}(${this.property},${Utils.getValueURI(this.value, false)})`;
        }
        else if (Utils.isNotNullNorUndefined(this.property)) {
            return `${this.functionName}(${this.property})`;
        }
        else if (Utils.isNotNullNorUndefined(this.value)) {
            return `${this.functionName}(${Utils.getValueURI(this.value, false)})`;
        }
        else {
            return `${this.functionName}()`;
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNullOrUndefined(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNotNullNorUndefined(this.value) && Utils.isEmpty(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.value)
            && Utils.isNotNullNorUndefined(this.property) && !this.property.length) {
            return true;
        }
        return false;
    }
}
class FilterFunctionString extends FilterFunction {
    /**
     * @param {?} functionName
     * @param {?=} property
     * @param {?=} value
     */
    constructor(functionName, property, value) {
        super(functionName, property, typeof (value) === 'string'
            ? new QuotedString(value)
            : value instanceof FilterFunctionString ? value.toString() : value);
    }
}
class FilterContains extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('contains', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
class FilterEndswith extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('endswith', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
class FilterStartswith extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('startswith', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
class FilterLength extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('length', property);
    }
}
class FilterIndexof extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('indexof', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
class FilterSubstring extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('substring', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
class FilterTolower extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('tolower', property);
    }
}
class FilterToupper extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('toupper', property);
    }
}
class FilterTrim extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('trim', property);
    }
}
class FilterConcat extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('concat', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class FilterHasFilter {
    /**
     * @param {?} filter
     */
    constructor(filter) {
        this.filter = filter;
    }
    /**
     * @return {?}
     */
    getFilter() {
        return this.filter;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const LambdaOperator = {
    ANY: 0, ALL: 1,
};
LambdaOperator[LambdaOperator.ANY] = 'ANY';
LambdaOperator[LambdaOperator.ALL] = 'ALL';
/** @enum {number} */
const LambdaCollection = {
    PROPERTY_COLLECTION: 0, ENTITY_SET: 1,
};
LambdaCollection[LambdaCollection.PROPERTY_COLLECTION] = 'PROPERTY_COLLECTION';
LambdaCollection[LambdaCollection.ENTITY_SET] = 'ENTITY_SET';
class FilterLambda extends FilterHasFilter {
    /**
     * @param {?} lambdaCollection
     * @param {?} propertyOrEntitySet
     * @param {?} lambdaOperator
     * @param {?} filter
     */
    constructor(lambdaCollection, propertyOrEntitySet, lambdaOperator, filter) {
        super(filter);
        Utils.requireNotNullNorUndefined(lambdaCollection, 'lambdaCollection');
        Utils.requireNotNullNorUndefined(propertyOrEntitySet, 'propertyOrEntitySet');
        Utils.requireNotNullNorUndefined(lambdaOperator, 'lambdaOperator');
        Utils.requireNotNullNorUndefined(filter, 'filter');
        if (lambdaCollection === LambdaCollection.PROPERTY_COLLECTION) {
            this.checkProperty(propertyOrEntitySet, filter);
        }
        this.lambdaCollection = lambdaCollection;
        this.propertyOrEntitySet = propertyOrEntitySet;
        this.lambdaOperator = lambdaOperator;
    }
    /**
     * @return {?}
     */
    toString() {
        switch (this.lambdaCollection) {
            case LambdaCollection.PROPERTY_COLLECTION:
                this.replaceProperty(this.filter);
                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:${this.filter.toString()})`;
            case LambdaCollection.ENTITY_SET:
                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:x/${this.filter.toString()})`;
            default:
                throw new Error('unknown lambdaCollection: ' + this.lambdaCollection);
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.lambdaCollection)
            && Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNullOrUndefined(this.lambdaOperator)
            && Utils.isNullOrUndefined(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.filter)
            && Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length) {
            return true;
        }
        if (Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} propertyOrEntitySet
     * @param {?} filter
     * @return {?}
     */
    checkProperty(propertyOrEntitySet, filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            if (propertyOrEntitySet !== filter.getProperty()) {
                throw new Error('lambda property to filter must match inner filters property');
            }
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            const filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                for (const f of filterChild) {
                    this.replaceProperty(f);
                }
            }
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    replaceProperty(filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            filter.setProperty('x');
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            const filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                for (const f of filterChild) {
                    this.replaceProperty(f);
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FilterLogical extends FilterHasFilter {
    /**
     * @param {?} filters
     * @param {?} operator
     */
    constructor(filters, operator) {
        super(filters);
        Utils.requireNotNullNorUndefined(filters, 'filters');
        Utils.requireNotEmpty(filters, 'filters');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        this.operator = operator;
    }
    /**
     * @return {?}
     */
    toString() {
        if (this.filter instanceof Array) {
            return Utils.toString(this.filter, this.operator);
        }
        return this.filter.toString();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.filter)) {
            return true;
        }
        for (const filter of /** @type {?} */ (this.filter)) {
            if (filter.isEmpty()) {
                return true;
            }
        }
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class Search {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SearchLogical extends Search {
    /**
     * @param {?} values
     * @param {?} operator
     */
    constructor(values, operator) {
        super();
        this.values = values;
        this.operator = operator;
        Utils.requireNotNullNorUndefined(values, 'values');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        Utils.requireNotEmpty(values, 'values');
        if (operator === OperatorLogical.NOT && values.length !== 1) {
            throw new Error('operator ' + OperatorLogical[operator] + ' requires a single value');
        }
    }
    /**
     * @return {?}
     */
    toString() {
        return Utils.toString(this.values, this.operator, true);
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.values)) {
            return true;
        }
        for (const value of this.values) {
            if (value.isEmpty()) {
                return true;
            }
        }
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SearchSimple extends Search {
    /**
     * @param {?} value
     */
    constructor(value) {
        super();
        this.value = value;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
    /**
     * @return {?}
     */
    toString() {
        return this.value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return Utils.isNullOrUndefined(this.value) || !this.value.length;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SearchPhrase extends SearchSimple {
    /**
     * @return {?}
     */
    toString() {
        return `"${this.value}"`;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ODataModule {
}
ODataModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                providers: [ODataService]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ODataQueryAbstract, Method, BatchRequest, ODataQueryBatch, ODataQuery, QuotedString, CsdlAnnotable, CsdlAnnotations, CsdlAnnotation, CsdlTerm, CsdlEntityContainer, CsdlEntitySet, CsdlEnumType, CsdlEnumMember, CsdlFunction, CsdlAction, CsdlFunctionImport, CsdlActionImport, CsdlParameter, CsdlReturnType, CsdlNavigationPropertyBinding, CsdlReference, CsdlInclude, CsdlIncludeAnnotations, CsdlSchema, CsdlSingleton, CsdlStructuralProperty, CsdlProperty, CsdlNavigationProperty, CsdlReferentialConstraint, CsdlOnDelete, CsdlStructuredType, CsdlComplexType, CsdlEntityType, CsdlKey, CsdlPropertyRef, CsdlTypeDefinition, EntitySet, FieldType, Field, Metadata, ODataResponseAbstract, ODataResponseBatch, ODataResponse, HttpOptions, ODataService, FilterComparison, FilterFunction, FilterFunctionString, FilterContains, FilterEndswith, FilterStartswith, FilterLength, FilterIndexof, FilterSubstring, FilterTolower, FilterToupper, FilterTrim, FilterConcat, FilterHasFilter, FilterHasProperty, LambdaOperator, LambdaCollection, FilterLambda, FilterLogical, FilterString, Filter, SearchLogical, SearchPhrase, SearchSimple, Search, Expand, OperatorComparison, OperatorLogical, OperatorArithmetic, Order, Orderby, QueryOptions, Utils, ODataModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,