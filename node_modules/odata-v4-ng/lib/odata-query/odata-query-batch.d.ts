import { Observable } from 'rxjs';
import { ODataResponse } from '../odata-response/odata-response';
import { HttpOptionsI } from '../odata-service/http-options';
import { ODataService } from '../odata-service/odata.service';
import { ODataQuery } from './odata-query';
import { ODataQueryAbstract } from './odata-query-abstract';
export declare enum Method {
    GET = 0,
    POST = 1,
    PUT = 2,
    PATCH = 3,
    DELETE = 4,
}
export declare class BatchRequest {
    method: Method;
    odataQuery: ODataQuery;
    body: any;
    httpOptions: HttpOptionsI;
    constructor(method: Method, odataQuery: ODataQuery, body?: any, httpOptions?: HttpOptionsI);
}
export declare class ODataQueryBatch extends ODataQueryAbstract {
    private static readonly BOUNDARY_PREFIX_SUFFIX;
    private static readonly BATCH_PREFIX;
    private static readonly CHANGESET_PREFIX;
    private static readonly NEWLINE;
    private static readonly $BATCH;
    private static readonly HTTP11;
    private static readonly ODATA_VERSION;
    private static readonly CONTENT_TYPE;
    private static readonly ACCEPT;
    private static readonly CONTENT_TRANSFER_ENCODING;
    private static readonly CONTENT_ID;
    private static readonly VERSION_4_0;
    private static readonly MULTIPART_MIXED;
    private static readonly MULTIPART_MIXED_BOUNDARY;
    private static readonly APPLICATION_HTTP;
    private static readonly BINARY;
    private static readonly APPLICATION_JSON;
    private requests;
    private batchBoundary;
    private changesetBoundary;
    private changesetID;
    constructor(odataService: ODataService, serviceRoot: string);
    get(odataQuery: ODataQuery, httpOptions?: HttpOptionsI): ODataQueryBatch;
    post(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch;
    put(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch;
    patch(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch;
    delete(odataQuery: ODataQuery, httpOptions?: HttpOptionsI): ODataQueryBatch;
    execute(httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    toString(): string;
    getBody(): string;
    protected getHeaders(method: Method, httpOptions: HttpOptionsI): string;
    getUUID(): string;
}
