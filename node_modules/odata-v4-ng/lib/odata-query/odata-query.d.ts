import { Observable } from 'rxjs';
import { ODataResponse } from '../odata-response/odata-response';
import { HttpOptionsI } from '../odata-service/http-options';
import { ODataService } from '../odata-service/odata.service';
import { Expand } from '../query-options/expand';
import { Filter } from '../query-options/filter/filter';
import { Orderby } from '../query-options/orderby';
import { Search } from '../query-options/search/search';
import { ODataQueryAbstract } from './odata-query-abstract';
import { ODataQueryBatch } from './odata-query-batch';
export declare class ODataQuery extends ODataQueryAbstract {
    static readonly SEPARATOR: string;
    private static readonly METADATA;
    private static readonly ENTITY_SET;
    private static readonly ENTITY_KEY;
    private static readonly SINGLETON;
    private static readonly TYPE_NAME;
    private static readonly PROPERTY;
    private static readonly NAVIGATION_PROPERTY;
    private static readonly REF;
    private static readonly VALUE;
    private static readonly COUNT;
    private static readonly FUNCTION_CALL;
    private static readonly ACTION_CALL;
    private static readonly $METADATA;
    private static readonly $REF;
    private static readonly $VALUE;
    private static readonly $COUNT;
    private queryOptions;
    private segments;
    private lastSegment;
    constructor(odataService: ODataService, serviceRoot: string);
    metadata(): ODataQuery;
    entitySet(entitySet: string): ODataQuery;
    entityKey(entityKey: any | any[]): ODataQuery;
    singleton(singleton: string): this;
    typeName(typeName: string): this;
    property(property: string): ODataQuery;
    navigationProperty(navigationProperty: string): ODataQuery;
    ref(): ODataQuery;
    value(): ODataQuery;
    countSegment(): ODataQuery;
    functionCall(functionCall: string): ODataQuery;
    actionCall(actionCall: string): ODataQuery;
    batch(): ODataQueryBatch;
    select(select: string | string[]): ODataQuery;
    filter(filter: string | Filter): ODataQuery;
    expand(expand: string | Expand | Expand[]): ODataQuery;
    orderby(orderby: string | Orderby[]): ODataQuery;
    search(search: string | Search): ODataQuery;
    skip(skip: number): ODataQuery;
    top(top: number): ODataQuery;
    countOption(count: boolean): ODataQuery;
    customOption(key: string, value: string): this;
    format(format: string): ODataQuery;
    get(httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    post(body: any, httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    patch(body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    put(body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    delete(etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse>;
    toString(): string;
    protected getSegment(segment: string): string;
    protected addSegment(segment: string): void;
}
