/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { OperatorLogical } from '../query-options/operator';
import { QuotedString } from '../odata-query/quoted-string';
export class Utils {
    /**
     * @param {?} value
     * @return {?}
     */
    static isNull(value) {
        return value === null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isUndefined(value) {
        return value === undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNullOrUndefined(value) {
        return Utils.isNull(value) || Utils.isUndefined(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNotNullNorUndefined(value) {
        return !Utils.isNull(value) && !Utils.isUndefined(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isEmpty(value) {
        if (Utils.isNullOrUndefined(value)
            || typeof (value) === 'string' && !value.length
            || value instanceof Array && !value.length
            || typeof (value.isEmpty) === 'function' && value.isEmpty()) {
            return true;
        }
        if (value instanceof Array && value) {
            for (const v of value) {
                if (!Utils.isEmpty(v)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNull(fieldValue, fieldName) {
        if (fieldValue !== null) {
            throw new Error(fieldName + ' must be null');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireUndefined(fieldValue, fieldName) {
        if (fieldValue !== undefined) {
            throw new Error(fieldName + ' must be undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNull(fieldValue, fieldName) {
        if (fieldValue === null) {
            throw new Error(fieldName + ' cannot be null');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotUndefined(fieldValue, fieldName) {
        if (fieldValue === undefined) {
            throw new Error(fieldName + ' cannot be undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNullNorUndefined(fieldValue, fieldName) {
        Utils.requireNotNull(fieldValue, fieldName);
        Utils.requireNotUndefined(fieldValue, fieldName);
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNullOrUndefined(fieldValue, fieldName) {
        if (!Utils.isNull(fieldValue) && !Utils.isUndefined(fieldValue)) {
            throw new Error(fieldName + ' must be null or undefined');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotEmpty(fieldValue, fieldName) {
        if (Utils.isEmpty(fieldValue)) {
            throw new Error(fieldName + ' cannot be empty');
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    static requireNotNegative(fieldValue, fieldName) {
        if (fieldValue < 0) {
            throw new Error(fieldName + ' cannot be negative');
        }
    }
    /**
     * @param {?} path
     * @param {?} segment
     * @return {?}
     */
    static appendSegment(path, segment) {
        Utils.requireNotNullNorUndefined(path, 'path');
        Utils.requireNotNullNorUndefined(segment, 'segment');
        if (!path.endsWith('/')) {
            path += '/';
        }
        return path + segment;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static removeEndingSeparator(value) {
        Utils.requireNotNullNorUndefined(value, 'value');
        if (value.endsWith('/')) {
            if (value.length === 1) {
                return '';
            }
            return value.substring(0, value.length - 1);
        }
        return value;
    }
    /**
     * @param {?} value
     * @param {?} encodeURI
     * @return {?}
     */
    static getValueURI(value, encodeURI) {
        Utils.requireNotUndefined(value, 'value');
        Utils.requireNotNullNorUndefined(encodeURI, 'encodeURI');
        /** @type {?} */
        let res = value;
        if (typeof (res) === 'string') {
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
        }
        else if (res instanceof QuotedString) {
            // escape single quote
            res = res.toString().replace(/'/g, '\'\'');
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
            // add start/ending quotes
            res = '\'' + res + '\'';
        }
        // boolean, number
        return res;
    }
    /**
     * @param {?} items
     * @param {?=} operator
     * @param {?=} operatorUppercase
     * @return {?}
     */
    static toString(items, operator, operatorUppercase = false) {
        /** @type {?} */
        let res = '';
        if (Utils.isNullOrUndefined(items) || !items.length) {
            return res;
        }
        for (const item of items) {
            if (res.length) {
                if (Utils.isNotNullNorUndefined(operator)) {
                    /** @type {?} */
                    const operatorString = Utils.getOperatorString(operator, operatorUppercase);
                    res += ` ${operatorString} `;
                }
                else {
                    res += ',';
                }
            }
            if (Utils.isNotNullNorUndefined(operator) && operator === OperatorLogical.NOT) {
                /** @type {?} */
                const operatorString = Utils.getOperatorString(operator, operatorUppercase);
                res += `${operatorString} `;
            }
            res += item;
        }
        if (Utils.isNotNullNorUndefined(operator)) {
            return `(${res})`;
        }
        return res;
    }
    /**
     * @param {?} operator
     * @param {?} operatorUppercase
     * @return {?}
     */
    static getOperatorString(operator, operatorUppercase) {
        /** @type {?} */
        let operatorString = OperatorLogical[operator].toLowerCase();
        if (Utils.isNotNullNorUndefined(operatorUppercase) && operatorUppercase) {
            operatorString = operatorString.toUpperCase();
        }
        return operatorString;
    }
}

//# sourceMappingURL=data:application/json;base64,