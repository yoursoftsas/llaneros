/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { map } from 'rxjs/operators';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ODataResponse } from '../odata-response/odata-response';
import { Utils } from '../utils/utils';
import { HttpOptions } from './http-options';
export class ODataService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    get(odataQuery, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        const options = this.createHttpOptions(httpOptions);
        return this.http.get(url, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(odataQuery, body, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        const options = this.createHttpOptions(httpOptions);
        return this.http.post(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(odataQuery, body, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.patch(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    put(odataQuery, body, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.put(url, body, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} odataQuery
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(odataQuery, etag, httpOptions) {
        /** @type {?} */
        const url = odataQuery.toString();
        /** @type {?} */
        let options = this.createHttpOptions(httpOptions);
        options = this.mergeETag(options, etag);
        return this.http.delete(url, options).pipe(map(response => new ODataResponse(response)));
    }
    /**
     * @param {?} httpOptions
     * @return {?}
     */
    createHttpOptions(httpOptions) {
        if (httpOptions instanceof HttpOptions) {
            return httpOptions;
        }
        return Object.assign(new HttpOptions(), httpOptions);
    }
    /**
     * @param {?} httpOptions
     * @param {?} etag
     * @return {?}
     */
    mergeETag(httpOptions, etag) {
        if (Utils.isNullOrUndefined(etag)) {
            return httpOptions;
        }
        if (Utils.isNullOrUndefined(httpOptions)) {
            httpOptions = new HttpOptions();
        }
        if (Utils.isNullOrUndefined(httpOptions.headers)) {
            httpOptions.headers = new HttpHeaders();
        }
        httpOptions.headers[ODataService.IF_MATCH_HEADER] = etag;
        return httpOptions;
    }
}
ODataService.IF_MATCH_HEADER = 'If-Match';
ODataService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ODataService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    ODataService.IF_MATCH_HEADER;
    /** @type {?} */
    ODataService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,