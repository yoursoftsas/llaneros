/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { QueryOptions } from '../query-options/query-options';
import { Utils } from '../utils/utils';
import { ODataQueryAbstract } from './odata-query-abstract';
import { ODataQueryBatch } from './odata-query-batch';
export class ODataQuery extends ODataQueryAbstract {
    /**
     * @param {?} odataService
     * @param {?} serviceRoot
     */
    constructor(odataService, serviceRoot) {
        super(odataService, serviceRoot);
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        this.queryOptions = new QueryOptions(ODataQuery.SEPARATOR);
        this.segments = [];
        this.lastSegment = null;
    }
    /**
     * @return {?}
     */
    metadata() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.METADATA), ODataQuery.METADATA);
        if (this.segments.length) {
            throw new Error('metadata segment cannot be appended to other segments');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$METADATA);
        this.addSegment(ODataQuery.METADATA);
        return this;
    }
    /**
     * @param {?} entitySet
     * @return {?}
     */
    entitySet(entitySet) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.ENTITY_SET), ODataQuery.ENTITY_SET);
        Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
        Utils.requireNotEmpty(entitySet, 'entitySet');
        this.queryString = Utils.appendSegment(this.queryString, entitySet);
        this.addSegment(ODataQuery.ENTITY_SET);
        return this;
    }
    /**
     * @param {?} entityKey
     * @return {?}
     */
    entityKey(entityKey) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('entityKey can only be appended to entitySet or navigationProperty');
        }
        Utils.requireNotNullNorUndefined(entityKey, 'entityKey');
        Utils.requireNotEmpty(entityKey, 'entityKey');
        entityKey = Utils.getValueURI(entityKey, true);
        this.queryString = Utils.removeEndingSeparator(this.queryString) + '(' + entityKey + ')';
        this.addSegment(ODataQuery.ENTITY_KEY);
        return this;
    }
    /**
     * @param {?} singleton
     * @return {?}
     */
    singleton(singleton) {
        if (this.segments.length) {
            throw new Error('singleton segment cannot be appended to other segments');
        }
        Utils.requireNotNullNorUndefined(singleton, 'singleton');
        Utils.requireNotEmpty(singleton, 'singleton');
        this.queryString = Utils.appendSegment(this.queryString, singleton);
        this.addSegment(ODataQuery.SINGLETON);
        return this;
    }
    /**
     * @param {?} typeName
     * @return {?}
     */
    typeName(typeName) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY && this.lastSegment !== ODataQuery.ENTITY_KEY) {
            throw new Error('typeName can only be appended to entitySet, navigationProperty or entityKey');
        }
        Utils.requireNotNullNorUndefined(typeName, 'typeName');
        Utils.requireNotEmpty(typeName, 'typeName');
        this.queryString = Utils.appendSegment(this.queryString, typeName);
        this.addSegment(ODataQuery.TYPE_NAME);
        return this;
    }
    /**
     * @param {?} property
     * @return {?}
     */
    property(property) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.PROPERTY), ODataQuery.PROPERTY);
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON) {
            throw new Error('property can only be appended to entityKey or singleton');
        }
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        this.queryString = Utils.appendSegment(this.queryString, property);
        this.addSegment(ODataQuery.PROPERTY);
        return this;
    }
    /**
     * @param {?} navigationProperty
     * @return {?}
     */
    navigationProperty(navigationProperty) {
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON && this.lastSegment !== ODataQuery.TYPE_NAME) {
            throw new Error('navigationProperty can only be appended to entityKey, singleton or typeName');
        }
        Utils.requireNotNullNorUndefined(navigationProperty, 'navigationProperty');
        Utils.requireNotEmpty(navigationProperty, 'navigationProperty');
        this.queryString = Utils.appendSegment(this.queryString, navigationProperty);
        this.addSegment(ODataQuery.NAVIGATION_PROPERTY);
        return this;
    }
    /**
     * @return {?}
     */
    ref() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.REF), ODataQuery.REF);
        if (this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('ref can only be appended to navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$REF);
        this.addSegment(ODataQuery.REF);
        return this;
    }
    /**
     * @return {?}
     */
    value() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.VALUE), ODataQuery.VALUE);
        if (this.lastSegment !== ODataQuery.PROPERTY) {
            throw new Error('value can only be appended to property');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$VALUE);
        this.addSegment(ODataQuery.VALUE);
        return this;
    }
    /**
     * @return {?}
     */
    countSegment() {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.COUNT), ODataQuery.COUNT);
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('count can only be appended to entitySet or navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$COUNT);
        this.addSegment(ODataQuery.COUNT);
        return this;
    }
    /**
     * @param {?} functionCall
     * @return {?}
     */
    functionCall(functionCall) {
        Utils.requireNotNullNorUndefined(functionCall, 'functionCall');
        Utils.requireNotEmpty(functionCall, 'functionCall');
        this.queryString = Utils.appendSegment(this.queryString, functionCall);
        this.addSegment(ODataQuery.FUNCTION_CALL);
        return this;
    }
    /**
     * @param {?} actionCall
     * @return {?}
     */
    actionCall(actionCall) {
        Utils.requireNotNullNorUndefined(actionCall, 'actionCall');
        Utils.requireNotEmpty(actionCall, 'actionCall');
        this.queryString = Utils.appendSegment(this.queryString, actionCall);
        this.addSegment(ODataQuery.ACTION_CALL);
        return this;
    }
    /**
     * @return {?}
     */
    batch() {
        return new ODataQueryBatch(this.odataService, this.serviceRoot);
    }
    /**
     * @param {?} select
     * @return {?}
     */
    select(select) {
        this.queryOptions.select(select);
        return this;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    filter(filter) {
        this.queryOptions.filter(filter);
        return this;
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    expand(expand) {
        this.queryOptions.expand(expand);
        return this;
    }
    /**
     * @param {?} orderby
     * @return {?}
     */
    orderby(orderby) {
        this.queryOptions.orderby(orderby);
        return this;
    }
    /**
     * @param {?} search
     * @return {?}
     */
    search(search) {
        this.queryOptions.search(search);
        return this;
    }
    /**
     * @param {?} skip
     * @return {?}
     */
    skip(skip) {
        this.queryOptions.skip(skip);
        return this;
    }
    /**
     * @param {?} top
     * @return {?}
     */
    top(top) {
        this.queryOptions.top(top);
        return this;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    countOption(count) {
        this.queryOptions.count(count);
        return this;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    customOption(key, value) {
        this.queryOptions.customOption(key, value);
        return this;
    }
    /**
     * @param {?} format
     * @return {?}
     */
    format(format) {
        this.queryOptions.format(format);
        return this;
    }
    /**
     * @param {?=} httpOptions
     * @return {?}
     */
    get(httpOptions) {
        return this.odataService.get(this, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(body, httpOptions) {
        return this.odataService.post(this, body, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(body, etag, httpOptions) {
        return this.odataService.patch(this, body, etag, httpOptions);
    }
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    put(body, etag, httpOptions) {
        return this.odataService.put(this, body, etag, httpOptions);
    }
    /**
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(etag, httpOptions) {
        return this.odataService.delete(this, etag, httpOptions);
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = this.queryString;
        if (Utils.isNotNullNorUndefined(this.queryOptions) && !this.queryOptions.isEmpty()) {
            res += '?' + this.queryOptions.toString();
        }
        return res;
    }
    /**
     * @param {?} segment
     * @return {?}
     */
    getSegment(segment) {
        Utils.requireNotNull(segment, 'segment');
        /** @type {?} */
        const res = this.segments.find((value, index, segments) => {
            return value === segment;
        });
        return res;
    }
    /**
     * @param {?} segment
     * @return {?}
     */
    addSegment(segment) {
        Utils.requireNotNull(segment, 'segment');
        this.segments.push(segment);
        if (Utils.isNotNullNorUndefined(this.segments) && this.segments.length) {
            this.lastSegment = this.segments[this.segments.length - 1];
        }
    }
}
// QUERY OPTIONS SEPARATOR
ODataQuery.SEPARATOR = '&';
ODataQuery.METADATA = 'metadata';
ODataQuery.ENTITY_SET = 'entitySet';
ODataQuery.ENTITY_KEY = 'entityKey';
ODataQuery.SINGLETON = 'singleton';
ODataQuery.TYPE_NAME = 'typeName';
ODataQuery.PROPERTY = 'property';
ODataQuery.NAVIGATION_PROPERTY = 'navigationProperty';
ODataQuery.REF = 'ref';
ODataQuery.VALUE = 'value';
ODataQuery.COUNT = 'count';
ODataQuery.FUNCTION_CALL = 'functionCall';
ODataQuery.ACTION_CALL = 'actionCall';
ODataQuery.$METADATA = '$metadata';
ODataQuery.$REF = '$ref';
ODataQuery.$VALUE = '$value';
ODataQuery.$COUNT = '$count';
if (false) {
    /** @type {?} */
    ODataQuery.SEPARATOR;
    /** @type {?} */
    ODataQuery.METADATA;
    /** @type {?} */
    ODataQuery.ENTITY_SET;
    /** @type {?} */
    ODataQuery.ENTITY_KEY;
    /** @type {?} */
    ODataQuery.SINGLETON;
    /** @type {?} */
    ODataQuery.TYPE_NAME;
    /** @type {?} */
    ODataQuery.PROPERTY;
    /** @type {?} */
    ODataQuery.NAVIGATION_PROPERTY;
    /** @type {?} */
    ODataQuery.REF;
    /** @type {?} */
    ODataQuery.VALUE;
    /** @type {?} */
    ODataQuery.COUNT;
    /** @type {?} */
    ODataQuery.FUNCTION_CALL;
    /** @type {?} */
    ODataQuery.ACTION_CALL;
    /** @type {?} */
    ODataQuery.$METADATA;
    /** @type {?} */
    ODataQuery.$REF;
    /** @type {?} */
    ODataQuery.$VALUE;
    /** @type {?} */
    ODataQuery.$COUNT;
    /** @type {?} */
    ODataQuery.prototype.queryOptions;
    /** @type {?} */
    ODataQuery.prototype.segments;
    /** @type {?} */
    ODataQuery.prototype.lastSegment;
}

//# sourceMappingURL=data:application/json;base64,