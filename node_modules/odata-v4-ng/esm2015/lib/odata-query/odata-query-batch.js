/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { HttpHeaders } from '@angular/common/http';
import { UUID } from 'angular2-uuid';
import { Utils } from '../utils/utils';
import { ODataQueryAbstract } from './odata-query-abstract';
/** @enum {number} */
const Method = {
    GET: 0, POST: 1, PUT: 2, PATCH: 3, DELETE: 4,
};
export { Method };
Method[Method.GET] = 'GET';
Method[Method.POST] = 'POST';
Method[Method.PUT] = 'PUT';
Method[Method.PATCH] = 'PATCH';
Method[Method.DELETE] = 'DELETE';
export class BatchRequest {
    /**
     * @param {?} method
     * @param {?} odataQuery
     * @param {?=} body
     * @param {?=} httpOptions
     */
    constructor(method, odataQuery, body, httpOptions) {
        this.method = method;
        this.odataQuery = odataQuery;
        this.body = body;
        this.httpOptions = httpOptions;
    }
}
if (false) {
    /** @type {?} */
    BatchRequest.prototype.method;
    /** @type {?} */
    BatchRequest.prototype.odataQuery;
    /** @type {?} */
    BatchRequest.prototype.body;
    /** @type {?} */
    BatchRequest.prototype.httpOptions;
}
export class ODataQueryBatch extends ODataQueryAbstract {
    /**
     * @param {?} odataService
     * @param {?} serviceRoot
     */
    constructor(odataService, serviceRoot) {
        super(odataService, serviceRoot);
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        this.queryString = Utils.appendSegment(serviceRoot, ODataQueryBatch.$BATCH);
        this.requests = [];
        this.batchBoundary = ODataQueryBatch.BATCH_PREFIX + this.getUUID();
        this.changesetBoundary = null;
        this.changesetID = 1;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    get(odataQuery, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.GET, odataQuery, undefined, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    post(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.POST, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    put(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.PUT, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    patch(odataQuery, body, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.PATCH, odataQuery, body, httpOptions));
        return this;
    }
    /**
     * @param {?} odataQuery
     * @param {?=} httpOptions
     * @return {?}
     */
    delete(odataQuery, httpOptions) {
        Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
        this.requests.push(new BatchRequest(Method.DELETE, odataQuery, undefined, httpOptions));
        return this;
    }
    /**
     * @param {?=} httpOptions
     * @return {?}
     */
    execute(httpOptions) {
        // set headers
        if (Utils.isNullOrUndefined(httpOptions)) {
            httpOptions = {};
        }
        if (Utils.isNullOrUndefined(httpOptions.headers)) {
            httpOptions.headers = new HttpHeaders();
        }
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ODATA_VERSION, ODataQueryBatch.VERSION_4_0);
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.CONTENT_TYPE, ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.batchBoundary);
        httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ACCEPT, ODataQueryBatch.MULTIPART_MIXED);
        // send request
        return this.odataService.post(this, this.getBody(), httpOptions);
    }
    /**
     * @return {?}
     */
    toString() {
        return this.queryString;
    }
    /**
     * @return {?}
     */
    getBody() {
        /** @type {?} */
        let res = '';
        for (const request of this.requests) {
            /** @type {?} */
            const method = request.method;
            /** @type {?} */
            const odataQuery = request.odataQuery;
            /** @type {?} */
            const httpOptions = request.httpOptions;
            /** @type {?} */
            const body = request.body;
            // if method is GET and there is a changeset boundary open then close it
            if (method === Method.GET && Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                this.changesetBoundary = null;
            }
            // if there is no changeset boundary open then open a batch boundary
            if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.NEWLINE;
            }
            // if method is not GET and there is no changeset boundary open then open a changeset boundary
            if (method !== Method.GET) {
                if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                    this.changesetBoundary = ODataQueryBatch.CHANGESET_PREFIX + this.getUUID();
                    res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.changesetBoundary + ODataQueryBatch.NEWLINE;
                    res += ODataQueryBatch.NEWLINE;
                }
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.NEWLINE;
            }
            res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_HTTP + ODataQueryBatch.NEWLINE;
            res += ODataQueryBatch.CONTENT_TRANSFER_ENCODING + ': ' + ODataQueryBatch.BINARY + ODataQueryBatch.NEWLINE;
            if (method !== Method.GET) {
                res += ODataQueryBatch.CONTENT_ID + ': ' + this.changesetID++ + ODataQueryBatch.NEWLINE;
            }
            res += ODataQueryBatch.NEWLINE;
            res += Method[method] + ' ' + odataQuery + ' ' + ODataQueryBatch.HTTP11 + ODataQueryBatch.NEWLINE;
            res += this.getHeaders(method, httpOptions);
            res += ODataQueryBatch.NEWLINE;
            if (method === Method.GET || method === Method.DELETE) {
                res += ODataQueryBatch.NEWLINE;
            }
            else {
                res += JSON.stringify(body) + ODataQueryBatch.NEWLINE;
            }
        }
        if (res.length) {
            if (Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                this.changesetBoundary = null;
            }
            res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX;
        }
        return res;
    }
    /**
     * @param {?} method
     * @param {?} httpOptions
     * @return {?}
     */
    getHeaders(method, httpOptions) {
        /** @type {?} */
        let res = '';
        if (method === Method.POST || method === Method.PATCH || method === Method.PUT) {
            res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_JSON + ODataQueryBatch.NEWLINE;
        }
        if (Utils.isNullOrUndefined(httpOptions) || Utils.isNullOrUndefined(httpOptions.headers)) {
            return res;
        }
        for (const key of httpOptions.headers.keys()) {
            res += key + ': ' + httpOptions.headers.getAll(key) + ODataQueryBatch.NEWLINE;
        }
        return res;
    }
    /**
     * @return {?}
     */
    getUUID() {
        return UUID.UUID();
    }
}
ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX = '--';
ODataQueryBatch.BATCH_PREFIX = 'batch_';
ODataQueryBatch.CHANGESET_PREFIX = 'changeset_';
ODataQueryBatch.NEWLINE = '\r\n';
ODataQueryBatch.$BATCH = '$batch';
ODataQueryBatch.HTTP11 = 'HTTP/1.1';
ODataQueryBatch.ODATA_VERSION = 'OData-Version';
ODataQueryBatch.CONTENT_TYPE = 'Content-Type';
ODataQueryBatch.ACCEPT = 'Accept';
ODataQueryBatch.CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';
ODataQueryBatch.CONTENT_ID = 'Content-ID';
ODataQueryBatch.VERSION_4_0 = '4.0';
ODataQueryBatch.MULTIPART_MIXED = 'multipart/mixed';
ODataQueryBatch.MULTIPART_MIXED_BOUNDARY = 'multipart/mixed;boundary=';
ODataQueryBatch.APPLICATION_HTTP = 'application/http';
ODataQueryBatch.BINARY = 'binary';
ODataQueryBatch.APPLICATION_JSON = 'application/json';
if (false) {
    /** @type {?} */
    ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX;
    /** @type {?} */
    ODataQueryBatch.BATCH_PREFIX;
    /** @type {?} */
    ODataQueryBatch.CHANGESET_PREFIX;
    /** @type {?} */
    ODataQueryBatch.NEWLINE;
    /** @type {?} */
    ODataQueryBatch.$BATCH;
    /** @type {?} */
    ODataQueryBatch.HTTP11;
    /** @type {?} */
    ODataQueryBatch.ODATA_VERSION;
    /** @type {?} */
    ODataQueryBatch.CONTENT_TYPE;
    /** @type {?} */
    ODataQueryBatch.ACCEPT;
    /** @type {?} */
    ODataQueryBatch.CONTENT_TRANSFER_ENCODING;
    /** @type {?} */
    ODataQueryBatch.CONTENT_ID;
    /** @type {?} */
    ODataQueryBatch.VERSION_4_0;
    /** @type {?} */
    ODataQueryBatch.MULTIPART_MIXED;
    /** @type {?} */
    ODataQueryBatch.MULTIPART_MIXED_BOUNDARY;
    /** @type {?} */
    ODataQueryBatch.APPLICATION_HTTP;
    /** @type {?} */
    ODataQueryBatch.BINARY;
    /** @type {?} */
    ODataQueryBatch.APPLICATION_JSON;
    /** @type {?} */
    ODataQueryBatch.prototype.requests;
    /** @type {?} */
    ODataQueryBatch.prototype.batchBoundary;
    /** @type {?} */
    ODataQueryBatch.prototype.changesetBoundary;
    /** @type {?} */
    ODataQueryBatch.prototype.changesetID;
}

//# sourceMappingURL=data:application/json;base64,