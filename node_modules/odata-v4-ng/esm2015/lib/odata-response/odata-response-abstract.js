/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Utils } from '../utils/utils';
/**
 * @abstract
 */
export class ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        this.httpResponse = httpResponse;
    }
    /**
     * @return {?}
     */
    getHttpResponse() {
        return this.httpResponse;
    }
    /**
     * @return {?}
     */
    isOk() {
        return this.httpResponse.ok;
    }
    /**
     * @return {?}
     */
    getBodyAsJson() {
        return null;
    }
    /**
     * @return {?}
     */
    getBodyAsText() {
        return this.httpResponse.body;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let res = `${this.httpResponse.status} ${this.httpResponse.statusText}\n`;
        /** @type {?} */
        const headers = this.httpResponse.headers;
        for (const key of headers.keys()) {
            res += key + ': ';
            /** @type {?} */
            let valueString = '';
            for (const value of headers.getAll(key)) {
                if (valueString.length) {
                    valueString += ' ';
                }
                valueString += value;
            }
            res += valueString + '\n';
        }
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json)) {
            res += JSON.stringify(json, null, 4);
        }
        else {
            res += this.getBodyAsText();
        }
        return res;
    }
}
if (false) {
    /** @type {?} */
    ODataResponseAbstract.prototype.httpResponse;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2RhdGEtcmVzcG9uc2UtYWJzdHJhY3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vZGF0YS12NC1uZy8iLCJzb3VyY2VzIjpbImxpYi9vZGF0YS1yZXNwb25zZS9vZGF0YS1yZXNwb25zZS1hYnN0cmFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRXZDLE1BQU07Ozs7SUFHRixZQUFZLFlBQWtDO1FBQzFDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0tBQ3BDOzs7O0lBRUQsZUFBZTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQzVCOzs7O0lBRUQsSUFBSTtRQUNBLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztLQUMvQjs7OztJQUVELGFBQWE7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2Y7Ozs7SUFFRCxhQUFhO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0tBQ2pDOzs7O0lBRUQsUUFBUTs7UUFDSixJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxJQUFJLENBQUM7O1FBRTFFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7O1lBQ2xCLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUNyQixHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLFdBQVcsSUFBSSxHQUFHLENBQUM7aUJBQ3RCO2dCQUNELFdBQVcsSUFBSSxLQUFLLENBQUM7YUFDeEI7WUFDRCxHQUFHLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztTQUM3Qjs7UUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQy9CO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUNkO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgT0RhdGFSZXNwb25zZUFic3RyYWN0IHtcbiAgICBwcml2YXRlIGh0dHBSZXNwb25zZTogSHR0cFJlc3BvbnNlPHN0cmluZz47XG5cbiAgICBjb25zdHJ1Y3RvcihodHRwUmVzcG9uc2U6IEh0dHBSZXNwb25zZTxzdHJpbmc+KSB7XG4gICAgICAgIHRoaXMuaHR0cFJlc3BvbnNlID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cblxuICAgIGdldEh0dHBSZXNwb25zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFJlc3BvbnNlO1xuICAgIH1cblxuICAgIGlzT2soKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBSZXNwb25zZS5vaztcbiAgICB9XG5cbiAgICBnZXRCb2R5QXNKc29uKCk6IGFueSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldEJvZHlBc1RleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFJlc3BvbnNlLmJvZHk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJlcyA9IGAke3RoaXMuaHR0cFJlc3BvbnNlLnN0YXR1c30gJHt0aGlzLmh0dHBSZXNwb25zZS5zdGF0dXNUZXh0fVxcbmA7XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuaHR0cFJlc3BvbnNlLmhlYWRlcnM7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGhlYWRlcnMua2V5cygpKSB7XG4gICAgICAgICAgICByZXMgKz0ga2V5ICsgJzogJztcbiAgICAgICAgICAgIGxldCB2YWx1ZVN0cmluZyA9ICcnO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBoZWFkZXJzLmdldEFsbChrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZVN0cmluZyArPSAnICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlU3RyaW5nICs9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzICs9IHZhbHVlU3RyaW5nICsgJ1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBqc29uID0gdGhpcy5nZXRCb2R5QXNKc29uKCk7XG4gICAgICAgIGlmIChVdGlscy5pc05vdE51bGxOb3JVbmRlZmluZWQoanNvbikpIHtcbiAgICAgICAgICAgIHJlcyArPSBKU09OLnN0cmluZ2lmeShqc29uLCBudWxsLCA0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyArPSB0aGlzLmdldEJvZHlBc1RleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbiJdfQ==