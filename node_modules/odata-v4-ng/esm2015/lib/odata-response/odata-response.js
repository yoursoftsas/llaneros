/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Utils } from '../utils/utils';
import { EntitySet } from './entity-collection';
import { Metadata } from './metadata';
import { ODataResponseAbstract } from './odata-response-abstract';
import { ODataResponseBatch } from './odata-response-batch';
export class ODataResponse extends ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        super(httpResponse);
    }
    /**
     * @return {?}
     */
    getBodyAsJson() {
        /** @type {?} */
        const contentType = this.getHttpResponse().headers.get('Content-Type');
        if (Utils.isNotNullNorUndefined(contentType) && contentType.includes('json')) {
            try {
                return JSON.parse(this.getBodyAsText());
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    toMetadata() {
        /** @type {?} */
        const xml = this.getBodyAsText();
        return new Metadata(xml);
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toEntitySet(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            let count = null;
            if (json.hasOwnProperty(ODataResponse.ODATA_COUNT)) {
                count = json[ODataResponse.ODATA_COUNT];
            }
            return new EntitySet(json[ODataResponse.VALUE], count, type);
        }
        return null;
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toComplexCollection(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            const res = [];
            for (const object of json[ODataResponse.VALUE]) {
                res.push(this.toObject(object, type));
            }
            return res;
        }
        return null;
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toEntity(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        return this.toObject(json, type);
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    toComplexValue(type) {
        /** @type {?} */
        const json = this.getBodyAsJson();
        return this.toObject(json, type);
    }
    /**
     * @template T
     * @return {?}
     */
    toPropertyValue() {
        /** @type {?} */
        const json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json)) {
            if (json.hasOwnProperty(ODataResponse.VALUE)) {
                return /** @type {?} */ (json[ODataResponse.VALUE]);
            }
            return null;
        }
        else {
            return /** @type {?} */ (JSON.parse(this.getBodyAsText()));
        }
    }
    /**
     * @return {?}
     */
    toCount() {
        return Number(this.getBodyAsText());
    }
    /**
     * @return {?}
     */
    toODataResponseBatch() {
        return new ODataResponseBatch(this.getHttpResponse());
    }
    /**
     * @template T
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    toObject(object, type) {
        if (Utils.isNotNullNorUndefined(object)) {
            if (Utils.isNullOrUndefined(type)) {
                return Object.assign({}, object);
            }
            else {
                return Object.assign(new type(), object);
            }
        }
        return null;
    }
}
ODataResponse.VALUE = 'value';
ODataResponse.ODATA_COUNT = '@odata.count';
if (false) {
    /** @type {?} */
    ODataResponse.VALUE;
    /** @type {?} */
    ODataResponse.ODATA_COUNT;
}

//# sourceMappingURL=data:application/json;base64,