/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { HttpHeaders, HttpResponse } from '@angular/common/http';
import { Utils } from '../utils/utils';
import { ODataResponse } from './odata-response';
import { ODataResponseAbstract } from './odata-response-abstract';
export class ODataResponseBatch extends ODataResponseAbstract {
    /**
     * @param {?} httpResponse
     */
    constructor(httpResponse) {
        super(httpResponse);
        this.odataResponses = [];
        this.parseResponses();
    }
    /**
     * @return {?}
     */
    getODataResponses() {
        return this.odataResponses;
    }
    /**
     * @return {?}
     */
    parseResponses() {
        /** @type {?} */
        const contentType = this.getHttpResponse().headers.get(ODataResponseBatch.CONTENT_TYPE);
        /** @type {?} */
        const boundaryDelimiterBatch = this.getBoundaryDelimiter(contentType);
        /** @type {?} */
        const boundaryEndBatch = this.getBoundaryEnd(boundaryDelimiterBatch);
        /** @type {?} */
        const batchBody = this.getBodyAsText();
        /** @type {?} */
        const batchBodyLines = batchBody.split(ODataResponseBatch.NEWLINE);
        /** @type {?} */
        let odataResponseCS;
        /** @type {?} */
        let contentId;
        /** @type {?} */
        let boundaryDelimiterCS;
        /** @type {?} */
        let boundaryEndCS;
        /** @type {?} */
        let batchPartStartIndex;
        for (let index = 0; index < batchBodyLines.length; index++) {
            /** @type {?} */
            const batchBodyLine = batchBodyLines[index];
            if (batchBodyLine.startsWith(ODataResponseBatch.CONTENT_TYPE)) {
                /** @type {?} */
                const contentTypeValue = this.getHeaderValue(batchBodyLine);
                if (contentTypeValue === ODataResponseBatch.MULTIPART_MIXED) {
                    odataResponseCS = [];
                    contentId = undefined;
                    boundaryDelimiterCS = this.getBoundaryDelimiter(batchBodyLine);
                    boundaryEndCS = this.getBoundaryEnd(boundaryDelimiterCS);
                    batchPartStartIndex = undefined;
                }
                continue;
            }
            else if (Utils.isNotNullNorUndefined(odataResponseCS) && batchBodyLine.startsWith(ODataResponseBatch.CONTENT_ID)) {
                contentId = Number(this.getHeaderValue(batchBodyLine));
            }
            else if (batchBodyLine.startsWith(ODataResponseBatch.HTTP11)) {
                batchPartStartIndex = index;
            }
            else if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS
                || batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                if (!batchPartStartIndex) {
                    continue;
                }
                /** @type {?} */
                const odataResponse = this.createODataResponse(batchBodyLines, batchPartStartIndex, index - 1);
                if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                    odataResponseCS[contentId] = odataResponse;
                }
                else {
                    this.odataResponses.push(odataResponse);
                }
                if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS) {
                    batchPartStartIndex = index + 1;
                }
                else if (batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                    if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                        for (const response of odataResponseCS) {
                            if (Utils.isNotNullNorUndefined(response)) {
                                this.odataResponses.push(response);
                            }
                        }
                    }
                    odataResponseCS = undefined;
                    boundaryDelimiterCS = undefined;
                    boundaryEndCS = undefined;
                    batchPartStartIndex = undefined;
                }
            }
        }
    }
    /**
     * @param {?} header
     * @return {?}
     */
    getHeaderValue(header) {
        /** @type {?} */
        let res = header.split(';')[0].trim();
        res = res.split(':')[1].trim();
        return res;
    }
    /**
     * @param {?} contentType
     * @return {?}
     */
    getBoundaryDelimiter(contentType) {
        /** @type {?} */
        const contentTypeParts = contentType.split(';');
        if (contentTypeParts.length === 2) {
            /** @type {?} */
            const boundary = contentType.split(';')[1].trim();
            /** @type {?} */
            const boundaryDelimiter = ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX + boundary.split('=')[1];
            return boundaryDelimiter;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} boundaryDelimiter
     * @return {?}
     */
    getBoundaryEnd(boundaryDelimiter) {
        if (!boundaryDelimiter.length) {
            return '';
        }
        /** @type {?} */
        const boundaryEnd = boundaryDelimiter + ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
        return boundaryEnd;
    }
    /**
     * @param {?} batchBodyLines
     * @param {?} batchPartStartIndex
     * @param {?} batchPartEndIndex
     * @return {?}
     */
    createODataResponse(batchBodyLines, batchPartStartIndex, batchPartEndIndex) {
        /** @type {?} */
        let index = batchPartStartIndex;
        /** @type {?} */
        const statusLine = batchBodyLines[index];
        /** @type {?} */
        const statusLineParts = batchBodyLines[index].split(' ');
        /** @type {?} */
        const status = statusLineParts[1];
        /** @type {?} */
        const statusTextIndex = statusLine.indexOf(status) + status.length + 1;
        /** @type {?} */
        const statusText = statusLine.substring(statusTextIndex);
        /** @type {?} */
        let httpHeaders = new HttpHeaders();
        for (++index; index <= batchPartEndIndex; index++) {
            /** @type {?} */
            const batchBodyLine = batchBodyLines[index];
            if (batchBodyLine === '') {
                break;
            }
            /** @type {?} */
            const batchBodyLineParts = batchBodyLine.split(': ');
            httpHeaders = httpHeaders.append(batchBodyLineParts[0].trim(), batchBodyLineParts[1].trim());
        }
        /** @type {?} */
        let body = '';
        for (; index <= batchPartEndIndex; index++) {
            body += batchBodyLines[index];
        }
        return new ODataResponse(new HttpResponse({
            body: body,
            headers: httpHeaders,
            status: Number(status),
            statusText: statusText
        }));
    }
}
ODataResponseBatch.CONTENT_TYPE = 'Content-Type';
ODataResponseBatch.CONTENT_ID = 'Content-ID';
ODataResponseBatch.HTTP11 = 'HTTP/1.1';
ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX = '--';
ODataResponseBatch.NEWLINE = '\r\n';
ODataResponseBatch.MULTIPART_MIXED = 'multipart/mixed';
if (false) {
    /** @type {?} */
    ODataResponseBatch.CONTENT_TYPE;
    /** @type {?} */
    ODataResponseBatch.CONTENT_ID;
    /** @type {?} */
    ODataResponseBatch.HTTP11;
    /** @type {?} */
    ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
    /** @type {?} */
    ODataResponseBatch.NEWLINE;
    /** @type {?} */
    ODataResponseBatch.MULTIPART_MIXED;
    /** @type {?} */
    ODataResponseBatch.prototype.odataResponses;
}

//# sourceMappingURL=data:application/json;base64,