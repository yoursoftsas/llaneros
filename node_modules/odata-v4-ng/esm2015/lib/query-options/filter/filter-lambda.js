/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Utils } from '../../utils/utils';
import { Filter } from './filter';
import { FilterHasFilter } from './filter-has-filter';
import { FilterHasProperty } from './filter-has-property';
/** @enum {number} */
const LambdaOperator = {
    ANY: 0, ALL: 1,
};
export { LambdaOperator };
LambdaOperator[LambdaOperator.ANY] = 'ANY';
LambdaOperator[LambdaOperator.ALL] = 'ALL';
/** @enum {number} */
const LambdaCollection = {
    PROPERTY_COLLECTION: 0, ENTITY_SET: 1,
};
export { LambdaCollection };
LambdaCollection[LambdaCollection.PROPERTY_COLLECTION] = 'PROPERTY_COLLECTION';
LambdaCollection[LambdaCollection.ENTITY_SET] = 'ENTITY_SET';
export class FilterLambda extends FilterHasFilter {
    /**
     * @param {?} lambdaCollection
     * @param {?} propertyOrEntitySet
     * @param {?} lambdaOperator
     * @param {?} filter
     */
    constructor(lambdaCollection, propertyOrEntitySet, lambdaOperator, filter) {
        super(filter);
        Utils.requireNotNullNorUndefined(lambdaCollection, 'lambdaCollection');
        Utils.requireNotNullNorUndefined(propertyOrEntitySet, 'propertyOrEntitySet');
        Utils.requireNotNullNorUndefined(lambdaOperator, 'lambdaOperator');
        Utils.requireNotNullNorUndefined(filter, 'filter');
        if (lambdaCollection === LambdaCollection.PROPERTY_COLLECTION) {
            this.checkProperty(propertyOrEntitySet, filter);
        }
        this.lambdaCollection = lambdaCollection;
        this.propertyOrEntitySet = propertyOrEntitySet;
        this.lambdaOperator = lambdaOperator;
    }
    /**
     * @return {?}
     */
    toString() {
        switch (this.lambdaCollection) {
            case LambdaCollection.PROPERTY_COLLECTION:
                this.replaceProperty(this.filter);
                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:${this.filter.toString()})`;
            case LambdaCollection.ENTITY_SET:
                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:x/${this.filter.toString()})`;
            default:
                throw new Error('unknown lambdaCollection: ' + this.lambdaCollection);
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.lambdaCollection)
            && Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNullOrUndefined(this.lambdaOperator)
            && Utils.isNullOrUndefined(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.filter)
            && Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length) {
            return true;
        }
        if (Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} propertyOrEntitySet
     * @param {?} filter
     * @return {?}
     */
    checkProperty(propertyOrEntitySet, filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            if (propertyOrEntitySet !== filter.getProperty()) {
                throw new Error('lambda property to filter must match inner filters property');
            }
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            const filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                for (const f of filterChild) {
                    this.replaceProperty(f);
                }
            }
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    replaceProperty(filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            filter.setProperty('x');
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            const filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                for (const f of filterChild) {
                    this.replaceProperty(f);
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FilterLambda.prototype.lambdaCollection;
    /** @type {?} */
    FilterLambda.prototype.propertyOrEntitySet;
    /** @type {?} */
    FilterLambda.prototype.lambdaOperator;
}

//# sourceMappingURL=data:application/json;base64,