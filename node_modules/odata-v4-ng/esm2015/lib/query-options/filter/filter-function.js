/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Utils } from '../../utils/utils';
import { FilterHasProperty } from './filter-has-property';
import { QuotedString } from '../../odata-query/quoted-string';
export class FilterFunction extends FilterHasProperty {
    /**
     * @param {?} functionName
     * @param {?} property
     * @param {?=} value
     */
    constructor(functionName, property, value) {
        super(property);
        Utils.requireNotNullNorUndefined(functionName, 'functionName');
        Utils.requireNotEmpty(functionName, 'functionName');
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        this.functionName = functionName;
        this.property = property;
        this.value = value;
    }
    /**
     * @return {?}
     */
    toString() {
        if (Utils.isNotNullNorUndefined(this.property) && Utils.isNotNullNorUndefined(this.value)) {
            return `${this.functionName}(${this.property},${Utils.getValueURI(this.value, false)})`;
        }
        else if (Utils.isNotNullNorUndefined(this.property)) {
            return `${this.functionName}(${this.property})`;
        }
        else if (Utils.isNotNullNorUndefined(this.value)) {
            return `${this.functionName}(${Utils.getValueURI(this.value, false)})`;
        }
        else {
            return `${this.functionName}()`;
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNullOrUndefined(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNotNullNorUndefined(this.value) && Utils.isEmpty(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.value)
            && Utils.isNotNullNorUndefined(this.property) && !this.property.length) {
            return true;
        }
        return false;
    }
}
if (false) {
    /** @type {?} */
    FilterFunction.prototype.functionName;
    /** @type {?} */
    FilterFunction.prototype.value;
}
export class FilterFunctionString extends FilterFunction {
    /**
     * @param {?} functionName
     * @param {?=} property
     * @param {?=} value
     */
    constructor(functionName, property, value) {
        super(functionName, property, typeof (value) === 'string'
            ? new QuotedString(value)
            : value instanceof FilterFunctionString ? value.toString() : value);
    }
}
export class FilterContains extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('contains', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
export class FilterEndswith extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('endswith', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
export class FilterStartswith extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('startswith', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
export class FilterLength extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('length', property);
    }
}
export class FilterIndexof extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('indexof', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
export class FilterSubstring extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('substring', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}
export class FilterTolower extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('tolower', property);
    }
}
export class FilterToupper extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('toupper', property);
    }
}
export class FilterTrim extends FilterFunctionString {
    /**
     * @param {?} property
     */
    constructor(property) {
        super('trim', property);
    }
}
export class FilterConcat extends FilterFunctionString {
    /**
     * @param {?} property
     * @param {?} value
     */
    constructor(property, value) {
        super('concat', property, value);
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
    }
}

//# sourceMappingURL=data:application/json;base64,