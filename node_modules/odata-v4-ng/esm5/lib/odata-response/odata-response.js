/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../utils/utils';
import { EntitySet } from './entity-collection';
import { Metadata } from './metadata';
import { ODataResponseAbstract } from './odata-response-abstract';
import { ODataResponseBatch } from './odata-response-batch';
var ODataResponse = /** @class */ (function (_super) {
    tslib_1.__extends(ODataResponse, _super);
    function ODataResponse(httpResponse) {
        return _super.call(this, httpResponse) || this;
    }
    /**
     * @return {?}
     */
    ODataResponse.prototype.getBodyAsJson = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var contentType = this.getHttpResponse().headers.get('Content-Type');
        if (Utils.isNotNullNorUndefined(contentType) && contentType.includes('json')) {
            try {
                return JSON.parse(this.getBodyAsText());
            }
            catch (error) {
                return null;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    ODataResponse.prototype.toMetadata = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var xml = this.getBodyAsText();
        return new Metadata(xml);
    };
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    ODataResponse.prototype.toEntitySet = /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            var count = null;
            if (json.hasOwnProperty(ODataResponse.ODATA_COUNT)) {
                count = json[ODataResponse.ODATA_COUNT];
            }
            return new EntitySet(json[ODataResponse.VALUE], count, type);
        }
        return null;
    };
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    ODataResponse.prototype.toComplexCollection = /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
            /** @type {?} */
            var res = [];
            try {
                for (var _a = tslib_1.__values(json[ODataResponse.VALUE]), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var object = _b.value;
                    res.push(this.toObject(object, type));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return res;
        }
        return null;
        var e_1, _c;
    };
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    ODataResponse.prototype.toEntity = /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var json = this.getBodyAsJson();
        return this.toObject(json, type);
    };
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    ODataResponse.prototype.toComplexValue = /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var json = this.getBodyAsJson();
        return this.toObject(json, type);
    };
    /**
     * @template T
     * @return {?}
     */
    ODataResponse.prototype.toPropertyValue = /**
     * @template T
     * @return {?}
     */
    function () {
        /** @type {?} */
        var json = this.getBodyAsJson();
        if (Utils.isNotNullNorUndefined(json)) {
            if (json.hasOwnProperty(ODataResponse.VALUE)) {
                return /** @type {?} */ (json[ODataResponse.VALUE]);
            }
            return null;
        }
        else {
            return /** @type {?} */ (JSON.parse(this.getBodyAsText()));
        }
    };
    /**
     * @return {?}
     */
    ODataResponse.prototype.toCount = /**
     * @return {?}
     */
    function () {
        return Number(this.getBodyAsText());
    };
    /**
     * @return {?}
     */
    ODataResponse.prototype.toODataResponseBatch = /**
     * @return {?}
     */
    function () {
        return new ODataResponseBatch(this.getHttpResponse());
    };
    /**
     * @template T
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ODataResponse.prototype.toObject = /**
     * @template T
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        if (Utils.isNotNullNorUndefined(object)) {
            if (Utils.isNullOrUndefined(type)) {
                return Object.assign({}, object);
            }
            else {
                return Object.assign(new type(), object);
            }
        }
        return null;
    };
    ODataResponse.VALUE = 'value';
    ODataResponse.ODATA_COUNT = '@odata.count';
    return ODataResponse;
}(ODataResponseAbstract));
export { ODataResponse };
if (false) {
    /** @type {?} */
    ODataResponse.VALUE;
    /** @type {?} */
    ODataResponse.ODATA_COUNT;
}

//# sourceMappingURL=data:application/json;base64,