/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CsdlTypeDefinition } from './csdl/csdl-type-definition';
import { CsdlSchema } from './csdl/csdl-schema';
import { Utils } from '../utils/utils';
import { CsdlEnumType, CsdlEnumMember } from './csdl/csdl-enum-type';
import { CsdlEntityType, CsdlPropertyRef, CsdlKey, CsdlComplexType } from './csdl/csdl-structured-type';
import { CsdlFunction, CsdlParameter, CsdlFunctionImport, CsdlActionImport, CsdlReturnType, CsdlAction } from './csdl/csdl-function-action';
import { CsdlProperty, CsdlNavigationProperty, CsdlReferentialConstraint, CsdlOnDelete } from './csdl/csdl-structural-property';
import { CsdlEntitySet } from './csdl/csdl-entity-set';
import { CsdlSingleton } from './csdl/csdl-singleton';
import { CsdlEntityContainer } from './csdl/csdl-entity-container';
import { CsdlReference, CsdlInclude, CsdlIncludeAnnotations } from './csdl/csdl-reference';
import { CsdlAnnotation, CsdlTerm, CsdlAnnotations } from './csdl/csdl-annotation';
import { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';
/** @enum {number} */
var FieldType = {
    ATTRIBUTE: 0, TAG: 1,
};
export { FieldType };
FieldType[FieldType.ATTRIBUTE] = 'ATTRIBUTE';
FieldType[FieldType.TAG] = 'TAG';
var Field = /** @class */ (function () {
    function Field(name, fieldType) {
        this.name = name;
        this.fieldType = fieldType;
    }
    return Field;
}());
export { Field };
if (false) {
    /** @type {?} */
    Field.prototype.name;
    /** @type {?} */
    Field.prototype.fieldType;
}
var Metadata = /** @class */ (function () {
    function Metadata(xml) {
        try {
            /** @type {?} */
            var parser = new DOMParser();
            /** @type {?} */
            var document_1 = parser.parseFromString(xml, 'text/xml');
            this.checkVersion(document_1);
            this.version = this.getFieldValueByAttribute(new Field(Metadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE), document_1.documentElement.attributes);
            this.references = this.getObjects(document_1.documentElement, Metadata.TAG_REFERENCE, [
                new Field(Metadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),
                new Field(Metadata.TAG_INCLUDE, FieldType.TAG),
                new Field(Metadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
            ]);
            /** @type {?} */
            var dataServices = document_1.documentElement.getElementsByTagName(Metadata.TAG_DATA_SERVICES)[0];
            this.schemas = this.getObjects(dataServices, Metadata.TAG_SCHEMA, [
                new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),
                new Field(Metadata.TAG_ENUM_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_COMPLEX_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_ENTITY_TYPE, FieldType.TAG),
                new Field(Metadata.TAG_FUNCTION, FieldType.TAG),
                new Field(Metadata.TAG_ACTION, FieldType.TAG),
                new Field(Metadata.TAG_ENTITY_CONTAINER, FieldType.TAG),
                new Field(Metadata.TAG_TYPE_DEFINITION, FieldType.TAG),
                new Field(Metadata.TAG_TERM, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATIONS, FieldType.TAG),
                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
            ]);
        }
        catch (error) {
            throw new Error('Unable to parse metadata, ' + error);
        }
    }
    /**
     * @param {?} document
     * @return {?}
     */
    Metadata.prototype.checkVersion = /**
     * @param {?} document
     * @return {?}
     */
    function (document) {
        /** @type {?} */
        var attributes = document.documentElement.attributes;
        if (Utils.isNullOrUndefined(attributes)) {
            throw new Error('OData version is not specified in the metadata');
        }
        /** @type {?} */
        var attr = attributes.getNamedItem('Version');
        if (Utils.isNullOrUndefined(attr)) {
            throw new Error('OData version is not specified in the metadata');
        }
        /** @type {?} */
        var odataVersion = attr.nodeValue;
        if (odataVersion !== '4.0') {
            throw new Error('OData version "' + odataVersion + '" is not supported');
        }
    };
    /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    Metadata.prototype.getObjects = /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    function (parentElement, tag, fieldNames) {
        /** @type {?} */
        var objects;
        /** @type {?} */
        var children = parentElement.children;
        for (var index = 0; index < children.length; index++) {
            /** @type {?} */
            var element = children.item(index);
            if (element.nodeName !== tag) {
                continue;
            }
            /** @type {?} */
            var attributes = element.attributes;
            /** @type {?} */
            var fieldValues = this.getFieldValues(fieldNames, attributes, element);
            if (Utils.isNullOrUndefined(objects)) {
                objects = [];
            }
            switch (tag) {
                case Metadata.TAG_REFERENCE:
                    objects.push(new CsdlReference(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_INCLUDE:
                    objects.push(new CsdlInclude(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_INCLUDE_ANNOTATIONS:
                    objects.push(new CsdlIncludeAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_TERM:
                    objects.push(new CsdlTerm(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9]));
                    break;
                case Metadata.TAG_ANNOTATIONS:
                    objects.push(new CsdlAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_ANNOTATION:
                    objects.push(new CsdlAnnotation(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_SCHEMA:
                    objects.push(new CsdlSchema(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9], fieldValues[10], fieldValues[11]));
                    break;
                case Metadata.TAG_ENUM_TYPE:
                    objects.push(new CsdlEnumType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_COMPLEX_TYPE:
                    objects.push(new CsdlComplexType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                    break;
                case Metadata.TAG_ENTITY_TYPE:
                    objects.push(new CsdlEntityType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                    break;
                case Metadata.TAG_FUNCTION:
                    objects.push(new CsdlFunction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                    break;
                case Metadata.TAG_MEMBER:
                    objects.push(new CsdlEnumMember(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_PROPERTY:
                    objects.push(new CsdlProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8]));
                    break;
                case Metadata.TAG_PROPERTY_REF:
                    objects.push(new CsdlPropertyRef(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_NAVIGATION_PROPERTY:
                    objects.push(new CsdlNavigationProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                    break;
                case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                    objects.push(new CsdlReferentialConstraint(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_PARAMETER:
                    objects.push(new CsdlParameter(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                    break;
                case Metadata.TAG_ACTION:
                    objects.push(new CsdlAction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4]));
                    break;
                case Metadata.TAG_ENTITY_SET:
                    objects.push(new CsdlEntitySet(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_SINGLETON:
                    objects.push(new CsdlSingleton(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_FUNCTION_IMPORT:
                    objects.push(new CsdlFunctionImport(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                    break;
                case Metadata.TAG_ACTION_IMPORT:
                    objects.push(new CsdlActionImport(fieldValues[0], fieldValues[1], fieldValues[2]));
                    break;
                case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                    objects.push(new CsdlNavigationPropertyBinding(fieldValues[0], fieldValues[1]));
                    break;
                case Metadata.TAG_TYPE_DEFINITION:
                    objects.push(new CsdlTypeDefinition(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                    break;
                default: throw new Error('Unknwon tag:' + tag);
            }
        }
        return objects;
    };
    /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    Metadata.prototype.getObject = /**
     * @param {?} parentElement
     * @param {?} tag
     * @param {?} fieldNames
     * @return {?}
     */
    function (parentElement, tag, fieldNames) {
        /** @type {?} */
        var object;
        /** @type {?} */
        var children = parentElement.children;
        /** @type {?} */
        var element;
        for (var index = 0; index < children.length; index++) {
            if (children.item(index).nodeName === tag) {
                if (Utils.isNotNullNorUndefined(element)) {
                    throw new Error('Expected one ' + tag);
                }
                element = children.item(index);
            }
        }
        if (Utils.isNotNullNorUndefined(element)) {
            /** @type {?} */
            var attributes = element.attributes;
            /** @type {?} */
            var fieldValues = this.getFieldValues(fieldNames, attributes, element);
            switch (tag) {
                case Metadata.TAG_KEY:
                    object = new CsdlKey(fieldValues[0]);
                    break;
                case Metadata.TAG_RETURN_TYPE:
                    object = new CsdlReturnType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                    break;
                case Metadata.TAG_ENTITY_CONTAINER:
                    object = new CsdlEntityContainer(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                    break;
                case Metadata.TAG_ON_DELETE:
                    object = new CsdlOnDelete(fieldValues[0]);
                    break;
                default: throw new Error('Unknwon tag:' + tag);
            }
        }
        return object;
    };
    /**
     * @param {?} fields
     * @param {?} attributes
     * @param {?} element
     * @return {?}
     */
    Metadata.prototype.getFieldValues = /**
     * @param {?} fields
     * @param {?} attributes
     * @param {?} element
     * @return {?}
     */
    function (fields, attributes, element) {
        /** @type {?} */
        var fieldValues = [];
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                if (field.fieldType === FieldType.TAG) {
                    fieldValues.push(this.getFieldValueByTag(field, element));
                }
                else if (field.fieldType === FieldType.ATTRIBUTE) {
                    fieldValues.push(this.getFieldValueByAttribute(field, attributes));
                }
                else {
                    throw new Error('Unknown field type: ' + field.fieldType);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return fieldValues;
        var e_1, _a;
    };
    /**
     * @param {?} field
     * @param {?} attributes
     * @return {?}
     */
    Metadata.prototype.getFieldValueByAttribute = /**
     * @param {?} field
     * @param {?} attributes
     * @return {?}
     */
    function (field, attributes) {
        switch (field.name) {
            case Metadata.ATTRIBUTE_VERSION:
            case Metadata.ATTRIBUTE_URI:
            case Metadata.ATTRIBUTE_NAMESPACE:
            case Metadata.ATTRIBUTE_ALIAS:
            case Metadata.ATTRIBUTE_TERM_NAMESPACE:
            case Metadata.ATTRIBUTE_TERM:
            case Metadata.ATTRIBUTE_QUALIFIER:
            case Metadata.ATTRIBUTE_TARGET_NAMESPACE:
            case Metadata.ATTRIBUTE_NAME:
            case Metadata.ATTRIBUTE_TYPE:
            case Metadata.ATTRIBUTE_SRID:
            case Metadata.ATTRIBUTE_DEFAULT_VALUE:
            case Metadata.ATTRIBUTE_PARTNER:
            case Metadata.ATTRIBUTE_PROPERTY:
            case Metadata.ATTRIBUTE_REFERENCED_PROPERTY:
            case Metadata.ATTRIBUTE_BASE_TYPE:
            case Metadata.ATTRIBUTE_ENTITY_SET_PATH:
            case Metadata.ATTRIBUTE_ENTITY_TYPE:
            case Metadata.ATTRIBUTE_PATH:
            case Metadata.ATTRIBUTE_TARGET:
            case Metadata.ATTRIBUTE_FUNCTION:
            case Metadata.ATTRIBUTE_ACTION:
            case Metadata.ATTRIBUTE_ENTITY_SET:
            case Metadata.ATTRIBUTE_UNDERLYING_TYPE:
            case Metadata.ATTRIBUTE_EXTENDS:
            case Metadata.ATTRIBUTE_BASE_TERM:
            case Metadata.ATTRIBUTE_APPLIES_TO:
                return this.getAttributeValue(attributes, field.name);
            case Metadata.ATTRIBUTE_NULLABLE:
            case Metadata.ATTRIBUTE_UNICODE:
            case Metadata.ATTRIBUTE_OPEN_TYPE:
            case Metadata.ATTRIBUTE_HAS_STREAM:
            case Metadata.ATTRIBUTE_IS_BOUND:
            case Metadata.ATTRIBUTE_IS_COMPOSABLE:
            case Metadata.ATTRIBUTE_CONTAINS_TARGET:
            case Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT:
            case Metadata.ATTRIBUTE_ABSTRACT:
            case Metadata.ATTRIBUTE_IS_FLAGS:
                return this.propertyValueToBoolean(this.getAttributeValue(attributes, field.name));
            case Metadata.ATTRIBUTE_VALUE:
            case Metadata.ATTRIBUTE_MAX_LENGTH:
            case Metadata.ATTRIBUTE_PRECISION:
            case Metadata.ATTRIBUTE_SCALE:
                return this.propertyValueToNumber(this.getAttributeValue(attributes, field.name));
            default: throw new Error('Unknwon attribute:' + field.name);
        }
    };
    /**
     * @param {?} field
     * @param {?} element
     * @return {?}
     */
    Metadata.prototype.getFieldValueByTag = /**
     * @param {?} field
     * @param {?} element
     * @return {?}
     */
    function (field, element) {
        switch (field.name) {
            case Metadata.TAG_INCLUDE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_INCLUDE_ANNOTATIONS:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TERM_NAMESPACE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TARGET_NAMESPACE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_TERM:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_BASE_TERM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_APPLIES_TO, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ANNOTATIONS:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ANNOTATION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TERM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ENUM_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_MEMBER, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_IS_FLAGS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_COMPLEX_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ENTITY_TYPE:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_KEY, FieldType.TAG),
                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_HAS_STREAM, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_FUNCTION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_IS_COMPOSABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                ]);
            case Metadata.TAG_MEMBER:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_VALUE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_PROPERTY:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_KEY:
                return this.getObject(element, field.name, [
                    new Field(Metadata.TAG_PROPERTY_REF, FieldType.TAG)
                ]);
            case Metadata.TAG_PROPERTY_REF:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_NAVIGATION_PROPERTY:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PARTNER, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_CONTAINS_TARGET, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_REFERENTIAL_CONSTRAINT, FieldType.TAG),
                    new Field(Metadata.TAG_ON_DELETE, FieldType.TAG)
                ]);
            case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_PROPERTY, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_REFERENCED_PROPERTY, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ON_DELETE:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_PARAMETER:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_RETURN_TYPE:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ACTION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                ]);
            case Metadata.TAG_ENTITY_CONTAINER:
                return this.getObject(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_EXTENDS, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ENTITY_SET, FieldType.TAG),
                    new Field(Metadata.TAG_SINGLETON, FieldType.TAG),
                    new Field(Metadata.TAG_FUNCTION_IMPORT, FieldType.TAG),
                    new Field(Metadata.TAG_ACTION_IMPORT, FieldType.TAG)
                ]);
            case Metadata.TAG_ENTITY_SET:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG),
                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_SINGLETON:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG)
                ]);
            case Metadata.TAG_FUNCTION_IMPORT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_FUNCTION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_ACTION_IMPORT:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_PATH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE)
                ]);
            case Metadata.TAG_TYPE_DEFINITION:
                return this.getObjects(element, field.name, [
                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
                ]);
            default: throw new Error('Unknwon tag:' + field.name);
        }
    };
    /**
     * @param {?} attributes
     * @param {?} attributeName
     * @return {?}
     */
    Metadata.prototype.getAttributeValue = /**
     * @param {?} attributes
     * @param {?} attributeName
     * @return {?}
     */
    function (attributes, attributeName) {
        /** @type {?} */
        var attribute = attributes.getNamedItem(attributeName);
        if (Utils.isNotNullNorUndefined(attribute)) {
            return attribute.nodeValue;
        }
        return undefined;
    };
    /**
     * @param {?} attributeValue
     * @return {?}
     */
    Metadata.prototype.propertyValueToNumber = /**
     * @param {?} attributeValue
     * @return {?}
     */
    function (attributeValue) {
        return Utils.isNotNullNorUndefined(attributeValue) ? Number(attributeValue) : undefined;
    };
    /**
     * @param {?} attributeValue
     * @return {?}
     */
    Metadata.prototype.propertyValueToBoolean = /**
     * @param {?} attributeValue
     * @return {?}
     */
    function (attributeValue) {
        return Utils.isNotNullNorUndefined(attributeValue) ? attributeValue === 'true' : undefined;
    };
    Metadata.TAG_EDMX = 'edmx:Edmx';
    Metadata.TAG_DATA_SERVICES = 'edmx:DataServices';
    Metadata.TAG_REFERENCE = 'edmx:Reference';
    Metadata.TAG_INCLUDE = 'edmx:Include';
    Metadata.TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';
    Metadata.TAG_TERM = 'Term';
    Metadata.TAG_ANNOTATIONS = 'Annotations';
    Metadata.TAG_ANNOTATION = 'Annotation';
    Metadata.TAG_SCHEMA = 'Schema';
    Metadata.TAG_ENUM_TYPE = 'EnumType';
    Metadata.TAG_MEMBER = 'Member';
    Metadata.TAG_COMPLEX_TYPE = 'ComplexType';
    Metadata.TAG_ENTITY_TYPE = 'EntityType';
    Metadata.TAG_PROPERTY = 'Property';
    Metadata.TAG_KEY = 'Key';
    Metadata.TAG_PROPERTY_REF = 'PropertyRef';
    Metadata.TAG_NAVIGATION_PROPERTY = 'NavigationProperty';
    Metadata.TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';
    Metadata.TAG_ON_DELETE = 'OnDelete';
    Metadata.TAG_FUNCTION = 'Function';
    Metadata.TAG_RETURN_TYPE = 'ReturnType';
    Metadata.TAG_PARAMETER = 'Parameter';
    Metadata.TAG_ACTION = 'Action';
    Metadata.TAG_ENTITY_CONTAINER = 'EntityContainer';
    Metadata.TAG_ENTITY_SET = 'EntitySet';
    Metadata.TAG_SINGLETON = 'Singleton';
    Metadata.TAG_FUNCTION_IMPORT = 'FunctionImport';
    Metadata.TAG_ACTION_IMPORT = 'ActionImport';
    Metadata.TAG_NAVIGATION_PROPERTY_BINDING = 'NavigationPropertyBinding';
    Metadata.TAG_TYPE_DEFINITION = 'TypeDefinition';
    Metadata.ATTRIBUTE_VERSION = 'Version';
    Metadata.ATTRIBUTE_URI = 'Uri';
    Metadata.ATTRIBUTE_ALIAS = 'Alias';
    Metadata.ATTRIBUTE_NAMESPACE = 'Namespace';
    Metadata.ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';
    Metadata.ATTRIBUTE_QUALIFIER = 'Qualifier';
    Metadata.ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';
    Metadata.ATTRIBUTE_TERM = 'Term';
    Metadata.ATTRIBUTE_NAME = 'Name';
    Metadata.ATTRIBUTE_VALUE = 'Value';
    Metadata.ATTRIBUTE_BASE_TYPE = 'BaseType';
    Metadata.ATTRIBUTE_OPEN_TYPE = 'OpenType';
    Metadata.ATTRIBUTE_TYPE = 'Type';
    Metadata.ATTRIBUTE_NULLABLE = 'Nullable';
    Metadata.ATTRIBUTE_MAX_LENGTH = 'MaxLength';
    Metadata.ATTRIBUTE_PRECISION = 'Precision';
    Metadata.ATTRIBUTE_SCALE = 'Scale';
    Metadata.ATTRIBUTE_UNICODE = 'Unicode';
    Metadata.ATTRIBUTE_SRID = 'SRID';
    Metadata.ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';
    Metadata.ATTRIBUTE_PARTNER = 'Partner';
    Metadata.ATTRIBUTE_PROPERTY = 'Property';
    Metadata.ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';
    Metadata.ATTRIBUTE_HAS_STREAM = 'HasStream';
    Metadata.ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';
    Metadata.ATTRIBUTE_IS_BOUND = 'IsBound';
    Metadata.ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';
    Metadata.ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';
    Metadata.ATTRIBUTE_ENTITY_TYPE = 'EntityType';
    Metadata.ATTRIBUTE_PATH = 'Path';
    Metadata.ATTRIBUTE_TARGET = 'Target';
    Metadata.ATTRIBUTE_FUNCTION = 'Function';
    Metadata.ATTRIBUTE_ACTION = 'Action';
    Metadata.ATTRIBUTE_ENTITY_SET = 'EntitySet';
    Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT = 'IncludeInServiceDocument';
    Metadata.ATTRIBUTE_ABSTRACT = 'Abstract';
    Metadata.ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';
    Metadata.ATTRIBUTE_IS_FLAGS = 'IsFlags';
    Metadata.ATTRIBUTE_EXTENDS = 'Extends';
    Metadata.ATTRIBUTE_BASE_TERM = 'BaseTerm';
    Metadata.ATTRIBUTE_APPLIES_TO = 'AppliesTo';
    return Metadata;
}());
export { Metadata };
if (false) {
    /** @type {?} */
    Metadata.TAG_EDMX;
    /** @type {?} */
    Metadata.TAG_DATA_SERVICES;
    /** @type {?} */
    Metadata.TAG_REFERENCE;
    /** @type {?} */
    Metadata.TAG_INCLUDE;
    /** @type {?} */
    Metadata.TAG_INCLUDE_ANNOTATIONS;
    /** @type {?} */
    Metadata.TAG_TERM;
    /** @type {?} */
    Metadata.TAG_ANNOTATIONS;
    /** @type {?} */
    Metadata.TAG_ANNOTATION;
    /** @type {?} */
    Metadata.TAG_SCHEMA;
    /** @type {?} */
    Metadata.TAG_ENUM_TYPE;
    /** @type {?} */
    Metadata.TAG_MEMBER;
    /** @type {?} */
    Metadata.TAG_COMPLEX_TYPE;
    /** @type {?} */
    Metadata.TAG_ENTITY_TYPE;
    /** @type {?} */
    Metadata.TAG_PROPERTY;
    /** @type {?} */
    Metadata.TAG_KEY;
    /** @type {?} */
    Metadata.TAG_PROPERTY_REF;
    /** @type {?} */
    Metadata.TAG_NAVIGATION_PROPERTY;
    /** @type {?} */
    Metadata.TAG_REFERENTIAL_CONSTRAINT;
    /** @type {?} */
    Metadata.TAG_ON_DELETE;
    /** @type {?} */
    Metadata.TAG_FUNCTION;
    /** @type {?} */
    Metadata.TAG_RETURN_TYPE;
    /** @type {?} */
    Metadata.TAG_PARAMETER;
    /** @type {?} */
    Metadata.TAG_ACTION;
    /** @type {?} */
    Metadata.TAG_ENTITY_CONTAINER;
    /** @type {?} */
    Metadata.TAG_ENTITY_SET;
    /** @type {?} */
    Metadata.TAG_SINGLETON;
    /** @type {?} */
    Metadata.TAG_FUNCTION_IMPORT;
    /** @type {?} */
    Metadata.TAG_ACTION_IMPORT;
    /** @type {?} */
    Metadata.TAG_NAVIGATION_PROPERTY_BINDING;
    /** @type {?} */
    Metadata.TAG_TYPE_DEFINITION;
    /** @type {?} */
    Metadata.ATTRIBUTE_VERSION;
    /** @type {?} */
    Metadata.ATTRIBUTE_URI;
    /** @type {?} */
    Metadata.ATTRIBUTE_ALIAS;
    /** @type {?} */
    Metadata.ATTRIBUTE_NAMESPACE;
    /** @type {?} */
    Metadata.ATTRIBUTE_TERM_NAMESPACE;
    /** @type {?} */
    Metadata.ATTRIBUTE_QUALIFIER;
    /** @type {?} */
    Metadata.ATTRIBUTE_TARGET_NAMESPACE;
    /** @type {?} */
    Metadata.ATTRIBUTE_TERM;
    /** @type {?} */
    Metadata.ATTRIBUTE_NAME;
    /** @type {?} */
    Metadata.ATTRIBUTE_VALUE;
    /** @type {?} */
    Metadata.ATTRIBUTE_BASE_TYPE;
    /** @type {?} */
    Metadata.ATTRIBUTE_OPEN_TYPE;
    /** @type {?} */
    Metadata.ATTRIBUTE_TYPE;
    /** @type {?} */
    Metadata.ATTRIBUTE_NULLABLE;
    /** @type {?} */
    Metadata.ATTRIBUTE_MAX_LENGTH;
    /** @type {?} */
    Metadata.ATTRIBUTE_PRECISION;
    /** @type {?} */
    Metadata.ATTRIBUTE_SCALE;
    /** @type {?} */
    Metadata.ATTRIBUTE_UNICODE;
    /** @type {?} */
    Metadata.ATTRIBUTE_SRID;
    /** @type {?} */
    Metadata.ATTRIBUTE_DEFAULT_VALUE;
    /** @type {?} */
    Metadata.ATTRIBUTE_PARTNER;
    /** @type {?} */
    Metadata.ATTRIBUTE_PROPERTY;
    /** @type {?} */
    Metadata.ATTRIBUTE_REFERENCED_PROPERTY;
    /** @type {?} */
    Metadata.ATTRIBUTE_HAS_STREAM;
    /** @type {?} */
    Metadata.ATTRIBUTE_CONTAINS_TARGET;
    /** @type {?} */
    Metadata.ATTRIBUTE_IS_BOUND;
    /** @type {?} */
    Metadata.ATTRIBUTE_ENTITY_SET_PATH;
    /** @type {?} */
    Metadata.ATTRIBUTE_IS_COMPOSABLE;
    /** @type {?} */
    Metadata.ATTRIBUTE_ENTITY_TYPE;
    /** @type {?} */
    Metadata.ATTRIBUTE_PATH;
    /** @type {?} */
    Metadata.ATTRIBUTE_TARGET;
    /** @type {?} */
    Metadata.ATTRIBUTE_FUNCTION;
    /** @type {?} */
    Metadata.ATTRIBUTE_ACTION;
    /** @type {?} */
    Metadata.ATTRIBUTE_ENTITY_SET;
    /** @type {?} */
    Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT;
    /** @type {?} */
    Metadata.ATTRIBUTE_ABSTRACT;
    /** @type {?} */
    Metadata.ATTRIBUTE_UNDERLYING_TYPE;
    /** @type {?} */
    Metadata.ATTRIBUTE_IS_FLAGS;
    /** @type {?} */
    Metadata.ATTRIBUTE_EXTENDS;
    /** @type {?} */
    Metadata.ATTRIBUTE_BASE_TERM;
    /** @type {?} */
    Metadata.ATTRIBUTE_APPLIES_TO;
    /** @type {?} */
    Metadata.prototype.version;
    /** @type {?} */
    Metadata.prototype.references;
    /** @type {?} */
    Metadata.prototype.schemas;
}

//# sourceMappingURL=data:application/json;base64,