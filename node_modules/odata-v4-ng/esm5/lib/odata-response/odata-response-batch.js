/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpHeaders, HttpResponse } from '@angular/common/http';
import { Utils } from '../utils/utils';
import { ODataResponse } from './odata-response';
import { ODataResponseAbstract } from './odata-response-abstract';
var ODataResponseBatch = /** @class */ (function (_super) {
    tslib_1.__extends(ODataResponseBatch, _super);
    function ODataResponseBatch(httpResponse) {
        var _this = _super.call(this, httpResponse) || this;
        _this.odataResponses = [];
        _this.parseResponses();
        return _this;
    }
    /**
     * @return {?}
     */
    ODataResponseBatch.prototype.getODataResponses = /**
     * @return {?}
     */
    function () {
        return this.odataResponses;
    };
    /**
     * @return {?}
     */
    ODataResponseBatch.prototype.parseResponses = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var contentType = this.getHttpResponse().headers.get(ODataResponseBatch.CONTENT_TYPE);
        /** @type {?} */
        var boundaryDelimiterBatch = this.getBoundaryDelimiter(contentType);
        /** @type {?} */
        var boundaryEndBatch = this.getBoundaryEnd(boundaryDelimiterBatch);
        /** @type {?} */
        var batchBody = this.getBodyAsText();
        /** @type {?} */
        var batchBodyLines = batchBody.split(ODataResponseBatch.NEWLINE);
        /** @type {?} */
        var odataResponseCS;
        /** @type {?} */
        var contentId;
        /** @type {?} */
        var boundaryDelimiterCS;
        /** @type {?} */
        var boundaryEndCS;
        /** @type {?} */
        var batchPartStartIndex;
        for (var index = 0; index < batchBodyLines.length; index++) {
            /** @type {?} */
            var batchBodyLine = batchBodyLines[index];
            if (batchBodyLine.startsWith(ODataResponseBatch.CONTENT_TYPE)) {
                /** @type {?} */
                var contentTypeValue = this.getHeaderValue(batchBodyLine);
                if (contentTypeValue === ODataResponseBatch.MULTIPART_MIXED) {
                    odataResponseCS = [];
                    contentId = undefined;
                    boundaryDelimiterCS = this.getBoundaryDelimiter(batchBodyLine);
                    boundaryEndCS = this.getBoundaryEnd(boundaryDelimiterCS);
                    batchPartStartIndex = undefined;
                }
                continue;
            }
            else if (Utils.isNotNullNorUndefined(odataResponseCS) && batchBodyLine.startsWith(ODataResponseBatch.CONTENT_ID)) {
                contentId = Number(this.getHeaderValue(batchBodyLine));
            }
            else if (batchBodyLine.startsWith(ODataResponseBatch.HTTP11)) {
                batchPartStartIndex = index;
            }
            else if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS
                || batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                if (!batchPartStartIndex) {
                    continue;
                }
                /** @type {?} */
                var odataResponse = this.createODataResponse(batchBodyLines, batchPartStartIndex, index - 1);
                if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                    odataResponseCS[contentId] = odataResponse;
                }
                else {
                    this.odataResponses.push(odataResponse);
                }
                if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS) {
                    batchPartStartIndex = index + 1;
                }
                else if (batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                    if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                        try {
                            for (var odataResponseCS_1 = tslib_1.__values(odataResponseCS), odataResponseCS_1_1 = odataResponseCS_1.next(); !odataResponseCS_1_1.done; odataResponseCS_1_1 = odataResponseCS_1.next()) {
                                var response = odataResponseCS_1_1.value;
                                if (Utils.isNotNullNorUndefined(response)) {
                                    this.odataResponses.push(response);
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (odataResponseCS_1_1 && !odataResponseCS_1_1.done && (_a = odataResponseCS_1.return)) _a.call(odataResponseCS_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    odataResponseCS = undefined;
                    boundaryDelimiterCS = undefined;
                    boundaryEndCS = undefined;
                    batchPartStartIndex = undefined;
                }
            }
        }
        var e_1, _a;
    };
    /**
     * @param {?} header
     * @return {?}
     */
    ODataResponseBatch.prototype.getHeaderValue = /**
     * @param {?} header
     * @return {?}
     */
    function (header) {
        /** @type {?} */
        var res = header.split(';')[0].trim();
        res = res.split(':')[1].trim();
        return res;
    };
    /**
     * @param {?} contentType
     * @return {?}
     */
    ODataResponseBatch.prototype.getBoundaryDelimiter = /**
     * @param {?} contentType
     * @return {?}
     */
    function (contentType) {
        /** @type {?} */
        var contentTypeParts = contentType.split(';');
        if (contentTypeParts.length === 2) {
            /** @type {?} */
            var boundary = contentType.split(';')[1].trim();
            /** @type {?} */
            var boundaryDelimiter = ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX + boundary.split('=')[1];
            return boundaryDelimiter;
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} boundaryDelimiter
     * @return {?}
     */
    ODataResponseBatch.prototype.getBoundaryEnd = /**
     * @param {?} boundaryDelimiter
     * @return {?}
     */
    function (boundaryDelimiter) {
        if (!boundaryDelimiter.length) {
            return '';
        }
        /** @type {?} */
        var boundaryEnd = boundaryDelimiter + ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
        return boundaryEnd;
    };
    /**
     * @param {?} batchBodyLines
     * @param {?} batchPartStartIndex
     * @param {?} batchPartEndIndex
     * @return {?}
     */
    ODataResponseBatch.prototype.createODataResponse = /**
     * @param {?} batchBodyLines
     * @param {?} batchPartStartIndex
     * @param {?} batchPartEndIndex
     * @return {?}
     */
    function (batchBodyLines, batchPartStartIndex, batchPartEndIndex) {
        /** @type {?} */
        var index = batchPartStartIndex;
        /** @type {?} */
        var statusLine = batchBodyLines[index];
        /** @type {?} */
        var statusLineParts = batchBodyLines[index].split(' ');
        /** @type {?} */
        var status = statusLineParts[1];
        /** @type {?} */
        var statusTextIndex = statusLine.indexOf(status) + status.length + 1;
        /** @type {?} */
        var statusText = statusLine.substring(statusTextIndex);
        /** @type {?} */
        var httpHeaders = new HttpHeaders();
        for (++index; index <= batchPartEndIndex; index++) {
            /** @type {?} */
            var batchBodyLine = batchBodyLines[index];
            if (batchBodyLine === '') {
                break;
            }
            /** @type {?} */
            var batchBodyLineParts = batchBodyLine.split(': ');
            httpHeaders = httpHeaders.append(batchBodyLineParts[0].trim(), batchBodyLineParts[1].trim());
        }
        /** @type {?} */
        var body = '';
        for (; index <= batchPartEndIndex; index++) {
            body += batchBodyLines[index];
        }
        return new ODataResponse(new HttpResponse({
            body: body,
            headers: httpHeaders,
            status: Number(status),
            statusText: statusText
        }));
    };
    ODataResponseBatch.CONTENT_TYPE = 'Content-Type';
    ODataResponseBatch.CONTENT_ID = 'Content-ID';
    ODataResponseBatch.HTTP11 = 'HTTP/1.1';
    ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX = '--';
    ODataResponseBatch.NEWLINE = '\r\n';
    ODataResponseBatch.MULTIPART_MIXED = 'multipart/mixed';
    return ODataResponseBatch;
}(ODataResponseAbstract));
export { ODataResponseBatch };
if (false) {
    /** @type {?} */
    ODataResponseBatch.CONTENT_TYPE;
    /** @type {?} */
    ODataResponseBatch.CONTENT_ID;
    /** @type {?} */
    ODataResponseBatch.HTTP11;
    /** @type {?} */
    ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
    /** @type {?} */
    ODataResponseBatch.NEWLINE;
    /** @type {?} */
    ODataResponseBatch.MULTIPART_MIXED;
    /** @type {?} */
    ODataResponseBatch.prototype.odataResponses;
}

//# sourceMappingURL=data:application/json;base64,