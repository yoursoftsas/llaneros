/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { QueryOptions } from '../query-options/query-options';
import { Utils } from '../utils/utils';
import { ODataQueryAbstract } from './odata-query-abstract';
import { ODataQueryBatch } from './odata-query-batch';
var ODataQuery = /** @class */ (function (_super) {
    tslib_1.__extends(ODataQuery, _super);
    function ODataQuery(odataService, serviceRoot) {
        var _this = _super.call(this, odataService, serviceRoot) || this;
        Utils.requireNotNullNorUndefined(odataService, 'odataService');
        Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
        Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
        _this.queryOptions = new QueryOptions(ODataQuery.SEPARATOR);
        _this.segments = [];
        _this.lastSegment = null;
        return _this;
    }
    // QUERY SEGMENTS
    /**
     * @return {?}
     */
    ODataQuery.prototype.metadata = /**
     * @return {?}
     */
    function () {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.METADATA), ODataQuery.METADATA);
        if (this.segments.length) {
            throw new Error('metadata segment cannot be appended to other segments');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$METADATA);
        this.addSegment(ODataQuery.METADATA);
        return this;
    };
    /**
     * @param {?} entitySet
     * @return {?}
     */
    ODataQuery.prototype.entitySet = /**
     * @param {?} entitySet
     * @return {?}
     */
    function (entitySet) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.ENTITY_SET), ODataQuery.ENTITY_SET);
        Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
        Utils.requireNotEmpty(entitySet, 'entitySet');
        this.queryString = Utils.appendSegment(this.queryString, entitySet);
        this.addSegment(ODataQuery.ENTITY_SET);
        return this;
    };
    /**
     * @param {?} entityKey
     * @return {?}
     */
    ODataQuery.prototype.entityKey = /**
     * @param {?} entityKey
     * @return {?}
     */
    function (entityKey) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('entityKey can only be appended to entitySet or navigationProperty');
        }
        Utils.requireNotNullNorUndefined(entityKey, 'entityKey');
        Utils.requireNotEmpty(entityKey, 'entityKey');
        entityKey = Utils.getValueURI(entityKey, true);
        this.queryString = Utils.removeEndingSeparator(this.queryString) + '(' + entityKey + ')';
        this.addSegment(ODataQuery.ENTITY_KEY);
        return this;
    };
    /**
     * @param {?} singleton
     * @return {?}
     */
    ODataQuery.prototype.singleton = /**
     * @param {?} singleton
     * @return {?}
     */
    function (singleton) {
        if (this.segments.length) {
            throw new Error('singleton segment cannot be appended to other segments');
        }
        Utils.requireNotNullNorUndefined(singleton, 'singleton');
        Utils.requireNotEmpty(singleton, 'singleton');
        this.queryString = Utils.appendSegment(this.queryString, singleton);
        this.addSegment(ODataQuery.SINGLETON);
        return this;
    };
    /**
     * @param {?} typeName
     * @return {?}
     */
    ODataQuery.prototype.typeName = /**
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY && this.lastSegment !== ODataQuery.ENTITY_KEY) {
            throw new Error('typeName can only be appended to entitySet, navigationProperty or entityKey');
        }
        Utils.requireNotNullNorUndefined(typeName, 'typeName');
        Utils.requireNotEmpty(typeName, 'typeName');
        this.queryString = Utils.appendSegment(this.queryString, typeName);
        this.addSegment(ODataQuery.TYPE_NAME);
        return this;
    };
    /**
     * @param {?} property
     * @return {?}
     */
    ODataQuery.prototype.property = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.PROPERTY), ODataQuery.PROPERTY);
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON) {
            throw new Error('property can only be appended to entityKey or singleton');
        }
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        this.queryString = Utils.appendSegment(this.queryString, property);
        this.addSegment(ODataQuery.PROPERTY);
        return this;
    };
    /**
     * @param {?} navigationProperty
     * @return {?}
     */
    ODataQuery.prototype.navigationProperty = /**
     * @param {?} navigationProperty
     * @return {?}
     */
    function (navigationProperty) {
        if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON && this.lastSegment !== ODataQuery.TYPE_NAME) {
            throw new Error('navigationProperty can only be appended to entityKey, singleton or typeName');
        }
        Utils.requireNotNullNorUndefined(navigationProperty, 'navigationProperty');
        Utils.requireNotEmpty(navigationProperty, 'navigationProperty');
        this.queryString = Utils.appendSegment(this.queryString, navigationProperty);
        this.addSegment(ODataQuery.NAVIGATION_PROPERTY);
        return this;
    };
    /**
     * @return {?}
     */
    ODataQuery.prototype.ref = /**
     * @return {?}
     */
    function () {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.REF), ODataQuery.REF);
        if (this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('ref can only be appended to navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$REF);
        this.addSegment(ODataQuery.REF);
        return this;
    };
    /**
     * @return {?}
     */
    ODataQuery.prototype.value = /**
     * @return {?}
     */
    function () {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.VALUE), ODataQuery.VALUE);
        if (this.lastSegment !== ODataQuery.PROPERTY) {
            throw new Error('value can only be appended to property');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$VALUE);
        this.addSegment(ODataQuery.VALUE);
        return this;
    };
    /**
     * @return {?}
     */
    ODataQuery.prototype.countSegment = /**
     * @return {?}
     */
    function () {
        Utils.requireNullOrUndefined(this.getSegment(ODataQuery.COUNT), ODataQuery.COUNT);
        if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
            throw new Error('count can only be appended to entitySet or navigationProperty');
        }
        this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$COUNT);
        this.addSegment(ODataQuery.COUNT);
        return this;
    };
    /**
     * @param {?} functionCall
     * @return {?}
     */
    ODataQuery.prototype.functionCall = /**
     * @param {?} functionCall
     * @return {?}
     */
    function (functionCall) {
        Utils.requireNotNullNorUndefined(functionCall, 'functionCall');
        Utils.requireNotEmpty(functionCall, 'functionCall');
        this.queryString = Utils.appendSegment(this.queryString, functionCall);
        this.addSegment(ODataQuery.FUNCTION_CALL);
        return this;
    };
    /**
     * @param {?} actionCall
     * @return {?}
     */
    ODataQuery.prototype.actionCall = /**
     * @param {?} actionCall
     * @return {?}
     */
    function (actionCall) {
        Utils.requireNotNullNorUndefined(actionCall, 'actionCall');
        Utils.requireNotEmpty(actionCall, 'actionCall');
        this.queryString = Utils.appendSegment(this.queryString, actionCall);
        this.addSegment(ODataQuery.ACTION_CALL);
        return this;
    };
    /**
     * @return {?}
     */
    ODataQuery.prototype.batch = /**
     * @return {?}
     */
    function () {
        return new ODataQueryBatch(this.odataService, this.serviceRoot);
    };
    // QUERY OPTIONS
    /**
     * @param {?} select
     * @return {?}
     */
    ODataQuery.prototype.select = /**
     * @param {?} select
     * @return {?}
     */
    function (select) {
        this.queryOptions.select(select);
        return this;
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ODataQuery.prototype.filter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this.queryOptions.filter(filter);
        return this;
    };
    /**
     * @param {?} expand
     * @return {?}
     */
    ODataQuery.prototype.expand = /**
     * @param {?} expand
     * @return {?}
     */
    function (expand) {
        this.queryOptions.expand(expand);
        return this;
    };
    /**
     * @param {?} orderby
     * @return {?}
     */
    ODataQuery.prototype.orderby = /**
     * @param {?} orderby
     * @return {?}
     */
    function (orderby) {
        this.queryOptions.orderby(orderby);
        return this;
    };
    /**
     * @param {?} search
     * @return {?}
     */
    ODataQuery.prototype.search = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        this.queryOptions.search(search);
        return this;
    };
    /**
     * @param {?} skip
     * @return {?}
     */
    ODataQuery.prototype.skip = /**
     * @param {?} skip
     * @return {?}
     */
    function (skip) {
        this.queryOptions.skip(skip);
        return this;
    };
    /**
     * @param {?} top
     * @return {?}
     */
    ODataQuery.prototype.top = /**
     * @param {?} top
     * @return {?}
     */
    function (top) {
        this.queryOptions.top(top);
        return this;
    };
    /**
     * @param {?} count
     * @return {?}
     */
    ODataQuery.prototype.countOption = /**
     * @param {?} count
     * @return {?}
     */
    function (count) {
        this.queryOptions.count(count);
        return this;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    ODataQuery.prototype.customOption = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.queryOptions.customOption(key, value);
        return this;
    };
    /**
     * @param {?} format
     * @return {?}
     */
    ODataQuery.prototype.format = /**
     * @param {?} format
     * @return {?}
     */
    function (format) {
        this.queryOptions.format(format);
        return this;
    };
    // QUERY EXECUTION
    /**
     * @param {?=} httpOptions
     * @return {?}
     */
    ODataQuery.prototype.get = /**
     * @param {?=} httpOptions
     * @return {?}
     */
    function (httpOptions) {
        return this.odataService.get(this, httpOptions);
    };
    /**
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    ODataQuery.prototype.post = /**
     * @param {?} body
     * @param {?=} httpOptions
     * @return {?}
     */
    function (body, httpOptions) {
        return this.odataService.post(this, body, httpOptions);
    };
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    ODataQuery.prototype.patch = /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    function (body, etag, httpOptions) {
        return this.odataService.patch(this, body, etag, httpOptions);
    };
    /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    ODataQuery.prototype.put = /**
     * @param {?} body
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    function (body, etag, httpOptions) {
        return this.odataService.put(this, body, etag, httpOptions);
    };
    /**
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    ODataQuery.prototype.delete = /**
     * @param {?=} etag
     * @param {?=} httpOptions
     * @return {?}
     */
    function (etag, httpOptions) {
        return this.odataService.delete(this, etag, httpOptions);
    };
    /**
     * @return {?}
     */
    ODataQuery.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var res = this.queryString;
        if (Utils.isNotNullNorUndefined(this.queryOptions) && !this.queryOptions.isEmpty()) {
            res += '?' + this.queryOptions.toString();
        }
        return res;
    };
    /**
     * @param {?} segment
     * @return {?}
     */
    ODataQuery.prototype.getSegment = /**
     * @param {?} segment
     * @return {?}
     */
    function (segment) {
        Utils.requireNotNull(segment, 'segment');
        /** @type {?} */
        var res = this.segments.find(function (value, index, segments) {
            return value === segment;
        });
        return res;
    };
    /**
     * @param {?} segment
     * @return {?}
     */
    ODataQuery.prototype.addSegment = /**
     * @param {?} segment
     * @return {?}
     */
    function (segment) {
        Utils.requireNotNull(segment, 'segment');
        this.segments.push(segment);
        if (Utils.isNotNullNorUndefined(this.segments) && this.segments.length) {
            this.lastSegment = this.segments[this.segments.length - 1];
        }
    };
    // QUERY OPTIONS SEPARATOR
    ODataQuery.SEPARATOR = '&';
    ODataQuery.METADATA = 'metadata';
    ODataQuery.ENTITY_SET = 'entitySet';
    ODataQuery.ENTITY_KEY = 'entityKey';
    ODataQuery.SINGLETON = 'singleton';
    ODataQuery.TYPE_NAME = 'typeName';
    ODataQuery.PROPERTY = 'property';
    ODataQuery.NAVIGATION_PROPERTY = 'navigationProperty';
    ODataQuery.REF = 'ref';
    ODataQuery.VALUE = 'value';
    ODataQuery.COUNT = 'count';
    ODataQuery.FUNCTION_CALL = 'functionCall';
    ODataQuery.ACTION_CALL = 'actionCall';
    ODataQuery.$METADATA = '$metadata';
    ODataQuery.$REF = '$ref';
    ODataQuery.$VALUE = '$value';
    ODataQuery.$COUNT = '$count';
    return ODataQuery;
}(ODataQueryAbstract));
export { ODataQuery };
if (false) {
    /** @type {?} */
    ODataQuery.SEPARATOR;
    /** @type {?} */
    ODataQuery.METADATA;
    /** @type {?} */
    ODataQuery.ENTITY_SET;
    /** @type {?} */
    ODataQuery.ENTITY_KEY;
    /** @type {?} */
    ODataQuery.SINGLETON;
    /** @type {?} */
    ODataQuery.TYPE_NAME;
    /** @type {?} */
    ODataQuery.PROPERTY;
    /** @type {?} */
    ODataQuery.NAVIGATION_PROPERTY;
    /** @type {?} */
    ODataQuery.REF;
    /** @type {?} */
    ODataQuery.VALUE;
    /** @type {?} */
    ODataQuery.COUNT;
    /** @type {?} */
    ODataQuery.FUNCTION_CALL;
    /** @type {?} */
    ODataQuery.ACTION_CALL;
    /** @type {?} */
    ODataQuery.$METADATA;
    /** @type {?} */
    ODataQuery.$REF;
    /** @type {?} */
    ODataQuery.$VALUE;
    /** @type {?} */
    ODataQuery.$COUNT;
    /** @type {?} */
    ODataQuery.prototype.queryOptions;
    /** @type {?} */
    ODataQuery.prototype.segments;
    /** @type {?} */
    ODataQuery.prototype.lastSegment;
}

//# sourceMappingURL=data:application/json;base64,