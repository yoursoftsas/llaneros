/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { OperatorLogical } from '../query-options/operator';
import { QuotedString } from '../odata-query/quoted-string';
var Utils = /** @class */ (function () {
    function Utils() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.isNull = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value === null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.isUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value === undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.isNullOrUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Utils.isNull(value) || Utils.isUndefined(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.isNotNullNorUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return !Utils.isNull(value) && !Utils.isUndefined(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.isEmpty = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Utils.isNullOrUndefined(value)
            || typeof (value) === 'string' && !value.length
            || value instanceof Array && !value.length
            || typeof (value.isEmpty) === 'function' && value.isEmpty()) {
            return true;
        }
        if (value instanceof Array && value) {
            try {
                for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var v = value_1_1.value;
                    if (!Utils.isEmpty(v)) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        }
        return false;
        var e_1, _a;
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNull = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (fieldValue !== null) {
            throw new Error(fieldName + ' must be null');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireUndefined = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (fieldValue !== undefined) {
            throw new Error(fieldName + ' must be undefined');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNotNull = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (fieldValue === null) {
            throw new Error(fieldName + ' cannot be null');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNotUndefined = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (fieldValue === undefined) {
            throw new Error(fieldName + ' cannot be undefined');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNotNullNorUndefined = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        Utils.requireNotNull(fieldValue, fieldName);
        Utils.requireNotUndefined(fieldValue, fieldName);
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNullOrUndefined = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (!Utils.isNull(fieldValue) && !Utils.isUndefined(fieldValue)) {
            throw new Error(fieldName + ' must be null or undefined');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNotEmpty = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (Utils.isEmpty(fieldValue)) {
            throw new Error(fieldName + ' cannot be empty');
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    Utils.requireNotNegative = /**
     * @param {?} fieldValue
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldValue, fieldName) {
        if (fieldValue < 0) {
            throw new Error(fieldName + ' cannot be negative');
        }
    };
    /**
     * @param {?} path
     * @param {?} segment
     * @return {?}
     */
    Utils.appendSegment = /**
     * @param {?} path
     * @param {?} segment
     * @return {?}
     */
    function (path, segment) {
        Utils.requireNotNullNorUndefined(path, 'path');
        Utils.requireNotNullNorUndefined(segment, 'segment');
        if (!path.endsWith('/')) {
            path += '/';
        }
        return path + segment;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Utils.removeEndingSeparator = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        Utils.requireNotNullNorUndefined(value, 'value');
        if (value.endsWith('/')) {
            if (value.length === 1) {
                return '';
            }
            return value.substring(0, value.length - 1);
        }
        return value;
    };
    /**
     * @param {?} value
     * @param {?} encodeURI
     * @return {?}
     */
    Utils.getValueURI = /**
     * @param {?} value
     * @param {?} encodeURI
     * @return {?}
     */
    function (value, encodeURI) {
        Utils.requireNotUndefined(value, 'value');
        Utils.requireNotNullNorUndefined(encodeURI, 'encodeURI');
        /** @type {?} */
        var res = value;
        if (typeof (res) === 'string') {
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
        }
        else if (res instanceof QuotedString) {
            // escape single quote
            res = res.toString().replace(/'/g, '\'\'');
            // encode uri component
            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                res = encodeURIComponent(res);
            }
            // add start/ending quotes
            res = '\'' + res + '\'';
        }
        // boolean, number
        return res;
    };
    /**
     * @param {?} items
     * @param {?=} operator
     * @param {?=} operatorUppercase
     * @return {?}
     */
    Utils.toString = /**
     * @param {?} items
     * @param {?=} operator
     * @param {?=} operatorUppercase
     * @return {?}
     */
    function (items, operator, operatorUppercase) {
        if (operatorUppercase === void 0) { operatorUppercase = false; }
        /** @type {?} */
        var res = '';
        if (Utils.isNullOrUndefined(items) || !items.length) {
            return res;
        }
        try {
            for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                if (res.length) {
                    if (Utils.isNotNullNorUndefined(operator)) {
                        /** @type {?} */
                        var operatorString = Utils.getOperatorString(operator, operatorUppercase);
                        res += " " + operatorString + " ";
                    }
                    else {
                        res += ',';
                    }
                }
                if (Utils.isNotNullNorUndefined(operator) && operator === OperatorLogical.NOT) {
                    /** @type {?} */
                    var operatorString = Utils.getOperatorString(operator, operatorUppercase);
                    res += operatorString + " ";
                }
                res += item;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (Utils.isNotNullNorUndefined(operator)) {
            return "(" + res + ")";
        }
        return res;
        var e_2, _a;
    };
    /**
     * @param {?} operator
     * @param {?} operatorUppercase
     * @return {?}
     */
    Utils.getOperatorString = /**
     * @param {?} operator
     * @param {?} operatorUppercase
     * @return {?}
     */
    function (operator, operatorUppercase) {
        /** @type {?} */
        var operatorString = OperatorLogical[operator].toLowerCase();
        if (Utils.isNotNullNorUndefined(operatorUppercase) && operatorUppercase) {
            operatorString = operatorString.toUpperCase();
        }
        return operatorString;
    };
    return Utils;
}());
export { Utils };

//# sourceMappingURL=data:application/json;base64,