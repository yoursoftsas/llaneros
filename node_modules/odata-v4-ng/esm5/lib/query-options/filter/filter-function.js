/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../../utils/utils';
import { FilterHasProperty } from './filter-has-property';
import { QuotedString } from '../../odata-query/quoted-string';
var FilterFunction = /** @class */ (function (_super) {
    tslib_1.__extends(FilterFunction, _super);
    function FilterFunction(functionName, property, value) {
        var _this = _super.call(this, property) || this;
        Utils.requireNotNullNorUndefined(functionName, 'functionName');
        Utils.requireNotEmpty(functionName, 'functionName');
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotEmpty(property, 'property');
        _this.functionName = functionName;
        _this.property = property;
        _this.value = value;
        return _this;
    }
    /**
     * @return {?}
     */
    FilterFunction.prototype.toString = /**
     * @return {?}
     */
    function () {
        if (Utils.isNotNullNorUndefined(this.property) && Utils.isNotNullNorUndefined(this.value)) {
            return this.functionName + "(" + this.property + "," + Utils.getValueURI(this.value, false) + ")";
        }
        else if (Utils.isNotNullNorUndefined(this.property)) {
            return this.functionName + "(" + this.property + ")";
        }
        else if (Utils.isNotNullNorUndefined(this.value)) {
            return this.functionName + "(" + Utils.getValueURI(this.value, false) + ")";
        }
        else {
            return this.functionName + "()";
        }
    };
    /**
     * @return {?}
     */
    FilterFunction.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNullOrUndefined(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.property)
            && Utils.isNotNullNorUndefined(this.value) && Utils.isEmpty(this.value)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.value)
            && Utils.isNotNullNorUndefined(this.property) && !this.property.length) {
            return true;
        }
        return false;
    };
    return FilterFunction;
}(FilterHasProperty));
export { FilterFunction };
if (false) {
    /** @type {?} */
    FilterFunction.prototype.functionName;
    /** @type {?} */
    FilterFunction.prototype.value;
}
var FilterFunctionString = /** @class */ (function (_super) {
    tslib_1.__extends(FilterFunctionString, _super);
    function FilterFunctionString(functionName, property, value) {
        return _super.call(this, functionName, property, typeof (value) === 'string'
            ? new QuotedString(value)
            : value instanceof FilterFunctionString ? value.toString() : value) || this;
    }
    return FilterFunctionString;
}(FilterFunction));
export { FilterFunctionString };
var FilterContains = /** @class */ (function (_super) {
    tslib_1.__extends(FilterContains, _super);
    function FilterContains(property, value) {
        var _this = _super.call(this, 'contains', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterContains;
}(FilterFunctionString));
export { FilterContains };
var FilterEndswith = /** @class */ (function (_super) {
    tslib_1.__extends(FilterEndswith, _super);
    function FilterEndswith(property, value) {
        var _this = _super.call(this, 'endswith', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterEndswith;
}(FilterFunctionString));
export { FilterEndswith };
var FilterStartswith = /** @class */ (function (_super) {
    tslib_1.__extends(FilterStartswith, _super);
    function FilterStartswith(property, value) {
        var _this = _super.call(this, 'startswith', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterStartswith;
}(FilterFunctionString));
export { FilterStartswith };
var FilterLength = /** @class */ (function (_super) {
    tslib_1.__extends(FilterLength, _super);
    function FilterLength(property) {
        return _super.call(this, 'length', property) || this;
    }
    return FilterLength;
}(FilterFunctionString));
export { FilterLength };
var FilterIndexof = /** @class */ (function (_super) {
    tslib_1.__extends(FilterIndexof, _super);
    function FilterIndexof(property, value) {
        var _this = _super.call(this, 'indexof', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterIndexof;
}(FilterFunctionString));
export { FilterIndexof };
var FilterSubstring = /** @class */ (function (_super) {
    tslib_1.__extends(FilterSubstring, _super);
    function FilterSubstring(property, value) {
        var _this = _super.call(this, 'substring', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterSubstring;
}(FilterFunctionString));
export { FilterSubstring };
var FilterTolower = /** @class */ (function (_super) {
    tslib_1.__extends(FilterTolower, _super);
    function FilterTolower(property) {
        return _super.call(this, 'tolower', property) || this;
    }
    return FilterTolower;
}(FilterFunctionString));
export { FilterTolower };
var FilterToupper = /** @class */ (function (_super) {
    tslib_1.__extends(FilterToupper, _super);
    function FilterToupper(property) {
        return _super.call(this, 'toupper', property) || this;
    }
    return FilterToupper;
}(FilterFunctionString));
export { FilterToupper };
var FilterTrim = /** @class */ (function (_super) {
    tslib_1.__extends(FilterTrim, _super);
    function FilterTrim(property) {
        return _super.call(this, 'trim', property) || this;
    }
    return FilterTrim;
}(FilterFunctionString));
export { FilterTrim };
var FilterConcat = /** @class */ (function (_super) {
    tslib_1.__extends(FilterConcat, _super);
    function FilterConcat(property, value) {
        var _this = _super.call(this, 'concat', property, value) || this;
        Utils.requireNotNullNorUndefined(value, 'value');
        Utils.requireNotEmpty(value, 'value');
        return _this;
    }
    return FilterConcat;
}(FilterFunctionString));
export { FilterConcat };

//# sourceMappingURL=data:application/json;base64,