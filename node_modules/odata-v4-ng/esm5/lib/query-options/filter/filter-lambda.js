/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../../utils/utils';
import { Filter } from './filter';
import { FilterHasFilter } from './filter-has-filter';
import { FilterHasProperty } from './filter-has-property';
/** @enum {number} */
var LambdaOperator = {
    ANY: 0, ALL: 1,
};
export { LambdaOperator };
LambdaOperator[LambdaOperator.ANY] = 'ANY';
LambdaOperator[LambdaOperator.ALL] = 'ALL';
/** @enum {number} */
var LambdaCollection = {
    PROPERTY_COLLECTION: 0, ENTITY_SET: 1,
};
export { LambdaCollection };
LambdaCollection[LambdaCollection.PROPERTY_COLLECTION] = 'PROPERTY_COLLECTION';
LambdaCollection[LambdaCollection.ENTITY_SET] = 'ENTITY_SET';
var FilterLambda = /** @class */ (function (_super) {
    tslib_1.__extends(FilterLambda, _super);
    function FilterLambda(lambdaCollection, propertyOrEntitySet, lambdaOperator, filter) {
        var _this = _super.call(this, filter) || this;
        Utils.requireNotNullNorUndefined(lambdaCollection, 'lambdaCollection');
        Utils.requireNotNullNorUndefined(propertyOrEntitySet, 'propertyOrEntitySet');
        Utils.requireNotNullNorUndefined(lambdaOperator, 'lambdaOperator');
        Utils.requireNotNullNorUndefined(filter, 'filter');
        if (lambdaCollection === LambdaCollection.PROPERTY_COLLECTION) {
            _this.checkProperty(propertyOrEntitySet, filter);
        }
        _this.lambdaCollection = lambdaCollection;
        _this.propertyOrEntitySet = propertyOrEntitySet;
        _this.lambdaOperator = lambdaOperator;
        return _this;
    }
    /**
     * @return {?}
     */
    FilterLambda.prototype.toString = /**
     * @return {?}
     */
    function () {
        switch (this.lambdaCollection) {
            case LambdaCollection.PROPERTY_COLLECTION:
                this.replaceProperty(this.filter);
                return this.propertyOrEntitySet + "/" + LambdaOperator[this.lambdaOperator].toLowerCase() + "(x:" + this.filter.toString() + ")";
            case LambdaCollection.ENTITY_SET:
                return this.propertyOrEntitySet + "/" + LambdaOperator[this.lambdaOperator].toLowerCase() + "(x:x/" + this.filter.toString() + ")";
            default:
                throw new Error('unknown lambdaCollection: ' + this.lambdaCollection);
        }
    };
    /**
     * @return {?}
     */
    FilterLambda.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (Utils.isNullOrUndefined(this.lambdaCollection)
            && Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNullOrUndefined(this.lambdaOperator)
            && Utils.isNullOrUndefined(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.propertyOrEntitySet)
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        if (Utils.isNullOrUndefined(this.filter)
            && Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length) {
            return true;
        }
        if (Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length
            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} propertyOrEntitySet
     * @param {?} filter
     * @return {?}
     */
    FilterLambda.prototype.checkProperty = /**
     * @param {?} propertyOrEntitySet
     * @param {?} filter
     * @return {?}
     */
    function (propertyOrEntitySet, filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            if (propertyOrEntitySet !== filter.getProperty()) {
                throw new Error('lambda property to filter must match inner filters property');
            }
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            var filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                try {
                    for (var filterChild_1 = tslib_1.__values(filterChild), filterChild_1_1 = filterChild_1.next(); !filterChild_1_1.done; filterChild_1_1 = filterChild_1.next()) {
                        var f = filterChild_1_1.value;
                        this.replaceProperty(f);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (filterChild_1_1 && !filterChild_1_1.done && (_a = filterChild_1.return)) _a.call(filterChild_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        var e_1, _a;
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    FilterLambda.prototype.replaceProperty = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        if (Utils.isNullOrUndefined(filter)) {
            return;
        }
        if (filter instanceof FilterHasProperty) {
            filter.setProperty('x');
        }
        if (filter instanceof FilterHasFilter) {
            /** @type {?} */
            var filterChild = filter.getFilter();
            if (filterChild instanceof Filter) {
                this.replaceProperty(filterChild);
            }
            else {
                try {
                    for (var filterChild_2 = tslib_1.__values(filterChild), filterChild_2_1 = filterChild_2.next(); !filterChild_2_1.done; filterChild_2_1 = filterChild_2.next()) {
                        var f = filterChild_2_1.value;
                        this.replaceProperty(f);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (filterChild_2_1 && !filterChild_2_1.done && (_a = filterChild_2.return)) _a.call(filterChild_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        var e_2, _a;
    };
    return FilterLambda;
}(FilterHasFilter));
export { FilterLambda };
if (false) {
    /** @type {?} */
    FilterLambda.prototype.lambdaCollection;
    /** @type {?} */
    FilterLambda.prototype.propertyOrEntitySet;
    /** @type {?} */
    FilterLambda.prototype.lambdaOperator;
}

//# sourceMappingURL=data:application/json;base64,