/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../../utils/utils';
import { OperatorComparison } from '../operator';
import { Filter } from './filter';
import { FilterHasProperty } from './filter-has-property';
var FilterComparison = /** @class */ (function (_super) {
    tslib_1.__extends(FilterComparison, _super);
    function FilterComparison(property, operator, value) {
        var _this = _super.call(this, property) || this;
        Utils.requireNotNullNorUndefined(property, 'property');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        Utils.requireNotUndefined(value, 'value');
        _this.operator = operator;
        _this.value = value;
        return _this;
    }
    /**
     * @return {?}
     */
    FilterComparison.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.property + " " + OperatorComparison[this.operator].toLowerCase() + " " + Utils.getValueURI(this.value, false);
    };
    /**
     * @return {?}
     */
    FilterComparison.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return (Utils.isNullOrUndefined(this.property) || !this.property.length)
            && Utils.isNullOrUndefined(this.operator)
            && Utils.isNullOrUndefined(this.value) || (this.value instanceof Filter && !this.value.isEmpty() || this.value instanceof Array && !this.value.length);
    };
    return FilterComparison;
}(FilterHasProperty));
export { FilterComparison };
if (false) {
    /** @type {?} */
    FilterComparison.prototype.operator;
    /** @type {?} */
    FilterComparison.prototype.value;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbXBhcmlzb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vZGF0YS12NC1uZy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1vcHRpb25zL2ZpbHRlci9maWx0ZXItY29tcGFyaXNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUxQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxJQUFBO0lBQXNDLDRDQUFpQjtJQUluRCwwQkFBWSxRQUFnQixFQUFFLFFBQTRCLEVBQUUsS0FBK0M7UUFBM0csWUFDSSxrQkFBTSxRQUFRLENBQUMsU0FNbEI7UUFMRyxLQUFLLENBQUMsMEJBQTBCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdkQsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxQyxLQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7S0FDdEI7Ozs7SUFFRCxtQ0FBUTs7O0lBQVI7UUFDSSxNQUFNLENBQUksSUFBSSxDQUFDLFFBQVEsU0FBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLFNBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBRyxDQUFDO0tBQ3hIOzs7O0lBRUQsa0NBQU87OztJQUFQO1FBQ0ksTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2VBQ2pFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2VBQ3RDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssWUFBWSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzlKOzJCQTNCTDtFQU1zQyxpQkFBaUIsRUFzQnRELENBQUE7QUF0QkQsNEJBc0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBRdW90ZWRTdHJpbmcgfSBmcm9tICcuLi8uLi9vZGF0YS1xdWVyeS9xdW90ZWQtc3RyaW5nJztcbmltcG9ydCB7IE9wZXJhdG9yQ29tcGFyaXNvbiB9IGZyb20gJy4uL29wZXJhdG9yJztcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IEZpbHRlckhhc1Byb3BlcnR5IH0gZnJvbSAnLi9maWx0ZXItaGFzLXByb3BlcnR5JztcblxuZXhwb3J0IGNsYXNzIEZpbHRlckNvbXBhcmlzb24gZXh0ZW5kcyBGaWx0ZXJIYXNQcm9wZXJ0eSBpbXBsZW1lbnRzIEZpbHRlciB7XG4gICAgcHJpdmF0ZSBvcGVyYXRvcjogT3BlcmF0b3JDb21wYXJpc29uO1xuICAgIHByaXZhdGUgdmFsdWU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnR5OiBzdHJpbmcsIG9wZXJhdG9yOiBPcGVyYXRvckNvbXBhcmlzb24sIHZhbHVlOiBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgUXVvdGVkU3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnR5KTtcbiAgICAgICAgVXRpbHMucmVxdWlyZU5vdE51bGxOb3JVbmRlZmluZWQocHJvcGVydHksICdwcm9wZXJ0eScpO1xuICAgICAgICBVdGlscy5yZXF1aXJlTm90TnVsbE5vclVuZGVmaW5lZChvcGVyYXRvciwgJ29wZXJhdG9yJyk7XG4gICAgICAgIFV0aWxzLnJlcXVpcmVOb3RVbmRlZmluZWQodmFsdWUsICd2YWx1ZScpO1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5wcm9wZXJ0eX0gJHtPcGVyYXRvckNvbXBhcmlzb25bdGhpcy5vcGVyYXRvcl0udG9Mb3dlckNhc2UoKX0gJHtVdGlscy5nZXRWYWx1ZVVSSSh0aGlzLnZhbHVlLCBmYWxzZSl9YDtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFV0aWxzLmlzTnVsbE9yVW5kZWZpbmVkKHRoaXMucHJvcGVydHkpIHx8ICF0aGlzLnByb3BlcnR5Lmxlbmd0aClcbiAgICAgICAgICAgICYmIFV0aWxzLmlzTnVsbE9yVW5kZWZpbmVkKHRoaXMub3BlcmF0b3IpXG4gICAgICAgICAgICAmJiBVdGlscy5pc051bGxPclVuZGVmaW5lZCh0aGlzLnZhbHVlKSB8fCAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIEZpbHRlciAmJiAhdGhpcy52YWx1ZS5pc0VtcHR5KCkgfHwgdGhpcy52YWx1ZSBpbnN0YW5jZW9mIEFycmF5ICYmICF0aGlzLnZhbHVlLmxlbmd0aCk7XG4gICAgfVxufVxuIl19