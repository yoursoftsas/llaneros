/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../../utils/utils';
import { FilterHasFilter } from './filter-has-filter';
var FilterLogical = /** @class */ (function (_super) {
    tslib_1.__extends(FilterLogical, _super);
    function FilterLogical(filters, operator) {
        var _this = _super.call(this, filters) || this;
        Utils.requireNotNullNorUndefined(filters, 'filters');
        Utils.requireNotEmpty(filters, 'filters');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        _this.operator = operator;
        return _this;
    }
    /**
     * @return {?}
     */
    FilterLogical.prototype.toString = /**
     * @return {?}
     */
    function () {
        if (this.filter instanceof Array) {
            return Utils.toString(this.filter, this.operator);
        }
        return this.filter.toString();
    };
    /**
     * @return {?}
     */
    FilterLogical.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (Utils.isNullOrUndefined(this.filter)) {
            return true;
        }
        try {
            for (var _a = tslib_1.__values(/** @type {?} */ (this.filter)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var filter = _b.value;
                if (filter.isEmpty()) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
        var e_1, _c;
    };
    return FilterLogical;
}(FilterHasFilter));
export { FilterLogical };
if (false) {
    /** @type {?} */
    FilterLogical.prototype.operator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWxvZ2ljYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vZGF0YS12NC1uZy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1vcHRpb25zL2ZpbHRlci9maWx0ZXItbG9naWNhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUcxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsSUFBQTtJQUFtQyx5Q0FBZTtJQUc5Qyx1QkFBWSxPQUFpQixFQUFFLFFBQXlCO1FBQXhELFlBQ0ksa0JBQU0sT0FBTyxDQUFDLFNBS2pCO1FBSkcsS0FBSyxDQUFDLDBCQUEwQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNyRCxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELEtBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOztLQUM1Qjs7OztJQUVELGdDQUFROzs7SUFBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyRDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ2pDOzs7O0lBRUQsK0JBQU87OztJQUFQO1FBQ0ksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmOztZQUNELEdBQUcsQ0FBQyw2Q0FBMkIsSUFBSSxDQUFDLE1BQU07Z0JBQXJDLElBQU0sTUFBTSxXQUFBO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUM7aUJBQ2Y7YUFDSjs7Ozs7Ozs7O1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQzs7S0FDaEI7d0JBakNMO0VBS21DLGVBQWUsRUE2QmpELENBQUE7QUE3QkQseUJBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBPcGVyYXRvckxvZ2ljYWwgfSBmcm9tICcuLi9vcGVyYXRvcic7XG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuL2ZpbHRlcic7XG5pbXBvcnQgeyBGaWx0ZXJIYXNGaWx0ZXIgfSBmcm9tICcuL2ZpbHRlci1oYXMtZmlsdGVyJztcblxuZXhwb3J0IGNsYXNzIEZpbHRlckxvZ2ljYWwgZXh0ZW5kcyBGaWx0ZXJIYXNGaWx0ZXIgaW1wbGVtZW50cyBGaWx0ZXIge1xuICAgIHByaXZhdGUgb3BlcmF0b3I6IE9wZXJhdG9yTG9naWNhbDtcblxuICAgIGNvbnN0cnVjdG9yKGZpbHRlcnM6IEZpbHRlcltdLCBvcGVyYXRvcjogT3BlcmF0b3JMb2dpY2FsKSB7XG4gICAgICAgIHN1cGVyKGZpbHRlcnMpO1xuICAgICAgICBVdGlscy5yZXF1aXJlTm90TnVsbE5vclVuZGVmaW5lZChmaWx0ZXJzLCAnZmlsdGVycycpO1xuICAgICAgICBVdGlscy5yZXF1aXJlTm90RW1wdHkoZmlsdGVycywgJ2ZpbHRlcnMnKTtcbiAgICAgICAgVXRpbHMucmVxdWlyZU5vdE51bGxOb3JVbmRlZmluZWQob3BlcmF0b3IsICdvcGVyYXRvcicpO1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy50b1N0cmluZyh0aGlzLmZpbHRlciwgdGhpcy5vcGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKFV0aWxzLmlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuZmlsdGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgPEZpbHRlcltdPnRoaXMuZmlsdGVyKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXX0=