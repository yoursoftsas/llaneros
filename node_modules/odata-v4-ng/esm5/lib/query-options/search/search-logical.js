/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from '../../utils/utils';
import { OperatorLogical } from '../operator';
import { Search } from './search';
var SearchLogical = /** @class */ (function (_super) {
    tslib_1.__extends(SearchLogical, _super);
    function SearchLogical(values, operator) {
        var _this = _super.call(this) || this;
        _this.values = values;
        _this.operator = operator;
        Utils.requireNotNullNorUndefined(values, 'values');
        Utils.requireNotNullNorUndefined(operator, 'operator');
        Utils.requireNotEmpty(values, 'values');
        if (operator === OperatorLogical.NOT && values.length !== 1) {
            throw new Error('operator ' + OperatorLogical[operator] + ' requires a single value');
        }
        return _this;
    }
    /**
     * @return {?}
     */
    SearchLogical.prototype.toString = /**
     * @return {?}
     */
    function () {
        return Utils.toString(this.values, this.operator, true);
    };
    /**
     * @return {?}
     */
    SearchLogical.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (Utils.isNullOrUndefined(this.values)) {
            return true;
        }
        try {
            for (var _a = tslib_1.__values(this.values), _b = _a.next(); !_b.done; _b = _a.next()) {
                var value = _b.value;
                if (value.isEmpty()) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
        var e_1, _c;
    };
    return SearchLogical;
}(Search));
export { SearchLogical };
if (false) {
    /** @type {?} */
    SearchLogical.prototype.values;
    /** @type {?} */
    SearchLogical.prototype.operator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWxvZ2ljYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vZGF0YS12NC1uZy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1vcHRpb25zL3NlYXJjaC9zZWFyY2gtbG9naWNhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsSUFBQTtJQUFtQyx5Q0FBTTtJQUNyQyx1QkFBb0IsTUFBZ0IsRUFBVSxRQUF5QjtRQUF2RSxZQUNJLGlCQUFPLFNBUVY7UUFUbUIsWUFBTSxHQUFOLE1BQU0sQ0FBVTtRQUFVLGNBQVEsR0FBUixRQUFRLENBQWlCO1FBRW5FLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2RCxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV4QyxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssZUFBZSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLDBCQUEwQixDQUFDLENBQUM7U0FDekY7O0tBQ0o7Ozs7SUFFRCxnQ0FBUTs7O0lBQVI7UUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDM0Q7Ozs7SUFFRCwrQkFBTzs7O0lBQVA7UUFDSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2Y7O1lBQ0QsR0FBRyxDQUFDLENBQWdCLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFBLGdCQUFBO2dCQUExQixJQUFNLEtBQUssV0FBQTtnQkFDWixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDO2lCQUNmO2FBQ0o7Ozs7Ozs7OztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7O0tBQ2hCO3dCQTlCTDtFQUltQyxNQUFNLEVBMkJ4QyxDQUFBO0FBM0JELHlCQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgT3BlcmF0b3JMb2dpY2FsIH0gZnJvbSAnLi4vb3BlcmF0b3InO1xuaW1wb3J0IHsgU2VhcmNoIH0gZnJvbSAnLi9zZWFyY2gnO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoTG9naWNhbCBleHRlbmRzIFNlYXJjaCB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2YWx1ZXM6IFNlYXJjaFtdLCBwcml2YXRlIG9wZXJhdG9yOiBPcGVyYXRvckxvZ2ljYWwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgVXRpbHMucmVxdWlyZU5vdE51bGxOb3JVbmRlZmluZWQodmFsdWVzLCAndmFsdWVzJyk7XG4gICAgICAgIFV0aWxzLnJlcXVpcmVOb3ROdWxsTm9yVW5kZWZpbmVkKG9wZXJhdG9yLCAnb3BlcmF0b3InKTtcbiAgICAgICAgVXRpbHMucmVxdWlyZU5vdEVtcHR5KHZhbHVlcywgJ3ZhbHVlcycpO1xuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gT3BlcmF0b3JMb2dpY2FsLk5PVCAmJiB2YWx1ZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wZXJhdG9yICcgKyBPcGVyYXRvckxvZ2ljYWxbb3BlcmF0b3JdICsgJyByZXF1aXJlcyBhIHNpbmdsZSB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnRvU3RyaW5nKHRoaXMudmFsdWVzLCB0aGlzLm9wZXJhdG9yLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoVXRpbHMuaXNOdWxsT3JVbmRlZmluZWQodGhpcy52YWx1ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMudmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==