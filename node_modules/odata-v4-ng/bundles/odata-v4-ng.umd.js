(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('angular2-uuid'), require('rxjs/operators'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('odata-v4-ng', ['exports', '@angular/common/http', 'angular2-uuid', 'rxjs/operators', '@angular/core', '@angular/common'], factory) :
    (factory((global['odata-v4-ng'] = {}),global.ng.common.http,null,global.rxjs.operators,global.ng.core,global.ng.common));
}(this, (function (exports,http,angular2Uuid,operators,core,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var OperatorComparison = {
        EQ: 0, NE: 1, GT: 2, GE: 3, LT: 4, LE: 5, HAS: 6,
    };
    OperatorComparison[OperatorComparison.EQ] = 'EQ';
    OperatorComparison[OperatorComparison.NE] = 'NE';
    OperatorComparison[OperatorComparison.GT] = 'GT';
    OperatorComparison[OperatorComparison.GE] = 'GE';
    OperatorComparison[OperatorComparison.LT] = 'LT';
    OperatorComparison[OperatorComparison.LE] = 'LE';
    OperatorComparison[OperatorComparison.HAS] = 'HAS';
    /** @enum {number} */
    var OperatorLogical = {
        AND: 0, OR: 1, NOT: 2,
    };
    OperatorLogical[OperatorLogical.AND] = 'AND';
    OperatorLogical[OperatorLogical.OR] = 'OR';
    OperatorLogical[OperatorLogical.NOT] = 'NOT';
    /** @enum {number} */
    var OperatorArithmetic = {
        ADD: 0, SUB: 1, MUL: 2, DIV: 3, MOD: 4,
    };
    OperatorArithmetic[OperatorArithmetic.ADD] = 'ADD';
    OperatorArithmetic[OperatorArithmetic.SUB] = 'SUB';
    OperatorArithmetic[OperatorArithmetic.MUL] = 'MUL';
    OperatorArithmetic[OperatorArithmetic.DIV] = 'DIV';
    OperatorArithmetic[OperatorArithmetic.MOD] = 'MOD';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var QuotedString = (function () {
        function QuotedString(value) {
            this.value = value;
        }
        /**
         * @return {?}
         */
        QuotedString.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return QuotedString;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Utils = (function () {
        function Utils() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.isNull = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value === null;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.isUndefined = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value === undefined;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.isNullOrUndefined = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Utils.isNull(value) || Utils.isUndefined(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.isNotNullNorUndefined = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return !Utils.isNull(value) && !Utils.isUndefined(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.isEmpty = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (Utils.isNullOrUndefined(value)
                    || typeof (value) === 'string' && !value.length
                    || value instanceof Array && !value.length
                    || typeof (value.isEmpty) === 'function' && value.isEmpty()) {
                    return true;
                }
                if (value instanceof Array && value) {
                    try {
                        for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                            var v = value_1_1.value;
                            if (!Utils.isEmpty(v)) {
                                return false;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (value_1_1 && !value_1_1.done && (_a = value_1.return))
                                _a.call(value_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    return true;
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNull = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (fieldValue !== null) {
                    throw new Error(fieldName + ' must be null');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireUndefined = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (fieldValue !== undefined) {
                    throw new Error(fieldName + ' must be undefined');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNotNull = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (fieldValue === null) {
                    throw new Error(fieldName + ' cannot be null');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNotUndefined = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (fieldValue === undefined) {
                    throw new Error(fieldName + ' cannot be undefined');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNotNullNorUndefined = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                Utils.requireNotNull(fieldValue, fieldName);
                Utils.requireNotUndefined(fieldValue, fieldName);
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNullOrUndefined = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (!Utils.isNull(fieldValue) && !Utils.isUndefined(fieldValue)) {
                    throw new Error(fieldName + ' must be null or undefined');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNotEmpty = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (Utils.isEmpty(fieldValue)) {
                    throw new Error(fieldName + ' cannot be empty');
                }
            };
        /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
        Utils.requireNotNegative = /**
         * @param {?} fieldValue
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldValue, fieldName) {
                if (fieldValue < 0) {
                    throw new Error(fieldName + ' cannot be negative');
                }
            };
        /**
         * @param {?} path
         * @param {?} segment
         * @return {?}
         */
        Utils.appendSegment = /**
         * @param {?} path
         * @param {?} segment
         * @return {?}
         */
            function (path, segment) {
                Utils.requireNotNullNorUndefined(path, 'path');
                Utils.requireNotNullNorUndefined(segment, 'segment');
                if (!path.endsWith('/')) {
                    path += '/';
                }
                return path + segment;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Utils.removeEndingSeparator = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                Utils.requireNotNullNorUndefined(value, 'value');
                if (value.endsWith('/')) {
                    if (value.length === 1) {
                        return '';
                    }
                    return value.substring(0, value.length - 1);
                }
                return value;
            };
        /**
         * @param {?} value
         * @param {?} encodeURI
         * @return {?}
         */
        Utils.getValueURI = /**
         * @param {?} value
         * @param {?} encodeURI
         * @return {?}
         */
            function (value, encodeURI) {
                Utils.requireNotUndefined(value, 'value');
                Utils.requireNotNullNorUndefined(encodeURI, 'encodeURI');
                /** @type {?} */
                var res = value;
                if (typeof (res) === 'string') {
                    // encode uri component
                    if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                        res = encodeURIComponent(res);
                    }
                }
                else if (res instanceof QuotedString) {
                    // escape single quote
                    res = res.toString().replace(/'/g, '\'\'');
                    // encode uri component
                    if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {
                        res = encodeURIComponent(res);
                    }
                    // add start/ending quotes
                    res = '\'' + res + '\'';
                }
                // boolean, number
                return res;
            };
        /**
         * @param {?} items
         * @param {?=} operator
         * @param {?=} operatorUppercase
         * @return {?}
         */
        Utils.toString = /**
         * @param {?} items
         * @param {?=} operator
         * @param {?=} operatorUppercase
         * @return {?}
         */
            function (items, operator, operatorUppercase) {
                if (operatorUppercase === void 0) {
                    operatorUppercase = false;
                }
                /** @type {?} */
                var res = '';
                if (Utils.isNullOrUndefined(items) || !items.length) {
                    return res;
                }
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        if (res.length) {
                            if (Utils.isNotNullNorUndefined(operator)) {
                                /** @type {?} */
                                var operatorString = Utils.getOperatorString(operator, operatorUppercase);
                                res += " " + operatorString + " ";
                            }
                            else {
                                res += ',';
                            }
                        }
                        if (Utils.isNotNullNorUndefined(operator) && operator === OperatorLogical.NOT) {
                            /** @type {?} */
                            var operatorString = Utils.getOperatorString(operator, operatorUppercase);
                            res += operatorString + " ";
                        }
                        res += item;
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                            _a.call(items_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                if (Utils.isNotNullNorUndefined(operator)) {
                    return "(" + res + ")";
                }
                return res;
                var e_2, _a;
            };
        /**
         * @param {?} operator
         * @param {?} operatorUppercase
         * @return {?}
         */
        Utils.getOperatorString = /**
         * @param {?} operator
         * @param {?} operatorUppercase
         * @return {?}
         */
            function (operator, operatorUppercase) {
                /** @type {?} */
                var operatorString = OperatorLogical[operator].toLowerCase();
                if (Utils.isNotNullNorUndefined(operatorUppercase) && operatorUppercase) {
                    operatorString = operatorString.toUpperCase();
                }
                return operatorString;
            };
        return Utils;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ODataQueryAbstract = (function () {
        function ODataQueryAbstract(odataService, serviceRoot) {
            Utils.requireNotNullNorUndefined(odataService, 'odataService');
            Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
            Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
            this.odataService = odataService;
            this.serviceRoot = serviceRoot;
            this.queryString = serviceRoot;
        }
        return ODataQueryAbstract;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var Method = {
        GET: 0, POST: 1, PUT: 2, PATCH: 3, DELETE: 4,
    };
    Method[Method.GET] = 'GET';
    Method[Method.POST] = 'POST';
    Method[Method.PUT] = 'PUT';
    Method[Method.PATCH] = 'PATCH';
    Method[Method.DELETE] = 'DELETE';
    var BatchRequest = (function () {
        function BatchRequest(method, odataQuery, body, httpOptions) {
            this.method = method;
            this.odataQuery = odataQuery;
            this.body = body;
            this.httpOptions = httpOptions;
        }
        return BatchRequest;
    }());
    var ODataQueryBatch = (function (_super) {
        __extends(ODataQueryBatch, _super);
        function ODataQueryBatch(odataService, serviceRoot) {
            var _this = _super.call(this, odataService, serviceRoot) || this;
            Utils.requireNotNullNorUndefined(odataService, 'odataService');
            Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
            Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
            _this.queryString = Utils.appendSegment(serviceRoot, ODataQueryBatch.$BATCH);
            _this.requests = [];
            _this.batchBoundary = ODataQueryBatch.BATCH_PREFIX + _this.getUUID();
            _this.changesetBoundary = null;
            _this.changesetID = 1;
            return _this;
        }
        /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.get = /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, httpOptions) {
                Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
                this.requests.push(new BatchRequest(Method.GET, odataQuery, undefined, httpOptions));
                return this;
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.post = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, httpOptions) {
                Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
                this.requests.push(new BatchRequest(Method.POST, odataQuery, body, httpOptions));
                return this;
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.put = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, httpOptions) {
                Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
                this.requests.push(new BatchRequest(Method.PUT, odataQuery, body, httpOptions));
                return this;
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.patch = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, httpOptions) {
                Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
                this.requests.push(new BatchRequest(Method.PATCH, odataQuery, body, httpOptions));
                return this;
            };
        /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.delete = /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, httpOptions) {
                Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');
                this.requests.push(new BatchRequest(Method.DELETE, odataQuery, undefined, httpOptions));
                return this;
            };
        /**
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.execute = /**
         * @param {?=} httpOptions
         * @return {?}
         */
            function (httpOptions) {
                // set headers
                if (Utils.isNullOrUndefined(httpOptions)) {
                    httpOptions = {};
                }
                if (Utils.isNullOrUndefined(httpOptions.headers)) {
                    httpOptions.headers = new http.HttpHeaders();
                }
                httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ODATA_VERSION, ODataQueryBatch.VERSION_4_0);
                httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.CONTENT_TYPE, ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.batchBoundary);
                httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ACCEPT, ODataQueryBatch.MULTIPART_MIXED);
                // send request
                return this.odataService.post(this, this.getBody(), httpOptions);
            };
        /**
         * @return {?}
         */
        ODataQueryBatch.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.queryString;
            };
        /**
         * @return {?}
         */
        ODataQueryBatch.prototype.getBody = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var res = '';
                try {
                    for (var _a = __values(this.requests), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var request = _b.value;
                        /** @type {?} */
                        var method = request.method;
                        /** @type {?} */
                        var odataQuery = request.odataQuery;
                        /** @type {?} */
                        var httpOptions = request.httpOptions;
                        /** @type {?} */
                        var body = request.body;
                        // if method is GET and there is a changeset boundary open then close it
                        if (method === Method.GET && Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                            res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                            this.changesetBoundary = null;
                        }
                        // if there is no changeset boundary open then open a batch boundary
                        if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                            res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.NEWLINE;
                        }
                        // if method is not GET and there is no changeset boundary open then open a changeset boundary
                        if (method !== Method.GET) {
                            if (Utils.isNullOrUndefined(this.changesetBoundary)) {
                                this.changesetBoundary = ODataQueryBatch.CHANGESET_PREFIX + this.getUUID();
                                res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.changesetBoundary + ODataQueryBatch.NEWLINE;
                                res += ODataQueryBatch.NEWLINE;
                            }
                            res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.NEWLINE;
                        }
                        res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_HTTP + ODataQueryBatch.NEWLINE;
                        res += ODataQueryBatch.CONTENT_TRANSFER_ENCODING + ': ' + ODataQueryBatch.BINARY + ODataQueryBatch.NEWLINE;
                        if (method !== Method.GET) {
                            res += ODataQueryBatch.CONTENT_ID + ': ' + this.changesetID++ + ODataQueryBatch.NEWLINE;
                        }
                        res += ODataQueryBatch.NEWLINE;
                        res += Method[method] + ' ' + odataQuery + ' ' + ODataQueryBatch.HTTP11 + ODataQueryBatch.NEWLINE;
                        res += this.getHeaders(method, httpOptions);
                        res += ODataQueryBatch.NEWLINE;
                        if (method === Method.GET || method === Method.DELETE) {
                            res += ODataQueryBatch.NEWLINE;
                        }
                        else {
                            res += JSON.stringify(body) + ODataQueryBatch.NEWLINE;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                if (res.length) {
                    if (Utils.isNotNullNorUndefined(this.changesetBoundary)) {
                        res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;
                        this.changesetBoundary = null;
                    }
                    res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX;
                }
                return res;
                var e_1, _c;
            };
        /**
         * @param {?} method
         * @param {?} httpOptions
         * @return {?}
         */
        ODataQueryBatch.prototype.getHeaders = /**
         * @param {?} method
         * @param {?} httpOptions
         * @return {?}
         */
            function (method, httpOptions) {
                /** @type {?} */
                var res = '';
                if (method === Method.POST || method === Method.PATCH || method === Method.PUT) {
                    res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_JSON + ODataQueryBatch.NEWLINE;
                }
                if (Utils.isNullOrUndefined(httpOptions) || Utils.isNullOrUndefined(httpOptions.headers)) {
                    return res;
                }
                try {
                    for (var _a = __values(httpOptions.headers.keys()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var key = _b.value;
                        res += key + ': ' + httpOptions.headers.getAll(key) + ODataQueryBatch.NEWLINE;
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return res;
                var e_2, _c;
            };
        /**
         * @return {?}
         */
        ODataQueryBatch.prototype.getUUID = /**
         * @return {?}
         */
            function () {
                return angular2Uuid.UUID.UUID();
            };
        ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX = '--';
        ODataQueryBatch.BATCH_PREFIX = 'batch_';
        ODataQueryBatch.CHANGESET_PREFIX = 'changeset_';
        ODataQueryBatch.NEWLINE = '\r\n';
        ODataQueryBatch.$BATCH = '$batch';
        ODataQueryBatch.HTTP11 = 'HTTP/1.1';
        ODataQueryBatch.ODATA_VERSION = 'OData-Version';
        ODataQueryBatch.CONTENT_TYPE = 'Content-Type';
        ODataQueryBatch.ACCEPT = 'Accept';
        ODataQueryBatch.CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';
        ODataQueryBatch.CONTENT_ID = 'Content-ID';
        ODataQueryBatch.VERSION_4_0 = '4.0';
        ODataQueryBatch.MULTIPART_MIXED = 'multipart/mixed';
        ODataQueryBatch.MULTIPART_MIXED_BOUNDARY = 'multipart/mixed;boundary=';
        ODataQueryBatch.APPLICATION_HTTP = 'application/http';
        ODataQueryBatch.BINARY = 'binary';
        ODataQueryBatch.APPLICATION_JSON = 'application/json';
        return ODataQueryBatch;
    }(ODataQueryAbstract));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterString = (function () {
        function FilterString(filter) {
            Utils.requireNotNullNorUndefined(filter, 'filter');
            Utils.requireNotEmpty(filter, 'filter');
            this.filter = filter;
        }
        /**
         * @return {?}
         */
        FilterString.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.filter;
            };
        /**
         * @return {?}
         */
        FilterString.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return Utils.isNullOrUndefined(this.filter) || !this.filter.length;
            };
        return FilterString;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Expand = (function () {
        function Expand(entitySet) {
            Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
            Utils.requireNotEmpty(entitySet, 'entitySet');
            this.entitySet = entitySet;
            this.queryOptions = new QueryOptions(Expand.SEPARATOR);
        }
        // QUERY OPTIONS
        /**
         * @param {?} select
         * @return {?}
         */
        Expand.prototype.select = /**
         * @param {?} select
         * @return {?}
         */
            function (select) {
                this.queryOptions.select(select);
                return this;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        Expand.prototype.filter = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                this.queryOptions.filter(filter);
                return this;
            };
        /**
         * @param {?} expand
         * @return {?}
         */
        Expand.prototype.expand = /**
         * @param {?} expand
         * @return {?}
         */
            function (expand) {
                this.queryOptions.expand(expand);
                return this;
            };
        /**
         * @param {?} orderby
         * @return {?}
         */
        Expand.prototype.orderby = /**
         * @param {?} orderby
         * @return {?}
         */
            function (orderby) {
                this.queryOptions.orderby(orderby);
                return this;
            };
        /**
         * @param {?} search
         * @return {?}
         */
        Expand.prototype.search = /**
         * @param {?} search
         * @return {?}
         */
            function (search) {
                this.queryOptions.search(search);
                return this;
            };
        /**
         * @param {?} skip
         * @return {?}
         */
        Expand.prototype.skip = /**
         * @param {?} skip
         * @return {?}
         */
            function (skip) {
                this.queryOptions.skip(skip);
                return this;
            };
        /**
         * @param {?} top
         * @return {?}
         */
        Expand.prototype.top = /**
         * @param {?} top
         * @return {?}
         */
            function (top) {
                this.queryOptions.top(top);
                return this;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Expand.prototype.customOption = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.queryOptions.customOption(key, value);
                return this;
            };
        /**
         * @return {?}
         */
        Expand.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var res = this.entitySet;
                if (!Utils.isEmpty(this.queryOptions)) {
                    res += '(' + this.queryOptions + ')';
                }
                return res;
            };
        /**
         * @return {?}
         */
        Expand.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return Utils.isEmpty(this.entitySet);
            };
        Expand.SEPARATOR = ';';
        return Expand;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var Order = {
        ASC: 0, DESC: 1,
    };
    Order[Order.ASC] = 'ASC';
    Order[Order.DESC] = 'DESC';
    var Orderby = (function () {
        function Orderby(property, order) {
            Utils.requireNotNullNorUndefined(property, 'property');
            this.property = property;
            this.order = order;
        }
        /**
         * @return {?}
         */
        Orderby.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var res = this.property;
                if (!Utils.isNullOrUndefined(this.order)) {
                    res += ' ' + Order[this.order].toLowerCase();
                }
                return res;
            };
        return Orderby;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var QueryOptions = (function () {
        function QueryOptions(separator) {
            Utils.requireNotNullNorUndefined(separator, 'separator');
            Utils.requireNotEmpty(separator, 'separator');
            this._separator = separator;
            this._select = null;
            this._filter = null;
            this._expand = null;
            this._orderby = null;
            this._search = null;
            this._skip = null;
            this._top = null;
            this._count = null;
            this._customOptions = null;
            this._format = null;
        }
        /**
         * @param {?} select
         * @return {?}
         */
        QueryOptions.prototype.select = /**
         * @param {?} select
         * @return {?}
         */
            function (select) {
                if (Utils.isNullOrUndefined(select) || Utils.isEmpty(select)) {
                    this._select = null;
                }
                else {
                    this._select = typeof (select) === 'string' ? [select] : select;
                }
                return this;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        QueryOptions.prototype.filter = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                if (Utils.isNullOrUndefined(filter) || Utils.isEmpty(filter)) {
                    this._filter = null;
                }
                else {
                    this._filter = typeof (filter) === 'string' ? new FilterString(filter) : filter;
                }
                return this;
            };
        /**
         * @param {?} expand
         * @return {?}
         */
        QueryOptions.prototype.expand = /**
         * @param {?} expand
         * @return {?}
         */
            function (expand) {
                if (Utils.isNullOrUndefined(expand) || Utils.isEmpty(expand)) {
                    this._expand = null;
                }
                else {
                    this._expand = typeof (expand) === 'string' ? [new Expand(expand)] : expand instanceof Expand ? [expand] : expand;
                }
                return this;
            };
        /**
         * @param {?} orderby
         * @return {?}
         */
        QueryOptions.prototype.orderby = /**
         * @param {?} orderby
         * @return {?}
         */
            function (orderby) {
                if (Utils.isNullOrUndefined(orderby) || Utils.isEmpty(orderby)) {
                    this._orderby = null;
                }
                else {
                    this._orderby = typeof (orderby) === 'string' ? [new Orderby(orderby)] : orderby;
                }
                return this;
            };
        /**
         * @param {?} search
         * @return {?}
         */
        QueryOptions.prototype.search = /**
         * @param {?} search
         * @return {?}
         */
            function (search) {
                this._search = search;
                return this;
            };
        /**
         * @param {?} skip
         * @return {?}
         */
        QueryOptions.prototype.skip = /**
         * @param {?} skip
         * @return {?}
         */
            function (skip) {
                Utils.requireNotNegative(skip, 'skip');
                this._skip = skip;
                return this;
            };
        /**
         * @param {?} top
         * @return {?}
         */
        QueryOptions.prototype.top = /**
         * @param {?} top
         * @return {?}
         */
            function (top) {
                Utils.requireNotNegative(top, 'top');
                this._top = top;
                return this;
            };
        /**
         * @param {?} count
         * @return {?}
         */
        QueryOptions.prototype.count = /**
         * @param {?} count
         * @return {?}
         */
            function (count) {
                this._count = count;
                return this;
            };
        /**
         * @param {?} format
         * @return {?}
         */
        QueryOptions.prototype.format = /**
         * @param {?} format
         * @return {?}
         */
            function (format) {
                this._format = format;
                return this;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        QueryOptions.prototype.customOption = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                Utils.requireNotNullNorUndefined(key, 'key');
                if (Utils.isNullOrUndefined(this._customOptions)) {
                    this._customOptions = new Map();
                }
                this._customOptions.set(key, value);
                return this;
            };
        /**
         * @return {?}
         */
        QueryOptions.prototype.toString = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var queryOptions = '';
                // add select
                if (!Utils.isNullOrUndefined(this._select) && !Utils.isEmpty(this._select)) {
                    queryOptions += '$select=';
                    if (typeof (this._select) === 'string') {
                        queryOptions += this._select;
                    }
                    else {
                        queryOptions += Utils.toString(this._select);
                    }
                }
                // add filter
                if (!Utils.isNullOrUndefined(this._filter) && !Utils.isEmpty(this._filter)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$filter=' + encodeURIComponent(this._filter.toString());
                }
                // add expand
                if (!Utils.isNullOrUndefined(this._expand) && !Utils.isEmpty(this._expand)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$expand=';
                    if (typeof (this._expand) === 'string') {
                        queryOptions += this._expand;
                    }
                    else {
                        queryOptions += Utils.toString(this._expand);
                    }
                }
                // add orderby
                if (!Utils.isNullOrUndefined(this._orderby) && !Utils.isEmpty(this._orderby)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$orderby=';
                    if (typeof (this._orderby) === 'string') {
                        queryOptions += this._orderby;
                    }
                    else {
                        queryOptions += Utils.toString(this._orderby);
                    }
                }
                // add search
                if (!Utils.isNullOrUndefined(this._search) && !Utils.isEmpty(this._search)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$search=' + encodeURIComponent(this._search.toString());
                }
                // add skip
                if (!Utils.isNullOrUndefined(this._skip) && !Utils.isEmpty(this._skip)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$skip=' + this._skip;
                }
                // add top
                if (!Utils.isNullOrUndefined(this._top) && !Utils.isEmpty(this._top)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$top=' + this._top;
                }
                // add count
                if (!Utils.isNullOrUndefined(this._count) && !Utils.isEmpty(this._count)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$count=' + this._count;
                }
                // add custom query options
                if (Utils.isNotNullNorUndefined(this._customOptions) && this._customOptions.size > 0) {
                    this._customOptions.forEach(function (value, key, map) {
                        if (Utils.isNotNullNorUndefined(key) && !Utils.isEmpty(key)
                            && Utils.isNotNullNorUndefined(value) && !Utils.isEmpty(value)) {
                            if (queryOptions.length) {
                                queryOptions += _this._separator;
                            }
                            queryOptions += key + '=' + encodeURIComponent(value);
                        }
                    });
                }
                // add format
                if (!Utils.isNullOrUndefined(this._format) && !Utils.isEmpty(this._format)) {
                    if (queryOptions.length) {
                        queryOptions += this._separator;
                    }
                    queryOptions += '$format=' + this._format;
                }
                return queryOptions;
            };
        /**
         * @return {?}
         */
        QueryOptions.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                for (var key in this) {
                    if (key === '_purpose' || key === '_separator') {
                        continue;
                    }
                    if (this.hasOwnProperty(key) && !Utils.isEmpty(this[key])) {
                        return false;
                    }
                }
                return true;
            };
        return QueryOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ODataQuery = (function (_super) {
        __extends(ODataQuery, _super);
        function ODataQuery(odataService, serviceRoot) {
            var _this = _super.call(this, odataService, serviceRoot) || this;
            Utils.requireNotNullNorUndefined(odataService, 'odataService');
            Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');
            Utils.requireNotEmpty(serviceRoot, 'serviceRoot');
            _this.queryOptions = new QueryOptions(ODataQuery.SEPARATOR);
            _this.segments = [];
            _this.lastSegment = null;
            return _this;
        }
        // QUERY SEGMENTS
        /**
         * @return {?}
         */
        ODataQuery.prototype.metadata = /**
         * @return {?}
         */
            function () {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.METADATA), ODataQuery.METADATA);
                if (this.segments.length) {
                    throw new Error('metadata segment cannot be appended to other segments');
                }
                this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$METADATA);
                this.addSegment(ODataQuery.METADATA);
                return this;
            };
        /**
         * @param {?} entitySet
         * @return {?}
         */
        ODataQuery.prototype.entitySet = /**
         * @param {?} entitySet
         * @return {?}
         */
            function (entitySet) {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.ENTITY_SET), ODataQuery.ENTITY_SET);
                Utils.requireNotNullNorUndefined(entitySet, 'entitySet');
                Utils.requireNotEmpty(entitySet, 'entitySet');
                this.queryString = Utils.appendSegment(this.queryString, entitySet);
                this.addSegment(ODataQuery.ENTITY_SET);
                return this;
            };
        /**
         * @param {?} entityKey
         * @return {?}
         */
        ODataQuery.prototype.entityKey = /**
         * @param {?} entityKey
         * @return {?}
         */
            function (entityKey) {
                if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
                    throw new Error('entityKey can only be appended to entitySet or navigationProperty');
                }
                Utils.requireNotNullNorUndefined(entityKey, 'entityKey');
                Utils.requireNotEmpty(entityKey, 'entityKey');
                entityKey = Utils.getValueURI(entityKey, true);
                this.queryString = Utils.removeEndingSeparator(this.queryString) + '(' + entityKey + ')';
                this.addSegment(ODataQuery.ENTITY_KEY);
                return this;
            };
        /**
         * @param {?} singleton
         * @return {?}
         */
        ODataQuery.prototype.singleton = /**
         * @param {?} singleton
         * @return {?}
         */
            function (singleton) {
                if (this.segments.length) {
                    throw new Error('singleton segment cannot be appended to other segments');
                }
                Utils.requireNotNullNorUndefined(singleton, 'singleton');
                Utils.requireNotEmpty(singleton, 'singleton');
                this.queryString = Utils.appendSegment(this.queryString, singleton);
                this.addSegment(ODataQuery.SINGLETON);
                return this;
            };
        /**
         * @param {?} typeName
         * @return {?}
         */
        ODataQuery.prototype.typeName = /**
         * @param {?} typeName
         * @return {?}
         */
            function (typeName) {
                if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY && this.lastSegment !== ODataQuery.ENTITY_KEY) {
                    throw new Error('typeName can only be appended to entitySet, navigationProperty or entityKey');
                }
                Utils.requireNotNullNorUndefined(typeName, 'typeName');
                Utils.requireNotEmpty(typeName, 'typeName');
                this.queryString = Utils.appendSegment(this.queryString, typeName);
                this.addSegment(ODataQuery.TYPE_NAME);
                return this;
            };
        /**
         * @param {?} property
         * @return {?}
         */
        ODataQuery.prototype.property = /**
         * @param {?} property
         * @return {?}
         */
            function (property) {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.PROPERTY), ODataQuery.PROPERTY);
                if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON) {
                    throw new Error('property can only be appended to entityKey or singleton');
                }
                Utils.requireNotNullNorUndefined(property, 'property');
                Utils.requireNotEmpty(property, 'property');
                this.queryString = Utils.appendSegment(this.queryString, property);
                this.addSegment(ODataQuery.PROPERTY);
                return this;
            };
        /**
         * @param {?} navigationProperty
         * @return {?}
         */
        ODataQuery.prototype.navigationProperty = /**
         * @param {?} navigationProperty
         * @return {?}
         */
            function (navigationProperty) {
                if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON && this.lastSegment !== ODataQuery.TYPE_NAME) {
                    throw new Error('navigationProperty can only be appended to entityKey, singleton or typeName');
                }
                Utils.requireNotNullNorUndefined(navigationProperty, 'navigationProperty');
                Utils.requireNotEmpty(navigationProperty, 'navigationProperty');
                this.queryString = Utils.appendSegment(this.queryString, navigationProperty);
                this.addSegment(ODataQuery.NAVIGATION_PROPERTY);
                return this;
            };
        /**
         * @return {?}
         */
        ODataQuery.prototype.ref = /**
         * @return {?}
         */
            function () {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.REF), ODataQuery.REF);
                if (this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
                    throw new Error('ref can only be appended to navigationProperty');
                }
                this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$REF);
                this.addSegment(ODataQuery.REF);
                return this;
            };
        /**
         * @return {?}
         */
        ODataQuery.prototype.value = /**
         * @return {?}
         */
            function () {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.VALUE), ODataQuery.VALUE);
                if (this.lastSegment !== ODataQuery.PROPERTY) {
                    throw new Error('value can only be appended to property');
                }
                this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$VALUE);
                this.addSegment(ODataQuery.VALUE);
                return this;
            };
        /**
         * @return {?}
         */
        ODataQuery.prototype.countSegment = /**
         * @return {?}
         */
            function () {
                Utils.requireNullOrUndefined(this.getSegment(ODataQuery.COUNT), ODataQuery.COUNT);
                if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {
                    throw new Error('count can only be appended to entitySet or navigationProperty');
                }
                this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$COUNT);
                this.addSegment(ODataQuery.COUNT);
                return this;
            };
        /**
         * @param {?} functionCall
         * @return {?}
         */
        ODataQuery.prototype.functionCall = /**
         * @param {?} functionCall
         * @return {?}
         */
            function (functionCall) {
                Utils.requireNotNullNorUndefined(functionCall, 'functionCall');
                Utils.requireNotEmpty(functionCall, 'functionCall');
                this.queryString = Utils.appendSegment(this.queryString, functionCall);
                this.addSegment(ODataQuery.FUNCTION_CALL);
                return this;
            };
        /**
         * @param {?} actionCall
         * @return {?}
         */
        ODataQuery.prototype.actionCall = /**
         * @param {?} actionCall
         * @return {?}
         */
            function (actionCall) {
                Utils.requireNotNullNorUndefined(actionCall, 'actionCall');
                Utils.requireNotEmpty(actionCall, 'actionCall');
                this.queryString = Utils.appendSegment(this.queryString, actionCall);
                this.addSegment(ODataQuery.ACTION_CALL);
                return this;
            };
        /**
         * @return {?}
         */
        ODataQuery.prototype.batch = /**
         * @return {?}
         */
            function () {
                return new ODataQueryBatch(this.odataService, this.serviceRoot);
            };
        // QUERY OPTIONS
        /**
         * @param {?} select
         * @return {?}
         */
        ODataQuery.prototype.select = /**
         * @param {?} select
         * @return {?}
         */
            function (select) {
                this.queryOptions.select(select);
                return this;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        ODataQuery.prototype.filter = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                this.queryOptions.filter(filter);
                return this;
            };
        /**
         * @param {?} expand
         * @return {?}
         */
        ODataQuery.prototype.expand = /**
         * @param {?} expand
         * @return {?}
         */
            function (expand) {
                this.queryOptions.expand(expand);
                return this;
            };
        /**
         * @param {?} orderby
         * @return {?}
         */
        ODataQuery.prototype.orderby = /**
         * @param {?} orderby
         * @return {?}
         */
            function (orderby) {
                this.queryOptions.orderby(orderby);
                return this;
            };
        /**
         * @param {?} search
         * @return {?}
         */
        ODataQuery.prototype.search = /**
         * @param {?} search
         * @return {?}
         */
            function (search) {
                this.queryOptions.search(search);
                return this;
            };
        /**
         * @param {?} skip
         * @return {?}
         */
        ODataQuery.prototype.skip = /**
         * @param {?} skip
         * @return {?}
         */
            function (skip) {
                this.queryOptions.skip(skip);
                return this;
            };
        /**
         * @param {?} top
         * @return {?}
         */
        ODataQuery.prototype.top = /**
         * @param {?} top
         * @return {?}
         */
            function (top) {
                this.queryOptions.top(top);
                return this;
            };
        /**
         * @param {?} count
         * @return {?}
         */
        ODataQuery.prototype.countOption = /**
         * @param {?} count
         * @return {?}
         */
            function (count) {
                this.queryOptions.count(count);
                return this;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        ODataQuery.prototype.customOption = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.queryOptions.customOption(key, value);
                return this;
            };
        /**
         * @param {?} format
         * @return {?}
         */
        ODataQuery.prototype.format = /**
         * @param {?} format
         * @return {?}
         */
            function (format) {
                this.queryOptions.format(format);
                return this;
            };
        // QUERY EXECUTION
        /**
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQuery.prototype.get = /**
         * @param {?=} httpOptions
         * @return {?}
         */
            function (httpOptions) {
                return this.odataService.get(this, httpOptions);
            };
        /**
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQuery.prototype.post = /**
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
            function (body, httpOptions) {
                return this.odataService.post(this, body, httpOptions);
            };
        /**
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQuery.prototype.patch = /**
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (body, etag, httpOptions) {
                return this.odataService.patch(this, body, etag, httpOptions);
            };
        /**
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQuery.prototype.put = /**
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (body, etag, httpOptions) {
                return this.odataService.put(this, body, etag, httpOptions);
            };
        /**
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataQuery.prototype.delete = /**
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (etag, httpOptions) {
                return this.odataService.delete(this, etag, httpOptions);
            };
        /**
         * @return {?}
         */
        ODataQuery.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var res = this.queryString;
                if (Utils.isNotNullNorUndefined(this.queryOptions) && !this.queryOptions.isEmpty()) {
                    res += '?' + this.queryOptions.toString();
                }
                return res;
            };
        /**
         * @param {?} segment
         * @return {?}
         */
        ODataQuery.prototype.getSegment = /**
         * @param {?} segment
         * @return {?}
         */
            function (segment) {
                Utils.requireNotNull(segment, 'segment');
                /** @type {?} */
                var res = this.segments.find(function (value, index, segments) {
                    return value === segment;
                });
                return res;
            };
        /**
         * @param {?} segment
         * @return {?}
         */
        ODataQuery.prototype.addSegment = /**
         * @param {?} segment
         * @return {?}
         */
            function (segment) {
                Utils.requireNotNull(segment, 'segment');
                this.segments.push(segment);
                if (Utils.isNotNullNorUndefined(this.segments) && this.segments.length) {
                    this.lastSegment = this.segments[this.segments.length - 1];
                }
            };
        // QUERY OPTIONS SEPARATOR
        ODataQuery.SEPARATOR = '&';
        ODataQuery.METADATA = 'metadata';
        ODataQuery.ENTITY_SET = 'entitySet';
        ODataQuery.ENTITY_KEY = 'entityKey';
        ODataQuery.SINGLETON = 'singleton';
        ODataQuery.TYPE_NAME = 'typeName';
        ODataQuery.PROPERTY = 'property';
        ODataQuery.NAVIGATION_PROPERTY = 'navigationProperty';
        ODataQuery.REF = 'ref';
        ODataQuery.VALUE = 'value';
        ODataQuery.COUNT = 'count';
        ODataQuery.FUNCTION_CALL = 'functionCall';
        ODataQuery.ACTION_CALL = 'actionCall';
        ODataQuery.$METADATA = '$metadata';
        ODataQuery.$REF = '$ref';
        ODataQuery.$VALUE = '$value';
        ODataQuery.$COUNT = '$count';
        return ODataQuery;
    }(ODataQueryAbstract));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlAnnotable = (function () {
        function CsdlAnnotable(annotationList) {
            this.annotationList = annotationList;
        }
        return CsdlAnnotable;
    }());
    var CsdlAnnotations = (function (_super) {
        __extends(CsdlAnnotations, _super);
        function CsdlAnnotations(target, annotationList, qualifier) {
            var _this = _super.call(this, annotationList) || this;
            _this.target = target;
            _this.qualifier = qualifier;
            return _this;
        }
        return CsdlAnnotations;
    }(CsdlAnnotable));
    var CsdlAnnotation = (function () {
        function CsdlAnnotation(term, qualifier) {
            this.term = term;
            this.qualifier = qualifier;
        }
        return CsdlAnnotation;
    }());
    var CsdlTerm = (function () {
        function CsdlTerm(name, type, baseTerm, defaultValue, appliesTo, nullable, maxLength, precision, scale, srid) {
            this.name = name;
            this.type = type;
            this.baseTerm = baseTerm;
            this.defaultValue = defaultValue;
            this.appliesTo = appliesTo;
            this.nullable = nullable;
            this.maxLength = maxLength;
            this.precision = precision;
            this.scale = scale;
            this.srid = srid;
        }
        return CsdlTerm;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlEntityContainer = (function () {
        function CsdlEntityContainer(name, extend, entitySets, singletons, functionImports, actionImports) {
            this.name = name;
            this.extend = extend;
            this.entitySets = entitySets;
            this.singletons = singletons;
            this.functionImports = functionImports;
            this.actionImports = actionImports;
        }
        return CsdlEntityContainer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlEntitySet = (function () {
        function CsdlEntitySet(name, entityType, navigationPropertyBinding, includeInServiceDocument) {
            this.name = name;
            this.entityType = entityType;
            this.navigationPropertyBinding = navigationPropertyBinding;
            this.includeInServiceDocument = includeInServiceDocument;
        }
        return CsdlEntitySet;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlEnumType = (function () {
        function CsdlEnumType(name, members, underlyingType, isFlags) {
            this.name = name;
            this.members = members;
            this.underlyingType = underlyingType;
            this.isFlags = isFlags;
        }
        return CsdlEnumType;
    }());
    var CsdlEnumMember = (function () {
        function CsdlEnumMember(name, value) {
            this.name = name;
            this.value = value;
        }
        return CsdlEnumMember;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlFunction = (function () {
        function CsdlFunction(name, returnType, isBound, entitySetPath, isComposable, parameters) {
            this.name = name;
            this.returnType = returnType;
            this.isBound = isBound;
            this.entitySetPath = entitySetPath;
            this.isComposable = isComposable;
            this.parameters = parameters;
        }
        return CsdlFunction;
    }());
    var CsdlAction = (function () {
        function CsdlAction(name, returnType, isBound, entitySetPath, parameters) {
            this.name = name;
            this.returnType = returnType;
            this.isBound = isBound;
            this.entitySetPath = entitySetPath;
            this.parameters = parameters;
        }
        return CsdlAction;
    }());
    var CsdlFunctionImport = (function () {
        function CsdlFunctionImport(name, functionName, entitySet, IncludeInServiceDocument) {
            this.name = name;
            this.functionName = functionName;
            this.entitySet = entitySet;
            this.IncludeInServiceDocument = IncludeInServiceDocument;
        }
        return CsdlFunctionImport;
    }());
    var CsdlActionImport = (function () {
        function CsdlActionImport(name, action, entitySet) {
            this.name = name;
            this.action = action;
            this.entitySet = entitySet;
        }
        return CsdlActionImport;
    }());
    var CsdlParameter = (function () {
        function CsdlParameter(name, type, nullable, maxLength, precision, scale, srid) {
            this.name = name;
            this.type = type;
            this.nullable = nullable;
            this.maxLength = maxLength;
            this.precision = precision;
            this.scale = scale;
            this.srid = srid;
        }
        return CsdlParameter;
    }());
    var CsdlReturnType = (function () {
        function CsdlReturnType(type, nullable, maxLength, precision, scale, srid) {
            this.type = type;
            this.nullable = nullable;
            this.maxLength = maxLength;
            this.precision = precision;
            this.scale = scale;
            this.srid = srid;
        }
        return CsdlReturnType;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlNavigationPropertyBinding = (function () {
        function CsdlNavigationPropertyBinding(path, target) {
            this.path = path;
            this.target = target;
        }
        return CsdlNavigationPropertyBinding;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlReference = (function (_super) {
        __extends(CsdlReference, _super);
        function CsdlReference(uri, includes, includeAnnotations, annotationList) {
            var _this = _super.call(this, annotationList) || this;
            _this.uri = uri;
            _this.includes = includes;
            _this.includeAnnotations = includeAnnotations;
            return _this;
        }
        return CsdlReference;
    }(CsdlAnnotable));
    var CsdlInclude = (function () {
        function CsdlInclude(namespace, alias) {
            this.namespace = namespace;
            this.alias = alias;
        }
        return CsdlInclude;
    }());
    var CsdlIncludeAnnotations = (function () {
        function CsdlIncludeAnnotations(termNamespace, qualifier, targetNamespace) {
            this.termNamespace = termNamespace;
            this.qualifier = qualifier;
            this.targetNamespace = targetNamespace;
        }
        return CsdlIncludeAnnotations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlSchema = (function (_super) {
        __extends(CsdlSchema, _super);
        function CsdlSchema(namespace, alias, enumTypes, complexTypes, entityTypes, functions, actions, entityContainer, typeDefinitions, terms, annotationsList, annotationList) {
            var _this = _super.call(this, annotationList) || this;
            _this.namespace = namespace;
            _this.alias = alias;
            _this.enumTypes = enumTypes;
            _this.complexTypes = complexTypes;
            _this.entityTypes = entityTypes;
            _this.functions = functions;
            _this.actions = actions;
            _this.entityContainer = entityContainer;
            _this.typeDefinitions = typeDefinitions;
            _this.terms = terms;
            _this.annotationsList = annotationsList;
            return _this;
        }
        return CsdlSchema;
    }(CsdlAnnotable));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlSingleton = (function () {
        function CsdlSingleton(name, type, navigationPropertyBindings) {
            this.name = name;
            this.type = type;
            this.navigationPropertyBindings = navigationPropertyBindings;
        }
        return CsdlSingleton;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ CsdlStructuralProperty = (function () {
        function CsdlStructuralProperty(name, type, nullable) {
            this.name = name;
            this.type = type;
            this.nullable = nullable;
        }
        return CsdlStructuralProperty;
    }());
    var CsdlProperty = (function (_super) {
        __extends(CsdlProperty, _super);
        function CsdlProperty(name, type, nullable, maxLength, precision, scale, unicode, srid, defaultValue) {
            var _this = _super.call(this, name, type, nullable) || this;
            _this.maxLength = maxLength;
            _this.precision = precision;
            _this.scale = scale;
            _this.unicode = unicode;
            _this.srid = srid;
            _this.defaultValue = defaultValue;
            return _this;
        }
        return CsdlProperty;
    }(CsdlStructuralProperty));
    var CsdlNavigationProperty = (function (_super) {
        __extends(CsdlNavigationProperty, _super);
        function CsdlNavigationProperty(name, type, nullable, partner, containsTarget, referentialConstraints, onDelete) {
            var _this = _super.call(this, name, type, nullable) || this;
            _this.partner = partner;
            _this.containsTarget = containsTarget;
            _this.referentialConstraints = referentialConstraints;
            _this.onDelete = onDelete;
            return _this;
        }
        return CsdlNavigationProperty;
    }(CsdlStructuralProperty));
    var CsdlReferentialConstraint = (function () {
        function CsdlReferentialConstraint(property, referencedProperty) {
            this.property = property;
            this.referencedProperty = referencedProperty;
        }
        return CsdlReferentialConstraint;
    }());
    var CsdlOnDelete = (function () {
        function CsdlOnDelete(action) {
            this.action = action;
        }
        return CsdlOnDelete;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlStructuredType = (function () {
        function CsdlStructuredType(name, properties, navigationProperties, baseType, openType, abstract) {
            this.name = name;
            this.properties = properties;
            this.navigationProperties = navigationProperties;
            this.baseType = baseType;
            this.openType = openType;
            this.abstract = abstract;
        }
        return CsdlStructuredType;
    }());
    var CsdlComplexType = (function (_super) {
        __extends(CsdlComplexType, _super);
        function CsdlComplexType(name, properties, navigationProperties, baseType, openType, abstract) {
            return _super.call(this, name, properties, navigationProperties, baseType, openType, abstract) || this;
        }
        return CsdlComplexType;
    }(CsdlStructuredType));
    var CsdlEntityType = (function (_super) {
        __extends(CsdlEntityType, _super);
        function CsdlEntityType(name, key, properties, navigationProperties, baseType, openType, abstract, hasStream) {
            var _this = _super.call(this, name, properties, navigationProperties, baseType, openType, abstract) || this;
            _this.key = key;
            _this.hasStream = hasStream;
            return _this;
        }
        return CsdlEntityType;
    }(CsdlStructuredType));
    var CsdlKey = (function () {
        function CsdlKey(propertyRefs) {
            this.propertyRefs = propertyRefs;
        }
        return CsdlKey;
    }());
    var CsdlPropertyRef = (function () {
        function CsdlPropertyRef(name, alias) {
            this.name = name;
            this.alias = alias;
        }
        return CsdlPropertyRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CsdlTypeDefinition = (function (_super) {
        __extends(CsdlTypeDefinition, _super);
        function CsdlTypeDefinition(name, underlayingType, maxLength, precision, scale, unicode, srid, annotationList) {
            var _this = _super.call(this, annotationList) || this;
            _this.name = name;
            _this.underlayingType = underlayingType;
            _this.maxLength = maxLength;
            _this.precision = precision;
            _this.scale = scale;
            _this.unicode = unicode;
            _this.srid = srid;
            return _this;
        }
        return CsdlTypeDefinition;
    }(CsdlAnnotable));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ EntitySet = (function () {
        function EntitySet(entities, count, type) {
            var _this = this;
            Utils.requireNotNullNorUndefined(entities, 'entities');
            this.entities = [];
            entities.forEach(function (entity) {
                if (Utils.isNullOrUndefined(type)) {
                    _this.entities.push(Object.assign({}, entity));
                }
                else {
                    _this.entities.push(Object.assign(new type(), entity));
                }
            });
            this.count = count;
        }
        /**
         * @return {?}
         */
        EntitySet.prototype.getEntities = /**
         * @return {?}
         */
            function () {
                return this.entities;
            };
        /**
         * @return {?}
         */
        EntitySet.prototype.getCount = /**
         * @return {?}
         */
            function () {
                return this.count;
            };
        return EntitySet;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var FieldType = {
        ATTRIBUTE: 0, TAG: 1,
    };
    FieldType[FieldType.ATTRIBUTE] = 'ATTRIBUTE';
    FieldType[FieldType.TAG] = 'TAG';
    var Field = (function () {
        function Field(name, fieldType) {
            this.name = name;
            this.fieldType = fieldType;
        }
        return Field;
    }());
    var Metadata = (function () {
        function Metadata(xml) {
            try {
                /** @type {?} */
                var parser = new DOMParser();
                /** @type {?} */
                var document_1 = parser.parseFromString(xml, 'text/xml');
                this.checkVersion(document_1);
                this.version = this.getFieldValueByAttribute(new Field(Metadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE), document_1.documentElement.attributes);
                this.references = this.getObjects(document_1.documentElement, Metadata.TAG_REFERENCE, [
                    new Field(Metadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_INCLUDE, FieldType.TAG),
                    new Field(Metadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
                ]);
                /** @type {?} */
                var dataServices = document_1.documentElement.getElementsByTagName(Metadata.TAG_DATA_SERVICES)[0];
                this.schemas = this.getObjects(dataServices, Metadata.TAG_SCHEMA, [
                    new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),
                    new Field(Metadata.TAG_ENUM_TYPE, FieldType.TAG),
                    new Field(Metadata.TAG_COMPLEX_TYPE, FieldType.TAG),
                    new Field(Metadata.TAG_ENTITY_TYPE, FieldType.TAG),
                    new Field(Metadata.TAG_FUNCTION, FieldType.TAG),
                    new Field(Metadata.TAG_ACTION, FieldType.TAG),
                    new Field(Metadata.TAG_ENTITY_CONTAINER, FieldType.TAG),
                    new Field(Metadata.TAG_TYPE_DEFINITION, FieldType.TAG),
                    new Field(Metadata.TAG_TERM, FieldType.TAG),
                    new Field(Metadata.TAG_ANNOTATIONS, FieldType.TAG),
                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
                ]);
            }
            catch (error) {
                throw new Error('Unable to parse metadata, ' + error);
            }
        }
        /**
         * @param {?} document
         * @return {?}
         */
        Metadata.prototype.checkVersion = /**
         * @param {?} document
         * @return {?}
         */
            function (document) {
                /** @type {?} */
                var attributes = document.documentElement.attributes;
                if (Utils.isNullOrUndefined(attributes)) {
                    throw new Error('OData version is not specified in the metadata');
                }
                /** @type {?} */
                var attr = attributes.getNamedItem('Version');
                if (Utils.isNullOrUndefined(attr)) {
                    throw new Error('OData version is not specified in the metadata');
                }
                /** @type {?} */
                var odataVersion = attr.nodeValue;
                if (odataVersion !== '4.0') {
                    throw new Error('OData version "' + odataVersion + '" is not supported');
                }
            };
        /**
         * @param {?} parentElement
         * @param {?} tag
         * @param {?} fieldNames
         * @return {?}
         */
        Metadata.prototype.getObjects = /**
         * @param {?} parentElement
         * @param {?} tag
         * @param {?} fieldNames
         * @return {?}
         */
            function (parentElement, tag, fieldNames) {
                /** @type {?} */
                var objects;
                /** @type {?} */
                var children = parentElement.children;
                for (var index = 0; index < children.length; index++) {
                    /** @type {?} */
                    var element = children.item(index);
                    if (element.nodeName !== tag) {
                        continue;
                    }
                    /** @type {?} */
                    var attributes = element.attributes;
                    /** @type {?} */
                    var fieldValues = this.getFieldValues(fieldNames, attributes, element);
                    if (Utils.isNullOrUndefined(objects)) {
                        objects = [];
                    }
                    switch (tag) {
                        case Metadata.TAG_REFERENCE:
                            objects.push(new CsdlReference(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                            break;
                        case Metadata.TAG_INCLUDE:
                            objects.push(new CsdlInclude(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_INCLUDE_ANNOTATIONS:
                            objects.push(new CsdlIncludeAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                            break;
                        case Metadata.TAG_TERM:
                            objects.push(new CsdlTerm(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9]));
                            break;
                        case Metadata.TAG_ANNOTATIONS:
                            objects.push(new CsdlAnnotations(fieldValues[0], fieldValues[1], fieldValues[2]));
                            break;
                        case Metadata.TAG_ANNOTATION:
                            objects.push(new CsdlAnnotation(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_SCHEMA:
                            objects.push(new CsdlSchema(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8], fieldValues[9], fieldValues[10], fieldValues[11]));
                            break;
                        case Metadata.TAG_ENUM_TYPE:
                            objects.push(new CsdlEnumType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                            break;
                        case Metadata.TAG_COMPLEX_TYPE:
                            objects.push(new CsdlComplexType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                            break;
                        case Metadata.TAG_ENTITY_TYPE:
                            objects.push(new CsdlEntityType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                            break;
                        case Metadata.TAG_FUNCTION:
                            objects.push(new CsdlFunction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]));
                            break;
                        case Metadata.TAG_MEMBER:
                            objects.push(new CsdlEnumMember(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_PROPERTY:
                            objects.push(new CsdlProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7], fieldValues[8]));
                            break;
                        case Metadata.TAG_PROPERTY_REF:
                            objects.push(new CsdlPropertyRef(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_NAVIGATION_PROPERTY:
                            objects.push(new CsdlNavigationProperty(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                            break;
                        case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                            objects.push(new CsdlReferentialConstraint(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_PARAMETER:
                            objects.push(new CsdlParameter(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6]));
                            break;
                        case Metadata.TAG_ACTION:
                            objects.push(new CsdlAction(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4]));
                            break;
                        case Metadata.TAG_ENTITY_SET:
                            objects.push(new CsdlEntitySet(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                            break;
                        case Metadata.TAG_SINGLETON:
                            objects.push(new CsdlSingleton(fieldValues[0], fieldValues[1], fieldValues[2]));
                            break;
                        case Metadata.TAG_FUNCTION_IMPORT:
                            objects.push(new CsdlFunctionImport(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3]));
                            break;
                        case Metadata.TAG_ACTION_IMPORT:
                            objects.push(new CsdlActionImport(fieldValues[0], fieldValues[1], fieldValues[2]));
                            break;
                        case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                            objects.push(new CsdlNavigationPropertyBinding(fieldValues[0], fieldValues[1]));
                            break;
                        case Metadata.TAG_TYPE_DEFINITION:
                            objects.push(new CsdlTypeDefinition(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5], fieldValues[6], fieldValues[7]));
                            break;
                        default: throw new Error('Unknwon tag:' + tag);
                    }
                }
                return objects;
            };
        /**
         * @param {?} parentElement
         * @param {?} tag
         * @param {?} fieldNames
         * @return {?}
         */
        Metadata.prototype.getObject = /**
         * @param {?} parentElement
         * @param {?} tag
         * @param {?} fieldNames
         * @return {?}
         */
            function (parentElement, tag, fieldNames) {
                /** @type {?} */
                var object;
                /** @type {?} */
                var children = parentElement.children;
                /** @type {?} */
                var element;
                for (var index = 0; index < children.length; index++) {
                    if (children.item(index).nodeName === tag) {
                        if (Utils.isNotNullNorUndefined(element)) {
                            throw new Error('Expected one ' + tag);
                        }
                        element = children.item(index);
                    }
                }
                if (Utils.isNotNullNorUndefined(element)) {
                    /** @type {?} */
                    var attributes = element.attributes;
                    /** @type {?} */
                    var fieldValues = this.getFieldValues(fieldNames, attributes, element);
                    switch (tag) {
                        case Metadata.TAG_KEY:
                            object = new CsdlKey(fieldValues[0]);
                            break;
                        case Metadata.TAG_RETURN_TYPE:
                            object = new CsdlReturnType(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                            break;
                        case Metadata.TAG_ENTITY_CONTAINER:
                            object = new CsdlEntityContainer(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4], fieldValues[5]);
                            break;
                        case Metadata.TAG_ON_DELETE:
                            object = new CsdlOnDelete(fieldValues[0]);
                            break;
                        default: throw new Error('Unknwon tag:' + tag);
                    }
                }
                return object;
            };
        /**
         * @param {?} fields
         * @param {?} attributes
         * @param {?} element
         * @return {?}
         */
        Metadata.prototype.getFieldValues = /**
         * @param {?} fields
         * @param {?} attributes
         * @param {?} element
         * @return {?}
         */
            function (fields, attributes, element) {
                /** @type {?} */
                var fieldValues = [];
                try {
                    for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                        var field = fields_1_1.value;
                        if (field.fieldType === FieldType.TAG) {
                            fieldValues.push(this.getFieldValueByTag(field, element));
                        }
                        else if (field.fieldType === FieldType.ATTRIBUTE) {
                            fieldValues.push(this.getFieldValueByAttribute(field, attributes));
                        }
                        else {
                            throw new Error('Unknown field type: ' + field.fieldType);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return))
                            _a.call(fields_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return fieldValues;
                var e_1, _a;
            };
        /**
         * @param {?} field
         * @param {?} attributes
         * @return {?}
         */
        Metadata.prototype.getFieldValueByAttribute = /**
         * @param {?} field
         * @param {?} attributes
         * @return {?}
         */
            function (field, attributes) {
                switch (field.name) {
                    case Metadata.ATTRIBUTE_VERSION:
                    case Metadata.ATTRIBUTE_URI:
                    case Metadata.ATTRIBUTE_NAMESPACE:
                    case Metadata.ATTRIBUTE_ALIAS:
                    case Metadata.ATTRIBUTE_TERM_NAMESPACE:
                    case Metadata.ATTRIBUTE_TERM:
                    case Metadata.ATTRIBUTE_QUALIFIER:
                    case Metadata.ATTRIBUTE_TARGET_NAMESPACE:
                    case Metadata.ATTRIBUTE_NAME:
                    case Metadata.ATTRIBUTE_TYPE:
                    case Metadata.ATTRIBUTE_SRID:
                    case Metadata.ATTRIBUTE_DEFAULT_VALUE:
                    case Metadata.ATTRIBUTE_PARTNER:
                    case Metadata.ATTRIBUTE_PROPERTY:
                    case Metadata.ATTRIBUTE_REFERENCED_PROPERTY:
                    case Metadata.ATTRIBUTE_BASE_TYPE:
                    case Metadata.ATTRIBUTE_ENTITY_SET_PATH:
                    case Metadata.ATTRIBUTE_ENTITY_TYPE:
                    case Metadata.ATTRIBUTE_PATH:
                    case Metadata.ATTRIBUTE_TARGET:
                    case Metadata.ATTRIBUTE_FUNCTION:
                    case Metadata.ATTRIBUTE_ACTION:
                    case Metadata.ATTRIBUTE_ENTITY_SET:
                    case Metadata.ATTRIBUTE_UNDERLYING_TYPE:
                    case Metadata.ATTRIBUTE_EXTENDS:
                    case Metadata.ATTRIBUTE_BASE_TERM:
                    case Metadata.ATTRIBUTE_APPLIES_TO:
                        return this.getAttributeValue(attributes, field.name);
                    case Metadata.ATTRIBUTE_NULLABLE:
                    case Metadata.ATTRIBUTE_UNICODE:
                    case Metadata.ATTRIBUTE_OPEN_TYPE:
                    case Metadata.ATTRIBUTE_HAS_STREAM:
                    case Metadata.ATTRIBUTE_IS_BOUND:
                    case Metadata.ATTRIBUTE_IS_COMPOSABLE:
                    case Metadata.ATTRIBUTE_CONTAINS_TARGET:
                    case Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT:
                    case Metadata.ATTRIBUTE_ABSTRACT:
                    case Metadata.ATTRIBUTE_IS_FLAGS:
                        return this.propertyValueToBoolean(this.getAttributeValue(attributes, field.name));
                    case Metadata.ATTRIBUTE_VALUE:
                    case Metadata.ATTRIBUTE_MAX_LENGTH:
                    case Metadata.ATTRIBUTE_PRECISION:
                    case Metadata.ATTRIBUTE_SCALE:
                        return this.propertyValueToNumber(this.getAttributeValue(attributes, field.name));
                    default: throw new Error('Unknwon attribute:' + field.name);
                }
            };
        /**
         * @param {?} field
         * @param {?} element
         * @return {?}
         */
        Metadata.prototype.getFieldValueByTag = /**
         * @param {?} field
         * @param {?} element
         * @return {?}
         */
            function (field, element) {
                switch (field.name) {
                    case Metadata.TAG_INCLUDE:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_INCLUDE_ANNOTATIONS:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_TERM_NAMESPACE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TARGET_NAMESPACE, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_TERM:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_BASE_TERM, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_APPLIES_TO, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ANNOTATIONS:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_ANNOTATION, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ANNOTATION:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_TERM, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ENUM_TYPE:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_MEMBER, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_IS_FLAGS, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_COMPLEX_TYPE:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                            new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ENTITY_TYPE:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_KEY, FieldType.TAG),
                            new Field(Metadata.TAG_PROPERTY, FieldType.TAG),
                            new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_HAS_STREAM, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_FUNCTION:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_IS_COMPOSABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                        ]);
                    case Metadata.TAG_MEMBER:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_VALUE, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_PROPERTY:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_KEY:
                        return this.getObject(element, field.name, [
                            new Field(Metadata.TAG_PROPERTY_REF, FieldType.TAG)
                        ]);
                    case Metadata.TAG_PROPERTY_REF:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_NAVIGATION_PROPERTY:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PARTNER, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_CONTAINS_TARGET, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_REFERENTIAL_CONSTRAINT, FieldType.TAG),
                            new Field(Metadata.TAG_ON_DELETE, FieldType.TAG)
                        ]);
                    case Metadata.TAG_REFERENTIAL_CONSTRAINT:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_PROPERTY, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_REFERENCED_PROPERTY, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ON_DELETE:
                        return this.getObject(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_PARAMETER:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_RETURN_TYPE:
                        return this.getObject(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ACTION:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_PARAMETER, FieldType.TAG)
                        ]);
                    case Metadata.TAG_ENTITY_CONTAINER:
                        return this.getObject(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_EXTENDS, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_ENTITY_SET, FieldType.TAG),
                            new Field(Metadata.TAG_SINGLETON, FieldType.TAG),
                            new Field(Metadata.TAG_FUNCTION_IMPORT, FieldType.TAG),
                            new Field(Metadata.TAG_ACTION_IMPORT, FieldType.TAG)
                        ]);
                    case Metadata.TAG_ENTITY_SET:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ENTITY_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG),
                            new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_SINGLETON:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG)
                        ]);
                    case Metadata.TAG_FUNCTION_IMPORT:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_FUNCTION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_ACTION_IMPORT:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_PATH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE)
                        ]);
                    case Metadata.TAG_TYPE_DEFINITION:
                        return this.getObjects(element, field.name, [
                            new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),
                            new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),
                            new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)
                        ]);
                    default: throw new Error('Unknwon tag:' + field.name);
                }
            };
        /**
         * @param {?} attributes
         * @param {?} attributeName
         * @return {?}
         */
        Metadata.prototype.getAttributeValue = /**
         * @param {?} attributes
         * @param {?} attributeName
         * @return {?}
         */
            function (attributes, attributeName) {
                /** @type {?} */
                var attribute = attributes.getNamedItem(attributeName);
                if (Utils.isNotNullNorUndefined(attribute)) {
                    return attribute.nodeValue;
                }
                return undefined;
            };
        /**
         * @param {?} attributeValue
         * @return {?}
         */
        Metadata.prototype.propertyValueToNumber = /**
         * @param {?} attributeValue
         * @return {?}
         */
            function (attributeValue) {
                return Utils.isNotNullNorUndefined(attributeValue) ? Number(attributeValue) : undefined;
            };
        /**
         * @param {?} attributeValue
         * @return {?}
         */
        Metadata.prototype.propertyValueToBoolean = /**
         * @param {?} attributeValue
         * @return {?}
         */
            function (attributeValue) {
                return Utils.isNotNullNorUndefined(attributeValue) ? attributeValue === 'true' : undefined;
            };
        Metadata.TAG_EDMX = 'edmx:Edmx';
        Metadata.TAG_DATA_SERVICES = 'edmx:DataServices';
        Metadata.TAG_REFERENCE = 'edmx:Reference';
        Metadata.TAG_INCLUDE = 'edmx:Include';
        Metadata.TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';
        Metadata.TAG_TERM = 'Term';
        Metadata.TAG_ANNOTATIONS = 'Annotations';
        Metadata.TAG_ANNOTATION = 'Annotation';
        Metadata.TAG_SCHEMA = 'Schema';
        Metadata.TAG_ENUM_TYPE = 'EnumType';
        Metadata.TAG_MEMBER = 'Member';
        Metadata.TAG_COMPLEX_TYPE = 'ComplexType';
        Metadata.TAG_ENTITY_TYPE = 'EntityType';
        Metadata.TAG_PROPERTY = 'Property';
        Metadata.TAG_KEY = 'Key';
        Metadata.TAG_PROPERTY_REF = 'PropertyRef';
        Metadata.TAG_NAVIGATION_PROPERTY = 'NavigationProperty';
        Metadata.TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';
        Metadata.TAG_ON_DELETE = 'OnDelete';
        Metadata.TAG_FUNCTION = 'Function';
        Metadata.TAG_RETURN_TYPE = 'ReturnType';
        Metadata.TAG_PARAMETER = 'Parameter';
        Metadata.TAG_ACTION = 'Action';
        Metadata.TAG_ENTITY_CONTAINER = 'EntityContainer';
        Metadata.TAG_ENTITY_SET = 'EntitySet';
        Metadata.TAG_SINGLETON = 'Singleton';
        Metadata.TAG_FUNCTION_IMPORT = 'FunctionImport';
        Metadata.TAG_ACTION_IMPORT = 'ActionImport';
        Metadata.TAG_NAVIGATION_PROPERTY_BINDING = 'NavigationPropertyBinding';
        Metadata.TAG_TYPE_DEFINITION = 'TypeDefinition';
        Metadata.ATTRIBUTE_VERSION = 'Version';
        Metadata.ATTRIBUTE_URI = 'Uri';
        Metadata.ATTRIBUTE_ALIAS = 'Alias';
        Metadata.ATTRIBUTE_NAMESPACE = 'Namespace';
        Metadata.ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';
        Metadata.ATTRIBUTE_QUALIFIER = 'Qualifier';
        Metadata.ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';
        Metadata.ATTRIBUTE_TERM = 'Term';
        Metadata.ATTRIBUTE_NAME = 'Name';
        Metadata.ATTRIBUTE_VALUE = 'Value';
        Metadata.ATTRIBUTE_BASE_TYPE = 'BaseType';
        Metadata.ATTRIBUTE_OPEN_TYPE = 'OpenType';
        Metadata.ATTRIBUTE_TYPE = 'Type';
        Metadata.ATTRIBUTE_NULLABLE = 'Nullable';
        Metadata.ATTRIBUTE_MAX_LENGTH = 'MaxLength';
        Metadata.ATTRIBUTE_PRECISION = 'Precision';
        Metadata.ATTRIBUTE_SCALE = 'Scale';
        Metadata.ATTRIBUTE_UNICODE = 'Unicode';
        Metadata.ATTRIBUTE_SRID = 'SRID';
        Metadata.ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';
        Metadata.ATTRIBUTE_PARTNER = 'Partner';
        Metadata.ATTRIBUTE_PROPERTY = 'Property';
        Metadata.ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';
        Metadata.ATTRIBUTE_HAS_STREAM = 'HasStream';
        Metadata.ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';
        Metadata.ATTRIBUTE_IS_BOUND = 'IsBound';
        Metadata.ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';
        Metadata.ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';
        Metadata.ATTRIBUTE_ENTITY_TYPE = 'EntityType';
        Metadata.ATTRIBUTE_PATH = 'Path';
        Metadata.ATTRIBUTE_TARGET = 'Target';
        Metadata.ATTRIBUTE_FUNCTION = 'Function';
        Metadata.ATTRIBUTE_ACTION = 'Action';
        Metadata.ATTRIBUTE_ENTITY_SET = 'EntitySet';
        Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT = 'IncludeInServiceDocument';
        Metadata.ATTRIBUTE_ABSTRACT = 'Abstract';
        Metadata.ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';
        Metadata.ATTRIBUTE_IS_FLAGS = 'IsFlags';
        Metadata.ATTRIBUTE_EXTENDS = 'Extends';
        Metadata.ATTRIBUTE_BASE_TERM = 'BaseTerm';
        Metadata.ATTRIBUTE_APPLIES_TO = 'AppliesTo';
        return Metadata;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ODataResponseAbstract = (function () {
        function ODataResponseAbstract(httpResponse) {
            this.httpResponse = httpResponse;
        }
        /**
         * @return {?}
         */
        ODataResponseAbstract.prototype.getHttpResponse = /**
         * @return {?}
         */
            function () {
                return this.httpResponse;
            };
        /**
         * @return {?}
         */
        ODataResponseAbstract.prototype.isOk = /**
         * @return {?}
         */
            function () {
                return this.httpResponse.ok;
            };
        /**
         * @return {?}
         */
        ODataResponseAbstract.prototype.getBodyAsJson = /**
         * @return {?}
         */
            function () {
                return null;
            };
        /**
         * @return {?}
         */
        ODataResponseAbstract.prototype.getBodyAsText = /**
         * @return {?}
         */
            function () {
                return this.httpResponse.body;
            };
        /**
         * @return {?}
         */
        ODataResponseAbstract.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var res = this.httpResponse.status + " " + this.httpResponse.statusText + "\n";
                /** @type {?} */
                var headers = this.httpResponse.headers;
                try {
                    for (var _a = __values(headers.keys()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var key = _b.value;
                        res += key + ': ';
                        /** @type {?} */
                        var valueString = '';
                        try {
                            for (var _c = __values(headers.getAll(key)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var value = _d.value;
                                if (valueString.length) {
                                    valueString += ' ';
                                }
                                valueString += value;
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_e = _c.return))
                                    _e.call(_c);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                        res += valueString + '\n';
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_f = _a.return))
                            _f.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                /** @type {?} */
                var json = this.getBodyAsJson();
                if (Utils.isNotNullNorUndefined(json)) {
                    res += JSON.stringify(json, null, 4);
                }
                else {
                    res += this.getBodyAsText();
                }
                return res;
                var e_2, _f, e_1, _e;
            };
        return ODataResponseAbstract;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ODataResponse = (function (_super) {
        __extends(ODataResponse, _super);
        function ODataResponse(httpResponse) {
            return _super.call(this, httpResponse) || this;
        }
        /**
         * @return {?}
         */
        ODataResponse.prototype.getBodyAsJson = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var contentType = this.getHttpResponse().headers.get('Content-Type');
                if (Utils.isNotNullNorUndefined(contentType) && contentType.includes('json')) {
                    try {
                        return JSON.parse(this.getBodyAsText());
                    }
                    catch (error) {
                        return null;
                    }
                }
                return null;
            };
        /**
         * @return {?}
         */
        ODataResponse.prototype.toMetadata = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var xml = this.getBodyAsText();
                return new Metadata(xml);
            };
        /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
        ODataResponse.prototype.toEntitySet = /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
            function (type) {
                /** @type {?} */
                var json = this.getBodyAsJson();
                if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
                    /** @type {?} */
                    var count = null;
                    if (json.hasOwnProperty(ODataResponse.ODATA_COUNT)) {
                        count = json[ODataResponse.ODATA_COUNT];
                    }
                    return new EntitySet(json[ODataResponse.VALUE], count, type);
                }
                return null;
            };
        /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
        ODataResponse.prototype.toComplexCollection = /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
            function (type) {
                /** @type {?} */
                var json = this.getBodyAsJson();
                if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {
                    /** @type {?} */
                    var res = [];
                    try {
                        for (var _a = __values(json[ODataResponse.VALUE]), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var object = _b.value;
                            res.push(this.toObject(object, type));
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    return res;
                }
                return null;
                var e_1, _c;
            };
        /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
        ODataResponse.prototype.toEntity = /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
            function (type) {
                /** @type {?} */
                var json = this.getBodyAsJson();
                return this.toObject(json, type);
            };
        /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
        ODataResponse.prototype.toComplexValue = /**
         * @template T
         * @param {?=} type
         * @return {?}
         */
            function (type) {
                /** @type {?} */
                var json = this.getBodyAsJson();
                return this.toObject(json, type);
            };
        /**
         * @template T
         * @return {?}
         */
        ODataResponse.prototype.toPropertyValue = /**
         * @template T
         * @return {?}
         */
            function () {
                /** @type {?} */
                var json = this.getBodyAsJson();
                if (Utils.isNotNullNorUndefined(json)) {
                    if (json.hasOwnProperty(ODataResponse.VALUE)) {
                        return /** @type {?} */ (json[ODataResponse.VALUE]);
                    }
                    return null;
                }
                else {
                    return /** @type {?} */ (JSON.parse(this.getBodyAsText()));
                }
            };
        /**
         * @return {?}
         */
        ODataResponse.prototype.toCount = /**
         * @return {?}
         */
            function () {
                return Number(this.getBodyAsText());
            };
        /**
         * @return {?}
         */
        ODataResponse.prototype.toODataResponseBatch = /**
         * @return {?}
         */
            function () {
                return new ODataResponseBatch(this.getHttpResponse());
            };
        /**
         * @template T
         * @param {?} object
         * @param {?} type
         * @return {?}
         */
        ODataResponse.prototype.toObject = /**
         * @template T
         * @param {?} object
         * @param {?} type
         * @return {?}
         */
            function (object, type) {
                if (Utils.isNotNullNorUndefined(object)) {
                    if (Utils.isNullOrUndefined(type)) {
                        return Object.assign({}, object);
                    }
                    else {
                        return Object.assign(new type(), object);
                    }
                }
                return null;
            };
        ODataResponse.VALUE = 'value';
        ODataResponse.ODATA_COUNT = '@odata.count';
        return ODataResponse;
    }(ODataResponseAbstract));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ODataResponseBatch = (function (_super) {
        __extends(ODataResponseBatch, _super);
        function ODataResponseBatch(httpResponse) {
            var _this = _super.call(this, httpResponse) || this;
            _this.odataResponses = [];
            _this.parseResponses();
            return _this;
        }
        /**
         * @return {?}
         */
        ODataResponseBatch.prototype.getODataResponses = /**
         * @return {?}
         */
            function () {
                return this.odataResponses;
            };
        /**
         * @return {?}
         */
        ODataResponseBatch.prototype.parseResponses = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var contentType = this.getHttpResponse().headers.get(ODataResponseBatch.CONTENT_TYPE);
                /** @type {?} */
                var boundaryDelimiterBatch = this.getBoundaryDelimiter(contentType);
                /** @type {?} */
                var boundaryEndBatch = this.getBoundaryEnd(boundaryDelimiterBatch);
                /** @type {?} */
                var batchBody = this.getBodyAsText();
                /** @type {?} */
                var batchBodyLines = batchBody.split(ODataResponseBatch.NEWLINE);
                /** @type {?} */
                var odataResponseCS;
                /** @type {?} */
                var contentId;
                /** @type {?} */
                var boundaryDelimiterCS;
                /** @type {?} */
                var boundaryEndCS;
                /** @type {?} */
                var batchPartStartIndex;
                for (var index = 0; index < batchBodyLines.length; index++) {
                    /** @type {?} */
                    var batchBodyLine = batchBodyLines[index];
                    if (batchBodyLine.startsWith(ODataResponseBatch.CONTENT_TYPE)) {
                        /** @type {?} */
                        var contentTypeValue = this.getHeaderValue(batchBodyLine);
                        if (contentTypeValue === ODataResponseBatch.MULTIPART_MIXED) {
                            odataResponseCS = [];
                            contentId = undefined;
                            boundaryDelimiterCS = this.getBoundaryDelimiter(batchBodyLine);
                            boundaryEndCS = this.getBoundaryEnd(boundaryDelimiterCS);
                            batchPartStartIndex = undefined;
                        }
                        continue;
                    }
                    else if (Utils.isNotNullNorUndefined(odataResponseCS) && batchBodyLine.startsWith(ODataResponseBatch.CONTENT_ID)) {
                        contentId = Number(this.getHeaderValue(batchBodyLine));
                    }
                    else if (batchBodyLine.startsWith(ODataResponseBatch.HTTP11)) {
                        batchPartStartIndex = index;
                    }
                    else if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS
                        || batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                        if (!batchPartStartIndex) {
                            continue;
                        }
                        /** @type {?} */
                        var odataResponse = this.createODataResponse(batchBodyLines, batchPartStartIndex, index - 1);
                        if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                            odataResponseCS[contentId] = odataResponse;
                        }
                        else {
                            this.odataResponses.push(odataResponse);
                        }
                        if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS) {
                            batchPartStartIndex = index + 1;
                        }
                        else if (batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {
                            if (Utils.isNotNullNorUndefined(odataResponseCS)) {
                                try {
                                    for (var odataResponseCS_1 = __values(odataResponseCS), odataResponseCS_1_1 = odataResponseCS_1.next(); !odataResponseCS_1_1.done; odataResponseCS_1_1 = odataResponseCS_1.next()) {
                                        var response = odataResponseCS_1_1.value;
                                        if (Utils.isNotNullNorUndefined(response)) {
                                            this.odataResponses.push(response);
                                        }
                                    }
                                }
                                catch (e_1_1) {
                                    e_1 = { error: e_1_1 };
                                }
                                finally {
                                    try {
                                        if (odataResponseCS_1_1 && !odataResponseCS_1_1.done && (_a = odataResponseCS_1.return))
                                            _a.call(odataResponseCS_1);
                                    }
                                    finally {
                                        if (e_1)
                                            throw e_1.error;
                                    }
                                }
                            }
                            odataResponseCS = undefined;
                            boundaryDelimiterCS = undefined;
                            boundaryEndCS = undefined;
                            batchPartStartIndex = undefined;
                        }
                    }
                }
                var e_1, _a;
            };
        /**
         * @param {?} header
         * @return {?}
         */
        ODataResponseBatch.prototype.getHeaderValue = /**
         * @param {?} header
         * @return {?}
         */
            function (header) {
                /** @type {?} */
                var res = header.split(';')[0].trim();
                res = res.split(':')[1].trim();
                return res;
            };
        /**
         * @param {?} contentType
         * @return {?}
         */
        ODataResponseBatch.prototype.getBoundaryDelimiter = /**
         * @param {?} contentType
         * @return {?}
         */
            function (contentType) {
                /** @type {?} */
                var contentTypeParts = contentType.split(';');
                if (contentTypeParts.length === 2) {
                    /** @type {?} */
                    var boundary = contentType.split(';')[1].trim();
                    /** @type {?} */
                    var boundaryDelimiter = ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX + boundary.split('=')[1];
                    return boundaryDelimiter;
                }
                else {
                    return '';
                }
            };
        /**
         * @param {?} boundaryDelimiter
         * @return {?}
         */
        ODataResponseBatch.prototype.getBoundaryEnd = /**
         * @param {?} boundaryDelimiter
         * @return {?}
         */
            function (boundaryDelimiter) {
                if (!boundaryDelimiter.length) {
                    return '';
                }
                /** @type {?} */
                var boundaryEnd = boundaryDelimiter + ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;
                return boundaryEnd;
            };
        /**
         * @param {?} batchBodyLines
         * @param {?} batchPartStartIndex
         * @param {?} batchPartEndIndex
         * @return {?}
         */
        ODataResponseBatch.prototype.createODataResponse = /**
         * @param {?} batchBodyLines
         * @param {?} batchPartStartIndex
         * @param {?} batchPartEndIndex
         * @return {?}
         */
            function (batchBodyLines, batchPartStartIndex, batchPartEndIndex) {
                /** @type {?} */
                var index = batchPartStartIndex;
                /** @type {?} */
                var statusLine = batchBodyLines[index];
                /** @type {?} */
                var statusLineParts = batchBodyLines[index].split(' ');
                /** @type {?} */
                var status = statusLineParts[1];
                /** @type {?} */
                var statusTextIndex = statusLine.indexOf(status) + status.length + 1;
                /** @type {?} */
                var statusText = statusLine.substring(statusTextIndex);
                /** @type {?} */
                var httpHeaders = new http.HttpHeaders();
                for (++index; index <= batchPartEndIndex; index++) {
                    /** @type {?} */
                    var batchBodyLine = batchBodyLines[index];
                    if (batchBodyLine === '') {
                        break;
                    }
                    /** @type {?} */
                    var batchBodyLineParts = batchBodyLine.split(': ');
                    httpHeaders = httpHeaders.append(batchBodyLineParts[0].trim(), batchBodyLineParts[1].trim());
                }
                /** @type {?} */
                var body = '';
                for (; index <= batchPartEndIndex; index++) {
                    body += batchBodyLines[index];
                }
                return new ODataResponse(new http.HttpResponse({
                    body: body,
                    headers: httpHeaders,
                    status: Number(status),
                    statusText: statusText
                }));
            };
        ODataResponseBatch.CONTENT_TYPE = 'Content-Type';
        ODataResponseBatch.CONTENT_ID = 'Content-ID';
        ODataResponseBatch.HTTP11 = 'HTTP/1.1';
        ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX = '--';
        ODataResponseBatch.NEWLINE = '\r\n';
        ODataResponseBatch.MULTIPART_MIXED = 'multipart/mixed';
        return ODataResponseBatch;
    }(ODataResponseAbstract));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var HttpOptions = (function () {
        function HttpOptions(headers, observe, params, reportProgress, responseType, withCredentials) {
            if (observe === void 0) {
                observe = 'response';
            }
            if (responseType === void 0) {
                responseType = 'text';
            }
            this.headers = headers;
            this.observe = observe;
            this.params = params;
            this.reportProgress = reportProgress;
            this.responseType = responseType;
            this.withCredentials = withCredentials;
        }
        return HttpOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ODataService = (function () {
        function ODataService(http$$1) {
            this.http = http$$1;
        }
        /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataService.prototype.get = /**
         * @param {?} odataQuery
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, httpOptions) {
                /** @type {?} */
                var url = odataQuery.toString();
                /** @type {?} */
                var options = this.createHttpOptions(httpOptions);
                return this.http.get(url, options).pipe(operators.map(function (response) { return new ODataResponse(response); }));
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataService.prototype.post = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, httpOptions) {
                /** @type {?} */
                var url = odataQuery.toString();
                /** @type {?} */
                var options = this.createHttpOptions(httpOptions);
                return this.http.post(url, body, options).pipe(operators.map(function (response) { return new ODataResponse(response); }));
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataService.prototype.patch = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, etag, httpOptions) {
                /** @type {?} */
                var url = odataQuery.toString();
                /** @type {?} */
                var options = this.createHttpOptions(httpOptions);
                options = this.mergeETag(options, etag);
                return this.http.patch(url, body, options).pipe(operators.map(function (response) { return new ODataResponse(response); }));
            };
        /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataService.prototype.put = /**
         * @param {?} odataQuery
         * @param {?} body
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, body, etag, httpOptions) {
                /** @type {?} */
                var url = odataQuery.toString();
                /** @type {?} */
                var options = this.createHttpOptions(httpOptions);
                options = this.mergeETag(options, etag);
                return this.http.put(url, body, options).pipe(operators.map(function (response) { return new ODataResponse(response); }));
            };
        /**
         * @param {?} odataQuery
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
        ODataService.prototype.delete = /**
         * @param {?} odataQuery
         * @param {?=} etag
         * @param {?=} httpOptions
         * @return {?}
         */
            function (odataQuery, etag, httpOptions) {
                /** @type {?} */
                var url = odataQuery.toString();
                /** @type {?} */
                var options = this.createHttpOptions(httpOptions);
                options = this.mergeETag(options, etag);
                return this.http.delete(url, options).pipe(operators.map(function (response) { return new ODataResponse(response); }));
            };
        /**
         * @param {?} httpOptions
         * @return {?}
         */
        ODataService.prototype.createHttpOptions = /**
         * @param {?} httpOptions
         * @return {?}
         */
            function (httpOptions) {
                if (httpOptions instanceof HttpOptions) {
                    return httpOptions;
                }
                return Object.assign(new HttpOptions(), httpOptions);
            };
        /**
         * @param {?} httpOptions
         * @param {?} etag
         * @return {?}
         */
        ODataService.prototype.mergeETag = /**
         * @param {?} httpOptions
         * @param {?} etag
         * @return {?}
         */
            function (httpOptions, etag) {
                if (Utils.isNullOrUndefined(etag)) {
                    return httpOptions;
                }
                if (Utils.isNullOrUndefined(httpOptions)) {
                    httpOptions = new HttpOptions();
                }
                if (Utils.isNullOrUndefined(httpOptions.headers)) {
                    httpOptions.headers = new http.HttpHeaders();
                }
                httpOptions.headers[ODataService.IF_MATCH_HEADER] = etag;
                return httpOptions;
            };
        ODataService.IF_MATCH_HEADER = 'If-Match';
        ODataService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ODataService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return ODataService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ Filter = (function () {
        function Filter() {
        }
        return Filter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FilterHasProperty = (function () {
        function FilterHasProperty(property) {
            this.setProperty(property);
        }
        /**
         * @param {?} property
         * @return {?}
         */
        FilterHasProperty.prototype.setProperty = /**
         * @param {?} property
         * @return {?}
         */
            function (property) {
                Utils.requireNotNullNorUndefined(property, 'property');
                this.property = property;
            };
        /**
         * @return {?}
         */
        FilterHasProperty.prototype.getProperty = /**
         * @return {?}
         */
            function () {
                return this.property;
            };
        return FilterHasProperty;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterComparison = (function (_super) {
        __extends(FilterComparison, _super);
        function FilterComparison(property, operator, value) {
            var _this = _super.call(this, property) || this;
            Utils.requireNotNullNorUndefined(property, 'property');
            Utils.requireNotNullNorUndefined(operator, 'operator');
            Utils.requireNotUndefined(value, 'value');
            _this.operator = operator;
            _this.value = value;
            return _this;
        }
        /**
         * @return {?}
         */
        FilterComparison.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.property + " " + OperatorComparison[this.operator].toLowerCase() + " " + Utils.getValueURI(this.value, false);
            };
        /**
         * @return {?}
         */
        FilterComparison.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return (Utils.isNullOrUndefined(this.property) || !this.property.length)
                    && Utils.isNullOrUndefined(this.operator)
                    && Utils.isNullOrUndefined(this.value) || (this.value instanceof Filter && !this.value.isEmpty() || this.value instanceof Array && !this.value.length);
            };
        return FilterComparison;
    }(FilterHasProperty));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterFunction = (function (_super) {
        __extends(FilterFunction, _super);
        function FilterFunction(functionName, property, value) {
            var _this = _super.call(this, property) || this;
            Utils.requireNotNullNorUndefined(functionName, 'functionName');
            Utils.requireNotEmpty(functionName, 'functionName');
            Utils.requireNotNullNorUndefined(property, 'property');
            Utils.requireNotEmpty(property, 'property');
            _this.functionName = functionName;
            _this.property = property;
            _this.value = value;
            return _this;
        }
        /**
         * @return {?}
         */
        FilterFunction.prototype.toString = /**
         * @return {?}
         */
            function () {
                if (Utils.isNotNullNorUndefined(this.property) && Utils.isNotNullNorUndefined(this.value)) {
                    return this.functionName + "(" + this.property + "," + Utils.getValueURI(this.value, false) + ")";
                }
                else if (Utils.isNotNullNorUndefined(this.property)) {
                    return this.functionName + "(" + this.property + ")";
                }
                else if (Utils.isNotNullNorUndefined(this.value)) {
                    return this.functionName + "(" + Utils.getValueURI(this.value, false) + ")";
                }
                else {
                    return this.functionName + "()";
                }
            };
        /**
         * @return {?}
         */
        FilterFunction.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                if (Utils.isNullOrUndefined(this.property)
                    && Utils.isNullOrUndefined(this.value)) {
                    return true;
                }
                if (Utils.isNullOrUndefined(this.property)
                    && Utils.isNotNullNorUndefined(this.value) && Utils.isEmpty(this.value)) {
                    return true;
                }
                if (Utils.isNullOrUndefined(this.value)
                    && Utils.isNotNullNorUndefined(this.property) && !this.property.length) {
                    return true;
                }
                return false;
            };
        return FilterFunction;
    }(FilterHasProperty));
    var FilterFunctionString = (function (_super) {
        __extends(FilterFunctionString, _super);
        function FilterFunctionString(functionName, property, value) {
            return _super.call(this, functionName, property, typeof (value) === 'string'
                ? new QuotedString(value)
                : value instanceof FilterFunctionString ? value.toString() : value) || this;
        }
        return FilterFunctionString;
    }(FilterFunction));
    var FilterContains = (function (_super) {
        __extends(FilterContains, _super);
        function FilterContains(property, value) {
            var _this = _super.call(this, 'contains', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterContains;
    }(FilterFunctionString));
    var FilterEndswith = (function (_super) {
        __extends(FilterEndswith, _super);
        function FilterEndswith(property, value) {
            var _this = _super.call(this, 'endswith', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterEndswith;
    }(FilterFunctionString));
    var FilterStartswith = (function (_super) {
        __extends(FilterStartswith, _super);
        function FilterStartswith(property, value) {
            var _this = _super.call(this, 'startswith', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterStartswith;
    }(FilterFunctionString));
    var FilterLength = (function (_super) {
        __extends(FilterLength, _super);
        function FilterLength(property) {
            return _super.call(this, 'length', property) || this;
        }
        return FilterLength;
    }(FilterFunctionString));
    var FilterIndexof = (function (_super) {
        __extends(FilterIndexof, _super);
        function FilterIndexof(property, value) {
            var _this = _super.call(this, 'indexof', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterIndexof;
    }(FilterFunctionString));
    var FilterSubstring = (function (_super) {
        __extends(FilterSubstring, _super);
        function FilterSubstring(property, value) {
            var _this = _super.call(this, 'substring', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterSubstring;
    }(FilterFunctionString));
    var FilterTolower = (function (_super) {
        __extends(FilterTolower, _super);
        function FilterTolower(property) {
            return _super.call(this, 'tolower', property) || this;
        }
        return FilterTolower;
    }(FilterFunctionString));
    var FilterToupper = (function (_super) {
        __extends(FilterToupper, _super);
        function FilterToupper(property) {
            return _super.call(this, 'toupper', property) || this;
        }
        return FilterToupper;
    }(FilterFunctionString));
    var FilterTrim = (function (_super) {
        __extends(FilterTrim, _super);
        function FilterTrim(property) {
            return _super.call(this, 'trim', property) || this;
        }
        return FilterTrim;
    }(FilterFunctionString));
    var FilterConcat = (function (_super) {
        __extends(FilterConcat, _super);
        function FilterConcat(property, value) {
            var _this = _super.call(this, 'concat', property, value) || this;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        return FilterConcat;
    }(FilterFunctionString));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FilterHasFilter = (function () {
        function FilterHasFilter(filter) {
            this.filter = filter;
        }
        /**
         * @return {?}
         */
        FilterHasFilter.prototype.getFilter = /**
         * @return {?}
         */
            function () {
                return this.filter;
            };
        return FilterHasFilter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var LambdaOperator = {
        ANY: 0, ALL: 1,
    };
    LambdaOperator[LambdaOperator.ANY] = 'ANY';
    LambdaOperator[LambdaOperator.ALL] = 'ALL';
    /** @enum {number} */
    var LambdaCollection = {
        PROPERTY_COLLECTION: 0, ENTITY_SET: 1,
    };
    LambdaCollection[LambdaCollection.PROPERTY_COLLECTION] = 'PROPERTY_COLLECTION';
    LambdaCollection[LambdaCollection.ENTITY_SET] = 'ENTITY_SET';
    var FilterLambda = (function (_super) {
        __extends(FilterLambda, _super);
        function FilterLambda(lambdaCollection, propertyOrEntitySet, lambdaOperator, filter) {
            var _this = _super.call(this, filter) || this;
            Utils.requireNotNullNorUndefined(lambdaCollection, 'lambdaCollection');
            Utils.requireNotNullNorUndefined(propertyOrEntitySet, 'propertyOrEntitySet');
            Utils.requireNotNullNorUndefined(lambdaOperator, 'lambdaOperator');
            Utils.requireNotNullNorUndefined(filter, 'filter');
            if (lambdaCollection === LambdaCollection.PROPERTY_COLLECTION) {
                _this.checkProperty(propertyOrEntitySet, filter);
            }
            _this.lambdaCollection = lambdaCollection;
            _this.propertyOrEntitySet = propertyOrEntitySet;
            _this.lambdaOperator = lambdaOperator;
            return _this;
        }
        /**
         * @return {?}
         */
        FilterLambda.prototype.toString = /**
         * @return {?}
         */
            function () {
                switch (this.lambdaCollection) {
                    case LambdaCollection.PROPERTY_COLLECTION:
                        this.replaceProperty(this.filter);
                        return this.propertyOrEntitySet + "/" + LambdaOperator[this.lambdaOperator].toLowerCase() + "(x:" + this.filter.toString() + ")";
                    case LambdaCollection.ENTITY_SET:
                        return this.propertyOrEntitySet + "/" + LambdaOperator[this.lambdaOperator].toLowerCase() + "(x:x/" + this.filter.toString() + ")";
                    default:
                        throw new Error('unknown lambdaCollection: ' + this.lambdaCollection);
                }
            };
        /**
         * @return {?}
         */
        FilterLambda.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                if (Utils.isNullOrUndefined(this.lambdaCollection)
                    && Utils.isNullOrUndefined(this.propertyOrEntitySet)
                    && Utils.isNullOrUndefined(this.lambdaOperator)
                    && Utils.isNullOrUndefined(this.filter)) {
                    return true;
                }
                if (Utils.isNullOrUndefined(this.propertyOrEntitySet)
                    && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
                    return true;
                }
                if (Utils.isNullOrUndefined(this.filter)
                    && Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length) {
                    return true;
                }
                if (Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length
                    && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} propertyOrEntitySet
         * @param {?} filter
         * @return {?}
         */
        FilterLambda.prototype.checkProperty = /**
         * @param {?} propertyOrEntitySet
         * @param {?} filter
         * @return {?}
         */
            function (propertyOrEntitySet, filter) {
                if (Utils.isNullOrUndefined(filter)) {
                    return;
                }
                if (filter instanceof FilterHasProperty) {
                    if (propertyOrEntitySet !== filter.getProperty()) {
                        throw new Error('lambda property to filter must match inner filters property');
                    }
                }
                if (filter instanceof FilterHasFilter) {
                    /** @type {?} */
                    var filterChild = filter.getFilter();
                    if (filterChild instanceof Filter) {
                        this.replaceProperty(filterChild);
                    }
                    else {
                        try {
                            for (var filterChild_1 = __values(filterChild), filterChild_1_1 = filterChild_1.next(); !filterChild_1_1.done; filterChild_1_1 = filterChild_1.next()) {
                                var f = filterChild_1_1.value;
                                this.replaceProperty(f);
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (filterChild_1_1 && !filterChild_1_1.done && (_a = filterChild_1.return))
                                    _a.call(filterChild_1);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                }
                var e_1, _a;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        FilterLambda.prototype.replaceProperty = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                if (Utils.isNullOrUndefined(filter)) {
                    return;
                }
                if (filter instanceof FilterHasProperty) {
                    filter.setProperty('x');
                }
                if (filter instanceof FilterHasFilter) {
                    /** @type {?} */
                    var filterChild = filter.getFilter();
                    if (filterChild instanceof Filter) {
                        this.replaceProperty(filterChild);
                    }
                    else {
                        try {
                            for (var filterChild_2 = __values(filterChild), filterChild_2_1 = filterChild_2.next(); !filterChild_2_1.done; filterChild_2_1 = filterChild_2.next()) {
                                var f = filterChild_2_1.value;
                                this.replaceProperty(f);
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (filterChild_2_1 && !filterChild_2_1.done && (_a = filterChild_2.return))
                                    _a.call(filterChild_2);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                    }
                }
                var e_2, _a;
            };
        return FilterLambda;
    }(FilterHasFilter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterLogical = (function (_super) {
        __extends(FilterLogical, _super);
        function FilterLogical(filters, operator) {
            var _this = _super.call(this, filters) || this;
            Utils.requireNotNullNorUndefined(filters, 'filters');
            Utils.requireNotEmpty(filters, 'filters');
            Utils.requireNotNullNorUndefined(operator, 'operator');
            _this.operator = operator;
            return _this;
        }
        /**
         * @return {?}
         */
        FilterLogical.prototype.toString = /**
         * @return {?}
         */
            function () {
                if (this.filter instanceof Array) {
                    return Utils.toString(this.filter, this.operator);
                }
                return this.filter.toString();
            };
        /**
         * @return {?}
         */
        FilterLogical.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                if (Utils.isNullOrUndefined(this.filter)) {
                    return true;
                }
                try {
                    for (var _a = __values(/** @type {?} */ (this.filter)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var filter = _b.value;
                        if (filter.isEmpty()) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _c;
            };
        return FilterLogical;
    }(FilterHasFilter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ Search = (function () {
        function Search() {
        }
        return Search;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SearchLogical = (function (_super) {
        __extends(SearchLogical, _super);
        function SearchLogical(values, operator) {
            var _this = _super.call(this) || this;
            _this.values = values;
            _this.operator = operator;
            Utils.requireNotNullNorUndefined(values, 'values');
            Utils.requireNotNullNorUndefined(operator, 'operator');
            Utils.requireNotEmpty(values, 'values');
            if (operator === OperatorLogical.NOT && values.length !== 1) {
                throw new Error('operator ' + OperatorLogical[operator] + ' requires a single value');
            }
            return _this;
        }
        /**
         * @return {?}
         */
        SearchLogical.prototype.toString = /**
         * @return {?}
         */
            function () {
                return Utils.toString(this.values, this.operator, true);
            };
        /**
         * @return {?}
         */
        SearchLogical.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                if (Utils.isNullOrUndefined(this.values)) {
                    return true;
                }
                try {
                    for (var _a = __values(this.values), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var value = _b.value;
                        if (value.isEmpty()) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _c;
            };
        return SearchLogical;
    }(Search));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SearchSimple = (function (_super) {
        __extends(SearchSimple, _super);
        function SearchSimple(value) {
            var _this = _super.call(this) || this;
            _this.value = value;
            Utils.requireNotNullNorUndefined(value, 'value');
            Utils.requireNotEmpty(value, 'value');
            return _this;
        }
        /**
         * @return {?}
         */
        SearchSimple.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        SearchSimple.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return Utils.isNullOrUndefined(this.value) || !this.value.length;
            };
        return SearchSimple;
    }(Search));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SearchPhrase = (function (_super) {
        __extends(SearchPhrase, _super);
        function SearchPhrase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SearchPhrase.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "\"" + this.value + "\"";
            };
        return SearchPhrase;
    }(SearchSimple));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ODataModule = (function () {
        function ODataModule() {
        }
        ODataModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule
                        ],
                        providers: [ODataService]
                    },] },
        ];
        return ODataModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.ODataQueryAbstract = ODataQueryAbstract;
    exports.Method = Method;
    exports.BatchRequest = BatchRequest;
    exports.ODataQueryBatch = ODataQueryBatch;
    exports.ODataQuery = ODataQuery;
    exports.QuotedString = QuotedString;
    exports.CsdlAnnotable = CsdlAnnotable;
    exports.CsdlAnnotations = CsdlAnnotations;
    exports.CsdlAnnotation = CsdlAnnotation;
    exports.CsdlTerm = CsdlTerm;
    exports.CsdlEntityContainer = CsdlEntityContainer;
    exports.CsdlEntitySet = CsdlEntitySet;
    exports.CsdlEnumType = CsdlEnumType;
    exports.CsdlEnumMember = CsdlEnumMember;
    exports.CsdlFunction = CsdlFunction;
    exports.CsdlAction = CsdlAction;
    exports.CsdlFunctionImport = CsdlFunctionImport;
    exports.CsdlActionImport = CsdlActionImport;
    exports.CsdlParameter = CsdlParameter;
    exports.CsdlReturnType = CsdlReturnType;
    exports.CsdlNavigationPropertyBinding = CsdlNavigationPropertyBinding;
    exports.CsdlReference = CsdlReference;
    exports.CsdlInclude = CsdlInclude;
    exports.CsdlIncludeAnnotations = CsdlIncludeAnnotations;
    exports.CsdlSchema = CsdlSchema;
    exports.CsdlSingleton = CsdlSingleton;
    exports.CsdlStructuralProperty = CsdlStructuralProperty;
    exports.CsdlProperty = CsdlProperty;
    exports.CsdlNavigationProperty = CsdlNavigationProperty;
    exports.CsdlReferentialConstraint = CsdlReferentialConstraint;
    exports.CsdlOnDelete = CsdlOnDelete;
    exports.CsdlStructuredType = CsdlStructuredType;
    exports.CsdlComplexType = CsdlComplexType;
    exports.CsdlEntityType = CsdlEntityType;
    exports.CsdlKey = CsdlKey;
    exports.CsdlPropertyRef = CsdlPropertyRef;
    exports.CsdlTypeDefinition = CsdlTypeDefinition;
    exports.EntitySet = EntitySet;
    exports.FieldType = FieldType;
    exports.Field = Field;
    exports.Metadata = Metadata;
    exports.ODataResponseAbstract = ODataResponseAbstract;
    exports.ODataResponseBatch = ODataResponseBatch;
    exports.ODataResponse = ODataResponse;
    exports.HttpOptions = HttpOptions;
    exports.ODataService = ODataService;
    exports.FilterComparison = FilterComparison;
    exports.FilterFunction = FilterFunction;
    exports.FilterFunctionString = FilterFunctionString;
    exports.FilterContains = FilterContains;
    exports.FilterEndswith = FilterEndswith;
    exports.FilterStartswith = FilterStartswith;
    exports.FilterLength = FilterLength;
    exports.FilterIndexof = FilterIndexof;
    exports.FilterSubstring = FilterSubstring;
    exports.FilterTolower = FilterTolower;
    exports.FilterToupper = FilterToupper;
    exports.FilterTrim = FilterTrim;
    exports.FilterConcat = FilterConcat;
    exports.FilterHasFilter = FilterHasFilter;
    exports.FilterHasProperty = FilterHasProperty;
    exports.LambdaOperator = LambdaOperator;
    exports.LambdaCollection = LambdaCollection;
    exports.FilterLambda = FilterLambda;
    exports.FilterLogical = FilterLogical;
    exports.FilterString = FilterString;
    exports.Filter = Filter;
    exports.SearchLogical = SearchLogical;
    exports.SearchPhrase = SearchPhrase;
    exports.SearchSimple = SearchSimple;
    exports.Search = Search;
    exports.Expand = Expand;
    exports.OperatorComparison = OperatorComparison;
    exports.OperatorLogical = OperatorLogical;
    exports.OperatorArithmetic = OperatorArithmetic;
    exports.Order = Order;
    exports.Orderby = Orderby;
    exports.QueryOptions = QueryOptions;
    exports.Utils = Utils;
    exports.ODataModule = ODataModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,