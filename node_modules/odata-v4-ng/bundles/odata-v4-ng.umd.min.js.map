{"version":3,"sources":["null","ng://odata-v4-ng/lib/query-options/operator.ts","ng://odata-v4-ng/lib/odata-query/quoted-string.ts","ng://odata-v4-ng/lib/utils/utils.ts","ng://odata-v4-ng/lib/odata-query/odata-query-abstract.ts","ng://odata-v4-ng/lib/odata-query/odata-query-batch.ts","ng://odata-v4-ng/lib/query-options/filter/filter-string.ts","ng://odata-v4-ng/lib/query-options/expand.ts","ng://odata-v4-ng/lib/query-options/orderby.ts","ng://odata-v4-ng/lib/query-options/query-options.ts","ng://odata-v4-ng/lib/odata-query/odata-query.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-annotation.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-entity-container.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-entity-set.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-enum-type.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-function-action.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-navigation-property-binding.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-reference.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-schema.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-singleton.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-structural-property.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-structured-type.ts","ng://odata-v4-ng/lib/odata-response/csdl/csdl-type-definition.ts","ng://odata-v4-ng/lib/odata-response/entity-collection.ts","ng://odata-v4-ng/lib/odata-response/metadata.ts","ng://odata-v4-ng/lib/odata-response/odata-response-abstract.ts","ng://odata-v4-ng/lib/odata-response/odata-response.ts","ng://odata-v4-ng/lib/odata-response/odata-response-batch.ts","ng://odata-v4-ng/lib/odata-service/http-options.ts","ng://odata-v4-ng/lib/odata-service/odata.service.ts","ng://odata-v4-ng/lib/query-options/filter/filter.ts","ng://odata-v4-ng/lib/query-options/filter/filter-has-property.ts","ng://odata-v4-ng/lib/query-options/filter/filter-comparison.ts","ng://odata-v4-ng/lib/query-options/filter/filter-function.ts","ng://odata-v4-ng/lib/query-options/filter/filter-has-filter.ts","ng://odata-v4-ng/lib/query-options/filter/filter-lambda.ts","ng://odata-v4-ng/lib/query-options/filter/filter-logical.ts","ng://odata-v4-ng/lib/query-options/search/search.ts","ng://odata-v4-ng/lib/query-options/search/search-logical.ts","ng://odata-v4-ng/lib/query-options/search/search-simple.ts","ng://odata-v4-ng/lib/query-options/search/search-phrase.ts","ng://odata-v4-ng/lib/odata.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","EQ","NE","GT","GE","LT","LE","HAS","AND","OR","NOT","ADD","SUB","MUL","DIV","MOD","QuotedString","toString","Utils","isNull","isUndefined","undefined","isNullOrUndefined","isNotNullNorUndefined","isEmpty","value_1","tslib_1.__values","value_1_1","v","requireNull","fieldValue","fieldName","Error","requireUndefined","requireNotNull","requireNotUndefined","requireNotNullNorUndefined","requireNullOrUndefined","requireNotEmpty","requireNotNegative","appendSegment","path","segment","endsWith","removeEndingSeparator","substring","getValueURI","encodeURI","res","encodeURIComponent","replace","items","operator","operatorUppercase","items_1","items_1_1","item","getOperatorString","OperatorLogical","operatorString","toLowerCase","toUpperCase","ODataQueryAbstract","odataService","serviceRoot","queryString","GET","POST","PUT","PATCH","DELETE","BatchRequest","method","odataQuery","body","httpOptions","ODataQueryBatch","_super","_this","$BATCH","requests","batchBoundary","BATCH_PREFIX","getUUID","changesetBoundary","changesetID","tslib_1.__extends","get","push","Method","post","put","patch","delete","execute","headers","HttpHeaders","set","ODATA_VERSION","VERSION_4_0","CONTENT_TYPE","MULTIPART_MIXED_BOUNDARY","ACCEPT","MULTIPART_MIXED","getBody","_a","_b","request","BOUNDARY_PREFIX_SUFFIX","NEWLINE","CHANGESET_PREFIX","APPLICATION_HTTP","CONTENT_TRANSFER_ENCODING","BINARY","CONTENT_ID","HTTP11","getHeaders","JSON","stringify","APPLICATION_JSON","keys","key","getAll","UUID","FilterString","filter","Expand","entitySet","queryOptions","QueryOptions","SEPARATOR","select","expand","orderby","search","skip","top","customOption","ASC","DESC","Orderby","property","order","Order","separator","_separator","_select","_filter","_expand","_orderby","_search","_skip","_top","_count","_customOptions","_format","count","format","Map","size","forEach","map","ODataQuery","segments","lastSegment","metadata","getSegment","METADATA","$METADATA","addSegment","ENTITY_SET","entityKey","NAVIGATION_PROPERTY","ENTITY_KEY","singleton","SINGLETON","typeName","TYPE_NAME","PROPERTY","navigationProperty","ref","REF","$REF","VALUE","$VALUE","countSegment","COUNT","$COUNT","functionCall","FUNCTION_CALL","actionCall","ACTION_CALL","batch","countOption","etag","find","index","CsdlAnnotable","annotationList","CsdlAnnotations","target","qualifier","CsdlAnnotation","term","CsdlTerm","name","type","baseTerm","defaultValue","appliesTo","nullable","maxLength","precision","scale","srid","CsdlEntityContainer","extend","entitySets","singletons","functionImports","actionImports","CsdlEntitySet","entityType","navigationPropertyBinding","includeInServiceDocument","CsdlEnumType","members","underlyingType","isFlags","CsdlEnumMember","CsdlFunction","returnType","isBound","entitySetPath","isComposable","parameters","CsdlAction","CsdlFunctionImport","functionName","IncludeInServiceDocument","CsdlActionImport","action","CsdlParameter","CsdlReturnType","CsdlNavigationPropertyBinding","CsdlReference","uri","includes","includeAnnotations","CsdlInclude","namespace","alias","CsdlIncludeAnnotations","termNamespace","targetNamespace","CsdlSchema","enumTypes","complexTypes","entityTypes","functions","actions","entityContainer","typeDefinitions","terms","annotationsList","CsdlSingleton","navigationPropertyBindings","CsdlStructuralProperty","CsdlProperty","unicode","CsdlNavigationProperty","partner","containsTarget","referentialConstraints","onDelete","CsdlReferentialConstraint","referencedProperty","CsdlOnDelete","CsdlStructuredType","properties","navigationProperties","baseType","openType","abstract","CsdlComplexType","CsdlEntityType","hasStream","CsdlKey","propertyRefs","CsdlPropertyRef","CsdlTypeDefinition","underlayingType","EntitySet","entities","entity","assign","getEntities","getCount","ATTRIBUTE","TAG","Field","fieldType","Metadata","xml","document_1","DOMParser","parseFromString","checkVersion","version","getFieldValueByAttribute","ATTRIBUTE_VERSION","FieldType","documentElement","attributes","references","getObjects","TAG_REFERENCE","ATTRIBUTE_URI","TAG_INCLUDE","TAG_INCLUDE_ANNOTATIONS","TAG_ANNOTATION","dataServices","getElementsByTagName","TAG_DATA_SERVICES","schemas","TAG_SCHEMA","ATTRIBUTE_NAMESPACE","ATTRIBUTE_ALIAS","TAG_ENUM_TYPE","TAG_COMPLEX_TYPE","TAG_ENTITY_TYPE","TAG_FUNCTION","TAG_ACTION","TAG_ENTITY_CONTAINER","TAG_TYPE_DEFINITION","TAG_TERM","TAG_ANNOTATIONS","error","document","attr","getNamedItem","odataVersion","nodeValue","parentElement","tag","fieldNames","objects","children","element","nodeName","fieldValues","getFieldValues","TAG_MEMBER","TAG_PROPERTY","TAG_PROPERTY_REF","TAG_NAVIGATION_PROPERTY","TAG_REFERENTIAL_CONSTRAINT","TAG_PARAMETER","TAG_ENTITY_SET","TAG_SINGLETON","TAG_FUNCTION_IMPORT","TAG_ACTION_IMPORT","TAG_NAVIGATION_PROPERTY_BINDING","getObject","object","TAG_KEY","TAG_RETURN_TYPE","TAG_ON_DELETE","fields","fields_1","fields_1_1","field","getFieldValueByTag","ATTRIBUTE_TERM_NAMESPACE","ATTRIBUTE_TERM","ATTRIBUTE_QUALIFIER","ATTRIBUTE_TARGET_NAMESPACE","ATTRIBUTE_NAME","ATTRIBUTE_TYPE","ATTRIBUTE_SRID","ATTRIBUTE_DEFAULT_VALUE","ATTRIBUTE_PARTNER","ATTRIBUTE_PROPERTY","ATTRIBUTE_REFERENCED_PROPERTY","ATTRIBUTE_BASE_TYPE","ATTRIBUTE_ENTITY_SET_PATH","ATTRIBUTE_ENTITY_TYPE","ATTRIBUTE_PATH","ATTRIBUTE_TARGET","ATTRIBUTE_FUNCTION","ATTRIBUTE_ACTION","ATTRIBUTE_ENTITY_SET","ATTRIBUTE_UNDERLYING_TYPE","ATTRIBUTE_EXTENDS","ATTRIBUTE_BASE_TERM","ATTRIBUTE_APPLIES_TO","getAttributeValue","ATTRIBUTE_NULLABLE","ATTRIBUTE_UNICODE","ATTRIBUTE_OPEN_TYPE","ATTRIBUTE_HAS_STREAM","ATTRIBUTE_IS_BOUND","ATTRIBUTE_IS_COMPOSABLE","ATTRIBUTE_CONTAINS_TARGET","ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT","ATTRIBUTE_ABSTRACT","ATTRIBUTE_IS_FLAGS","propertyValueToBoolean","ATTRIBUTE_VALUE","ATTRIBUTE_MAX_LENGTH","ATTRIBUTE_PRECISION","ATTRIBUTE_SCALE","propertyValueToNumber","attributeName","attribute","attributeValue","Number","ODataResponseAbstract","httpResponse","getHttpResponse","isOk","ok","getBodyAsJson","getBodyAsText","status","statusText","valueString","_c","_d","json","ODataResponse","contentType","parse","toMetadata","toEntitySet","ODATA_COUNT","toComplexCollection","toObject","toEntity","toComplexValue","toPropertyValue","toCount","toODataResponseBatch","ODataResponseBatch","odataResponses","parseResponses","getODataResponses","odataResponseCS","contentId","boundaryDelimiterCS","boundaryEndCS","batchPartStartIndex","boundaryDelimiterBatch","getBoundaryDelimiter","boundaryEndBatch","getBoundaryEnd","batchBodyLines","split","batchBodyLine","startsWith","getHeaderValue","odataResponse","createODataResponse","odataResponseCS_1","odataResponseCS_1_1","response","header","trim","boundary","boundaryDelimiter","batchPartEndIndex","statusLine","statusTextIndex","indexOf","httpHeaders","batchBodyLineParts","append","HttpResponse","HttpOptions","observe","params","reportProgress","responseType","withCredentials","ODataService","http","url","options","createHttpOptions","pipe","mergeETag","IF_MATCH_HEADER","Injectable","HttpClient","Filter","FilterHasProperty","setProperty","getProperty","FilterComparison","OperatorComparison","FilterFunction","FilterFunctionString","FilterContains","FilterEndswith","FilterStartswith","FilterLength","FilterIndexof","FilterSubstring","FilterTolower","FilterToupper","FilterTrim","FilterConcat","FilterHasFilter","getFilter","ANY","ALL","PROPERTY_COLLECTION","FilterLambda","lambdaCollection","propertyOrEntitySet","lambdaOperator","LambdaCollection","checkProperty","replaceProperty","LambdaOperator","filterChild","filterChild_1","filterChild_1_1","f","filterChild_2","filterChild_2_1","FilterLogical","filters","Search","SearchLogical","values","SearchSimple","SearchPhrase","ODataModule","NgModule","args","imports","CommonModule","HttpClientModule","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum OperatorComparison {\n    EQ, NE, GT, GE, LT, LE, HAS\n}\n\nexport enum OperatorLogical {\n    AND, OR, NOT\n}\n\nexport enum OperatorArithmetic {\n    ADD, SUB, MUL, DIV, MOD\n}\n","export class QuotedString {\n    constructor(private value: string) { }\n    toString(): string {\n        return this.value;\n    }\n}\n","import { OperatorLogical } from '../query-options/operator';\n\nimport { QuotedString } from '../odata-query/quoted-string';\n\nexport class Utils {\n    static isNull(value: any): boolean {\n        return value === null;\n    }\n\n    static isUndefined(value: any): boolean {\n        return value === undefined;\n    }\n\n    static isNullOrUndefined(value: any): boolean {\n        return Utils.isNull(value) || Utils.isUndefined(value);\n    }\n\n    static isNotNullNorUndefined(value: any): boolean {\n        return !Utils.isNull(value) && !Utils.isUndefined(value);\n    }\n\n    static isEmpty(value: any): boolean {\n        if (Utils.isNullOrUndefined(value)\n            || typeof (value) === 'string' && !value.length\n            || value instanceof Array && !value.length\n            || typeof (value.isEmpty) === 'function' && value.isEmpty()) {\n            return true;\n        }\n        if (value instanceof Array && value) {\n            for (const v of value) {\n                if (!Utils.isEmpty(v)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    static requireNull(fieldValue: any, fieldName: string) {\n        if (fieldValue !== null) {\n            throw new Error(fieldName + ' must be null');\n        }\n    }\n\n    static requireUndefined(fieldValue: any, fieldName: string) {\n        if (fieldValue !== undefined) {\n            throw new Error(fieldName + ' must be undefined');\n        }\n    }\n\n    static requireNotNull(fieldValue: any, fieldName: string) {\n        if (fieldValue === null) {\n            throw new Error(fieldName + ' cannot be null');\n        }\n    }\n\n    static requireNotUndefined(fieldValue: any, fieldName: string) {\n        if (fieldValue === undefined) {\n            throw new Error(fieldName + ' cannot be undefined');\n        }\n    }\n\n    static requireNotNullNorUndefined(fieldValue: any, fieldName: string) {\n        Utils.requireNotNull(fieldValue, fieldName);\n        Utils.requireNotUndefined(fieldValue, fieldName);\n    }\n\n    static requireNullOrUndefined(fieldValue: any, fieldName: string) {\n        if (!Utils.isNull(fieldValue) && !Utils.isUndefined(fieldValue)) {\n            throw new Error(fieldName + ' must be null or undefined');\n        }\n    }\n\n    static requireNotEmpty(fieldValue: any, fieldName: string) {\n        if (Utils.isEmpty(fieldValue)) {\n            throw new Error(fieldName + ' cannot be empty');\n        }\n    }\n\n    static requireNotNegative(fieldValue: number, fieldName: string) {\n        if (fieldValue < 0) {\n            throw new Error(fieldName + ' cannot be negative');\n        }\n    }\n\n    static appendSegment(path: string, segment: string): string {\n        Utils.requireNotNullNorUndefined(path, 'path');\n        Utils.requireNotNullNorUndefined(segment, 'segment');\n        if (!path.endsWith('/')) {\n            path += '/';\n        }\n        return path + segment;\n    }\n\n    static removeEndingSeparator(value: string): string {\n        Utils.requireNotNullNorUndefined(value, 'value');\n        if (value.endsWith('/')) {\n            if (value.length === 1) {\n                return '';\n            }\n            return value.substring(0, value.length - 1);\n        }\n        return value;\n    }\n\n    static getValueURI(value: boolean | number | string | QuotedString, encodeURI: boolean): any {\n        Utils.requireNotUndefined(value, 'value');\n        Utils.requireNotNullNorUndefined(encodeURI, 'encodeURI');\n\n        let res: any = value;\n\n        if (typeof (res) === 'string') {\n            // encode uri component\n            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {\n                res = encodeURIComponent(res);\n            }\n        } else if (res instanceof QuotedString) {\n            // escape single quote\n            res = res.toString().replace(/'/g, '\\'\\'');\n\n            // encode uri component\n            if (Utils.isNotNullNorUndefined(encodeURI) && encodeURI) {\n                res = encodeURIComponent(res);\n            }\n\n            // add start/ending quotes\n            res = '\\'' + res + '\\'';\n        }\n\n        // boolean, number\n        return res;\n    }\n\n    static toString(items: any[], operator?: OperatorLogical, operatorUppercase: boolean = false): string {\n        let res = '';\n        if (Utils.isNullOrUndefined(items) || !items.length) {\n            return res;\n        }\n\n        for (const item of items) {\n            if (res.length) {\n                if (Utils.isNotNullNorUndefined(operator)) {\n                    const operatorString: string = Utils.getOperatorString(operator, operatorUppercase);\n                    res += ` ${operatorString} `;\n                } else {\n                    res += ',';\n                }\n            }\n            if (Utils.isNotNullNorUndefined(operator) && operator === OperatorLogical.NOT) {\n                const operatorString: string = Utils.getOperatorString(operator, operatorUppercase);\n                res += `${operatorString} `;\n            }\n\n            res += item;\n        }\n\n        if (Utils.isNotNullNorUndefined(operator)) {\n            return `(${res})`;\n        }\n\n        return res;\n    }\n\n    protected static getOperatorString(operator: OperatorLogical, operatorUppercase: boolean): string {\n        let operatorString: string = OperatorLogical[operator].toLowerCase();\n        if (Utils.isNotNullNorUndefined(operatorUppercase) && operatorUppercase) {\n            operatorString = operatorString.toUpperCase();\n        }\n        return operatorString;\n    }\n}\n","import { Utils } from '../utils/utils';\nimport { ODataService } from '../odata-service/odata.service';\n\nexport abstract class ODataQueryAbstract {\n  protected odataService: ODataService;\n  protected serviceRoot: string;\n  protected queryString: string;\n\n  constructor(odataService: ODataService, serviceRoot: string) {\n    Utils.requireNotNullNorUndefined(odataService, 'odataService');\n    Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');\n    Utils.requireNotEmpty(serviceRoot, 'serviceRoot');\n    this.odataService = odataService;\n    this.serviceRoot = serviceRoot;\n    this.queryString = serviceRoot;\n  }\n\n  abstract toString();\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { UUID } from 'angular2-uuid';\nimport { Observable } from 'rxjs';\nimport { ODataResponse } from '../odata-response/odata-response';\nimport { HttpOptionsI } from '../odata-service/http-options';\nimport { ODataService } from '../odata-service/odata.service';\nimport { Utils } from '../utils/utils';\nimport { ODataQuery } from './odata-query';\nimport { ODataQueryAbstract } from './odata-query-abstract';\n\n\nexport enum Method {\n  GET, POST, PUT, PATCH, DELETE\n}\n\nexport class BatchRequest {\n  constructor(\n    public method: Method,\n    public odataQuery: ODataQuery,\n    public body?: any,\n    public httpOptions?: HttpOptionsI) { }\n}\n\nexport class ODataQueryBatch extends ODataQueryAbstract {\n  private static readonly BOUNDARY_PREFIX_SUFFIX = '--';\n  private static readonly BATCH_PREFIX = 'batch_';\n  private static readonly CHANGESET_PREFIX = 'changeset_';\n  private static readonly NEWLINE = '\\r\\n';\n\n  // CONSTANT SEGMENTS\n  private static readonly $BATCH = '$batch';\n\n  // HEADERS\n  private static readonly HTTP11 = 'HTTP/1.1';\n  private static readonly ODATA_VERSION = 'OData-Version';\n  private static readonly CONTENT_TYPE = 'Content-Type';\n  private static readonly ACCEPT = 'Accept';\n  private static readonly CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';\n  private static readonly CONTENT_ID = 'Content-ID';\n\n  // HEADER VALUES\n  private static readonly VERSION_4_0 = '4.0';\n  private static readonly MULTIPART_MIXED = 'multipart/mixed';\n  private static readonly MULTIPART_MIXED_BOUNDARY = 'multipart/mixed;boundary=';\n  private static readonly APPLICATION_HTTP = 'application/http';\n  private static readonly BINARY = 'binary';\n  private static readonly APPLICATION_JSON = 'application/json';\n\n  // VARIABLES\n  private requests: BatchRequest[];\n  private batchBoundary: string;\n  private changesetBoundary: string;\n  private changesetID: number;\n\n  constructor(odataService: ODataService, serviceRoot: string) {\n    super(odataService, serviceRoot);\n    Utils.requireNotNullNorUndefined(odataService, 'odataService');\n    Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');\n    Utils.requireNotEmpty(serviceRoot, 'serviceRoot');\n    this.queryString = Utils.appendSegment(serviceRoot, ODataQueryBatch.$BATCH);\n    this.requests = [];\n    this.batchBoundary = ODataQueryBatch.BATCH_PREFIX + this.getUUID();\n    this.changesetBoundary = null;\n    this.changesetID = 1;\n  }\n\n  get(odataQuery: ODataQuery, httpOptions?: HttpOptionsI): ODataQueryBatch {\n    Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');\n    this.requests.push(new BatchRequest(Method.GET, odataQuery, undefined, httpOptions));\n    return this;\n  }\n\n  post(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch {\n    Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');\n    this.requests.push(new BatchRequest(Method.POST, odataQuery, body, httpOptions));\n    return this;\n  }\n\n  put(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch {\n    Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');\n    this.requests.push(new BatchRequest(Method.PUT, odataQuery, body, httpOptions));\n    return this;\n  }\n\n  patch(odataQuery: ODataQuery, body: any, httpOptions?: HttpOptionsI): ODataQueryBatch {\n    Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');\n    this.requests.push(new BatchRequest(Method.PATCH, odataQuery, body, httpOptions));\n    return this;\n  }\n\n  delete(odataQuery: ODataQuery, httpOptions?: HttpOptionsI): ODataQueryBatch {\n    Utils.requireNotNullNorUndefined(odataQuery, 'odataQuery');\n    this.requests.push(new BatchRequest(Method.DELETE, odataQuery, undefined, httpOptions));\n    return this;\n  }\n\n  execute(httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    // set headers\n    if (Utils.isNullOrUndefined(httpOptions)) {\n      httpOptions = {};\n    }\n    if (Utils.isNullOrUndefined(httpOptions.headers)) {\n      httpOptions.headers = new HttpHeaders();\n    }\n    httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ODATA_VERSION, ODataQueryBatch.VERSION_4_0);\n    httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.CONTENT_TYPE, ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.batchBoundary);\n    httpOptions.headers = httpOptions.headers.set(ODataQueryBatch.ACCEPT, ODataQueryBatch.MULTIPART_MIXED);\n\n    // send request\n    return this.odataService.post(this, this.getBody(), httpOptions);\n  }\n\n  toString(): string {\n    return this.queryString;\n  }\n\n  getBody(): string {\n    let res = '';\n\n    for (const request of this.requests) {\n      const method: Method = request.method;\n      const odataQuery: ODataQuery = request.odataQuery;\n      const httpOptions: HttpOptionsI = request.httpOptions;\n      const body: any = request.body;\n\n      // if method is GET and there is a changeset boundary open then close it\n      if (method === Method.GET && Utils.isNotNullNorUndefined(this.changesetBoundary)) {\n        res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;\n        this.changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (Utils.isNullOrUndefined(this.changesetBoundary)) {\n        res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.NEWLINE;\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (method !== Method.GET) {\n        if (Utils.isNullOrUndefined(this.changesetBoundary)) {\n          this.changesetBoundary = ODataQueryBatch.CHANGESET_PREFIX + this.getUUID();\n          res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.MULTIPART_MIXED_BOUNDARY + this.changesetBoundary + ODataQueryBatch.NEWLINE;\n          res += ODataQueryBatch.NEWLINE;\n        }\n        res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.NEWLINE;\n      }\n\n      res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_HTTP + ODataQueryBatch.NEWLINE;\n      res += ODataQueryBatch.CONTENT_TRANSFER_ENCODING + ': ' + ODataQueryBatch.BINARY + ODataQueryBatch.NEWLINE;\n\n      if (method !== Method.GET) {\n        res += ODataQueryBatch.CONTENT_ID + ': ' + this.changesetID++ + ODataQueryBatch.NEWLINE;\n      }\n\n      res += ODataQueryBatch.NEWLINE;\n      res += Method[method] + ' ' + odataQuery + ' ' + ODataQueryBatch.HTTP11 + ODataQueryBatch.NEWLINE;\n\n      res += this.getHeaders(method, httpOptions);\n\n      res += ODataQueryBatch.NEWLINE;\n      if (method === Method.GET || method === Method.DELETE) {\n        res += ODataQueryBatch.NEWLINE;\n      } else {\n        res += JSON.stringify(body) + ODataQueryBatch.NEWLINE;\n      }\n    }\n\n    if (res.length) {\n      if (Utils.isNotNullNorUndefined(this.changesetBoundary)) {\n        res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.changesetBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + ODataQueryBatch.NEWLINE;\n        this.changesetBoundary = null;\n      }\n      res += ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX + this.batchBoundary + ODataQueryBatch.BOUNDARY_PREFIX_SUFFIX;\n    }\n\n    return res;\n  }\n\n  protected getHeaders(method: Method, httpOptions: HttpOptionsI): string {\n    let res = '';\n\n    if (method === Method.POST || method === Method.PATCH || method === Method.PUT) {\n      res += ODataQueryBatch.CONTENT_TYPE + ': ' + ODataQueryBatch.APPLICATION_JSON + ODataQueryBatch.NEWLINE;\n    }\n\n    if (Utils.isNullOrUndefined(httpOptions) || Utils.isNullOrUndefined(httpOptions.headers)) {\n      return res;\n    }\n\n    for (const key of httpOptions.headers.keys()) {\n      res += key + ': ' + httpOptions.headers.getAll(key) + ODataQueryBatch.NEWLINE;\n    }\n\n    return res;\n  }\n\n  getUUID(): string {\n    return UUID.UUID();\n  }\n}\n","import { Utils } from '../../utils/utils';\nimport { Filter } from './filter';\n\nexport class FilterString implements Filter {\n    private filter: string;\n\n    constructor(filter: string) {\n        Utils.requireNotNullNorUndefined(filter, 'filter');\n        Utils.requireNotEmpty(filter, 'filter');\n        this.filter = filter;\n    }\n\n    toString(): string {\n        return this.filter;\n    }\n\n    isEmpty(): boolean {\n        return Utils.isNullOrUndefined(this.filter) || !this.filter.length;\n    }\n}\n","import { QueryOptions } from './query-options';\nimport { Utils } from '../utils/utils';\nimport { Filter } from './filter/filter';\nimport { Orderby } from './orderby';\nimport { Search } from './search/search';\n\nexport class Expand {\n    static readonly SEPARATOR = ';';\n    private entitySet: string;\n    private queryOptions: QueryOptions;\n\n    constructor(entitySet: string) {\n        Utils.requireNotNullNorUndefined(entitySet, 'entitySet');\n        Utils.requireNotEmpty(entitySet, 'entitySet');\n        this.entitySet = entitySet;\n        this.queryOptions = new QueryOptions(Expand.SEPARATOR);\n    }\n\n    // QUERY OPTIONS\n\n    select(select: string | string[]): Expand {\n        this.queryOptions.select(select);\n        return this;\n    }\n\n    filter(filter: string | Filter): Expand {\n        this.queryOptions.filter(filter);\n        return this;\n    }\n\n    expand(expand: string | Expand | Expand[]): Expand {\n        this.queryOptions.expand(expand);\n        return this;\n    }\n\n    orderby(orderby: string | Orderby[]): Expand {\n        this.queryOptions.orderby(orderby);\n        return this;\n    }\n\n    search(search: string | Search): Expand {\n        this.queryOptions.search(search);\n        return this;\n    }\n\n    skip(skip: number): Expand {\n        this.queryOptions.skip(skip);\n        return this;\n    }\n\n    top(top: number): Expand {\n        this.queryOptions.top(top);\n        return this;\n    }\n\n    customOption(key: string, value: string) {\n        this.queryOptions.customOption(key, value);\n        return this;\n    }\n\n    toString(): string {\n        let res: string = this.entitySet;\n        if (!Utils.isEmpty(this.queryOptions)) {\n            res += '(' + this.queryOptions + ')';\n        }\n        return res;\n    }\n\n    isEmpty(): boolean {\n        return Utils.isEmpty(this.entitySet);\n    }\n}\n","import { Utils } from '../utils/utils';\n\nexport enum Order {\n    ASC, DESC\n}\n\nexport class Orderby {\n    private property: string;\n    private order: Order;\n\n    constructor(property: string, order?: Order) {\n        Utils.requireNotNullNorUndefined(property, 'property');\n        this.property = property;\n        this.order = order;\n    }\n\n    toString() {\n        let res = this.property;\n        if (!Utils.isNullOrUndefined(this.order)) {\n            res += ' ' + Order[this.order].toLowerCase();\n        }\n        return res;\n    }\n}\n","import { FilterString } from './filter/filter-string';\nimport { Filter } from './filter/filter';\nimport { Expand } from './expand';\nimport { Utils } from '../utils/utils';\nimport { Orderby } from './orderby';\nimport { Search } from './search/search';\n\nexport class QueryOptions {\n  private _separator: string;\n  private _select: string[];\n  private _filter: Filter;\n  private _expand: Expand[];\n  private _orderby: Orderby[];\n  private _search: string | Search;\n  private _skip: number;\n  private _top: number;\n  private _count: boolean;\n  private _customOptions: Map<string, string>;\n  private _format: string;\n\n  constructor(separator: string) {\n    Utils.requireNotNullNorUndefined(separator, 'separator');\n    Utils.requireNotEmpty(separator, 'separator');\n    this._separator = separator;\n    this._select = null;\n    this._filter = null;\n    this._expand = null;\n    this._orderby = null;\n    this._search = null;\n    this._skip = null;\n    this._top = null;\n    this._count = null;\n    this._customOptions = null;\n    this._format = null;\n  }\n\n  select(select: string | string[]): QueryOptions {\n    if (Utils.isNullOrUndefined(select) || Utils.isEmpty(select)) {\n      this._select = null;\n    } else {\n      this._select = typeof (select) === 'string' ? [select] : select;\n    }\n    return this;\n  }\n\n  filter(filter: string | Filter): QueryOptions {\n    if (Utils.isNullOrUndefined(filter) || Utils.isEmpty(filter)) {\n      this._filter = null;\n    } else {\n      this._filter = typeof (filter) === 'string' ? new FilterString(filter) : filter;\n    }\n    return this;\n  }\n\n  expand(expand: string | Expand | Expand[]): QueryOptions {\n    if (Utils.isNullOrUndefined(expand) || Utils.isEmpty(expand)) {\n      this._expand = null;\n    } else {\n      this._expand = typeof (expand) === 'string' ? [new Expand(expand)] : expand instanceof Expand ? [expand] : expand;\n    }\n    return this;\n  }\n\n  orderby(orderby: string | Orderby[]): QueryOptions {\n    if (Utils.isNullOrUndefined(orderby) || Utils.isEmpty(orderby)) {\n      this._orderby = null;\n    } else {\n      this._orderby = typeof (orderby) === 'string' ? [new Orderby(orderby)] : orderby;\n    }\n    return this;\n  }\n\n  search(search: string | Search): QueryOptions {\n    this._search = search;\n    return this;\n  }\n\n  skip(skip: number): QueryOptions {\n    Utils.requireNotNegative(skip, 'skip');\n    this._skip = skip;\n    return this;\n  }\n\n  top(top: number): QueryOptions {\n    Utils.requireNotNegative(top, 'top');\n    this._top = top;\n    return this;\n  }\n\n  count(count: boolean): QueryOptions {\n    this._count = count;\n    return this;\n  }\n\n  format(format: string): QueryOptions {\n    this._format = format;\n    return this;\n  }\n\n  customOption(key: string, value: string) {\n    Utils.requireNotNullNorUndefined(key, 'key');\n    if (Utils.isNullOrUndefined(this._customOptions)) {\n      this._customOptions = new Map<string, string>();\n    }\n    this._customOptions.set(key, value);\n    return this;\n  }\n\n  toString(): string {\n    // query options\n    let queryOptions = '';\n\n    // add select\n    if (!Utils.isNullOrUndefined(this._select) && !Utils.isEmpty(this._select)) {\n      queryOptions += '$select=';\n      if (typeof (this._select) === 'string') {\n        queryOptions += this._select;\n      } else {\n        queryOptions += Utils.toString(this._select);\n      }\n    }\n\n    // add filter\n    if (!Utils.isNullOrUndefined(this._filter) && !Utils.isEmpty(this._filter)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$filter=' + encodeURIComponent(this._filter.toString());\n    }\n\n    // add expand\n    if (!Utils.isNullOrUndefined(this._expand) && !Utils.isEmpty(this._expand)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$expand=';\n      if (typeof (this._expand) === 'string') {\n        queryOptions += this._expand;\n      } else {\n        queryOptions += Utils.toString(this._expand);\n      }\n    }\n\n    // add orderby\n    if (!Utils.isNullOrUndefined(this._orderby) && !Utils.isEmpty(this._orderby)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$orderby=';\n      if (typeof (this._orderby) === 'string') {\n        queryOptions += this._orderby;\n      } else {\n        queryOptions += Utils.toString(this._orderby);\n      }\n    }\n\n    // add search\n    if (!Utils.isNullOrUndefined(this._search) && !Utils.isEmpty(this._search)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$search=' + encodeURIComponent(this._search.toString());\n    }\n\n    // add skip\n    if (!Utils.isNullOrUndefined(this._skip) && !Utils.isEmpty(this._skip)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$skip=' + this._skip;\n    }\n\n    // add top\n    if (!Utils.isNullOrUndefined(this._top) && !Utils.isEmpty(this._top)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$top=' + this._top;\n    }\n\n    // add count\n    if (!Utils.isNullOrUndefined(this._count) && !Utils.isEmpty(this._count)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$count=' + this._count;\n    }\n\n    // add custom query options\n    if (Utils.isNotNullNorUndefined(this._customOptions) && this._customOptions.size > 0) {\n      this._customOptions.forEach((value: string, key: string, map: Map<string, string>) => {\n        if (Utils.isNotNullNorUndefined(key) && !Utils.isEmpty(key)\n          && Utils.isNotNullNorUndefined(value) && !Utils.isEmpty(value)) {\n          if (queryOptions.length) {\n            queryOptions += this._separator;\n          }\n          queryOptions += key + '=' + encodeURIComponent(value);\n        }\n      });\n    }\n\n    // add format\n    if (!Utils.isNullOrUndefined(this._format) && !Utils.isEmpty(this._format)) {\n      if (queryOptions.length) {\n        queryOptions += this._separator;\n      }\n      queryOptions += '$format=' + this._format;\n    }\n\n    return queryOptions;\n  }\n\n  isEmpty(): boolean {\n    for (const key in this) {\n      if (key === '_purpose' || key === '_separator') {\n        continue;\n      }\n      if (this.hasOwnProperty(key) && !Utils.isEmpty(this[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Observable } from 'rxjs';\n\nimport { ODataResponse } from '../odata-response/odata-response';\nimport { HttpOptionsI } from '../odata-service/http-options';\nimport { ODataService } from '../odata-service/odata.service';\nimport { Expand } from '../query-options/expand';\nimport { Filter } from '../query-options/filter/filter';\nimport { Orderby } from '../query-options/orderby';\nimport { QueryOptions } from '../query-options/query-options';\nimport { Search } from '../query-options/search/search';\nimport { Utils } from '../utils/utils';\nimport { ODataQueryAbstract } from './odata-query-abstract';\nimport { ODataQueryBatch } from './odata-query-batch';\n\nexport class ODataQuery extends ODataQueryAbstract {\n  // QUERY OPTIONS SEPARATOR\n  static readonly SEPARATOR = '&';\n\n  // SEGMENT NAMES\n  private static readonly METADATA = 'metadata';\n  private static readonly ENTITY_SET = 'entitySet';\n  private static readonly ENTITY_KEY = 'entityKey';\n  private static readonly SINGLETON = 'singleton';\n  private static readonly TYPE_NAME = 'typeName';\n  private static readonly PROPERTY = 'property';\n  private static readonly NAVIGATION_PROPERTY = 'navigationProperty';\n  private static readonly REF = 'ref';\n  private static readonly VALUE = 'value';\n  private static readonly COUNT = 'count';\n  private static readonly FUNCTION_CALL = 'functionCall';\n  private static readonly ACTION_CALL = 'actionCall';\n\n  // CONSTANT SEGMENTS\n  private static readonly $METADATA = '$metadata';\n  private static readonly $REF = '$ref';\n  private static readonly $VALUE = '$value';\n  private static readonly $COUNT = '$count';\n\n  // VARIABLES\n  private queryOptions: QueryOptions;\n  private segments: string[];\n  private lastSegment: string;\n\n  constructor(odataService: ODataService, serviceRoot: string) {\n    super(odataService, serviceRoot);\n    Utils.requireNotNullNorUndefined(odataService, 'odataService');\n    Utils.requireNotNullNorUndefined(serviceRoot, 'serviceRoot');\n    Utils.requireNotEmpty(serviceRoot, 'serviceRoot');\n    this.queryOptions = new QueryOptions(ODataQuery.SEPARATOR);\n    this.segments = [];\n    this.lastSegment = null;\n  }\n\n  // QUERY SEGMENTS\n\n  metadata(): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.METADATA), ODataQuery.METADATA);\n    if (this.segments.length) {\n      throw new Error('metadata segment cannot be appended to other segments');\n    }\n    this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$METADATA);\n    this.addSegment(ODataQuery.METADATA);\n    return this;\n  }\n\n  entitySet(entitySet: string): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.ENTITY_SET), ODataQuery.ENTITY_SET);\n    Utils.requireNotNullNorUndefined(entitySet, 'entitySet');\n    Utils.requireNotEmpty(entitySet, 'entitySet');\n    this.queryString = Utils.appendSegment(this.queryString, entitySet);\n    this.addSegment(ODataQuery.ENTITY_SET);\n    return this;\n  }\n\n  entityKey(entityKey: any | any[]): ODataQuery {\n    if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {\n      throw new Error('entityKey can only be appended to entitySet or navigationProperty');\n    }\n    Utils.requireNotNullNorUndefined(entityKey, 'entityKey');\n    Utils.requireNotEmpty(entityKey, 'entityKey');\n    entityKey = Utils.getValueURI(entityKey, true);\n    this.queryString = Utils.removeEndingSeparator(this.queryString) + '(' + entityKey + ')';\n    this.addSegment(ODataQuery.ENTITY_KEY);\n    return this;\n  }\n\n  singleton(singleton: string) {\n    if (this.segments.length) {\n      throw new Error('singleton segment cannot be appended to other segments');\n    }\n    Utils.requireNotNullNorUndefined(singleton, 'singleton');\n    Utils.requireNotEmpty(singleton, 'singleton');\n    this.queryString = Utils.appendSegment(this.queryString, singleton);\n    this.addSegment(ODataQuery.SINGLETON);\n    return this;\n  }\n\n  typeName(typeName: string) {\n    if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY && this.lastSegment !== ODataQuery.ENTITY_KEY) {\n      throw new Error('typeName can only be appended to entitySet, navigationProperty or entityKey');\n    }\n    Utils.requireNotNullNorUndefined(typeName, 'typeName');\n    Utils.requireNotEmpty(typeName, 'typeName');\n    this.queryString = Utils.appendSegment(this.queryString, typeName);\n    this.addSegment(ODataQuery.TYPE_NAME);\n    return this;\n  }\n\n  property(property: string): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.PROPERTY), ODataQuery.PROPERTY);\n    if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON) {\n      throw new Error('property can only be appended to entityKey or singleton');\n    }\n    Utils.requireNotNullNorUndefined(property, 'property');\n    Utils.requireNotEmpty(property, 'property');\n    this.queryString = Utils.appendSegment(this.queryString, property);\n    this.addSegment(ODataQuery.PROPERTY);\n    return this;\n  }\n\n  navigationProperty(navigationProperty: string): ODataQuery {\n    if (this.lastSegment !== ODataQuery.ENTITY_KEY && this.lastSegment !== ODataQuery.SINGLETON && this.lastSegment !== ODataQuery.TYPE_NAME) {\n      throw new Error('navigationProperty can only be appended to entityKey, singleton or typeName');\n    }\n    Utils.requireNotNullNorUndefined(navigationProperty, 'navigationProperty');\n    Utils.requireNotEmpty(navigationProperty, 'navigationProperty');\n    this.queryString = Utils.appendSegment(this.queryString, navigationProperty);\n    this.addSegment(ODataQuery.NAVIGATION_PROPERTY);\n    return this;\n  }\n\n  ref(): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.REF), ODataQuery.REF);\n    if (this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {\n      throw new Error('ref can only be appended to navigationProperty');\n    }\n    this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$REF);\n    this.addSegment(ODataQuery.REF);\n    return this;\n  }\n\n  value(): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.VALUE), ODataQuery.VALUE);\n    if (this.lastSegment !== ODataQuery.PROPERTY) {\n      throw new Error('value can only be appended to property');\n    }\n    this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$VALUE);\n    this.addSegment(ODataQuery.VALUE);\n    return this;\n  }\n\n  countSegment(): ODataQuery {\n    Utils.requireNullOrUndefined(this.getSegment(ODataQuery.COUNT), ODataQuery.COUNT);\n    if (this.lastSegment !== ODataQuery.ENTITY_SET && this.lastSegment !== ODataQuery.NAVIGATION_PROPERTY) {\n      throw new Error('count can only be appended to entitySet or navigationProperty');\n    }\n    this.queryString = Utils.appendSegment(this.queryString, ODataQuery.$COUNT);\n    this.addSegment(ODataQuery.COUNT);\n    return this;\n  }\n\n  functionCall(functionCall: string): ODataQuery {\n    Utils.requireNotNullNorUndefined(functionCall, 'functionCall');\n    Utils.requireNotEmpty(functionCall, 'functionCall');\n    this.queryString = Utils.appendSegment(this.queryString, functionCall);\n    this.addSegment(ODataQuery.FUNCTION_CALL);\n    return this;\n  }\n\n  actionCall(actionCall: string): ODataQuery {\n    Utils.requireNotNullNorUndefined(actionCall, 'actionCall');\n    Utils.requireNotEmpty(actionCall, 'actionCall');\n    this.queryString = Utils.appendSegment(this.queryString, actionCall);\n    this.addSegment(ODataQuery.ACTION_CALL);\n    return this;\n  }\n\n  batch(): ODataQueryBatch {\n    return new ODataQueryBatch(this.odataService, this.serviceRoot);\n  }\n\n  // QUERY OPTIONS\n\n  select(select: string | string[]): ODataQuery {\n    this.queryOptions.select(select);\n    return this;\n  }\n\n  filter(filter: string | Filter): ODataQuery {\n    this.queryOptions.filter(filter);\n    return this;\n  }\n\n  expand(expand: string | Expand | Expand[]): ODataQuery {\n    this.queryOptions.expand(expand);\n    return this;\n  }\n\n  orderby(orderby: string | Orderby[]): ODataQuery {\n    this.queryOptions.orderby(orderby);\n    return this;\n  }\n\n  search(search: string | Search): ODataQuery {\n    this.queryOptions.search(search);\n    return this;\n  }\n\n  skip(skip: number): ODataQuery {\n    this.queryOptions.skip(skip);\n    return this;\n  }\n\n  top(top: number): ODataQuery {\n    this.queryOptions.top(top);\n    return this;\n  }\n\n  countOption(count: boolean): ODataQuery {\n    this.queryOptions.count(count);\n    return this;\n  }\n\n  customOption(key: string, value: string) {\n    this.queryOptions.customOption(key, value);\n    return this;\n  }\n\n  format(format: string): ODataQuery {\n    this.queryOptions.format(format);\n    return this;\n  }\n\n  // QUERY EXECUTION\n\n  get(httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    return this.odataService.get(this, httpOptions);\n  }\n\n  post(body: any, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    return this.odataService.post(this, body, httpOptions);\n  }\n\n  patch(body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    return this.odataService.patch(this, body, etag, httpOptions);\n  }\n\n  put(body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    return this.odataService.put(this, body, etag, httpOptions);\n  }\n\n  delete(etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    return this.odataService.delete(this, etag, httpOptions);\n  }\n\n  toString(): string {\n    let res: string = this.queryString;\n    if (Utils.isNotNullNorUndefined(this.queryOptions) && !this.queryOptions.isEmpty()) {\n      res += '?' + this.queryOptions.toString();\n    }\n    return res;\n  }\n\n  protected getSegment(segment: string): string {\n    Utils.requireNotNull(segment, 'segment');\n    const res: string = this.segments.find((value: string, index: number, segments: string[]) => {\n      return value === segment;\n    });\n    return res;\n  }\n\n  protected addSegment(segment: string): void {\n    Utils.requireNotNull(segment, 'segment');\n    this.segments.push(segment);\n    if (Utils.isNotNullNorUndefined(this.segments) && this.segments.length) {\n      this.lastSegment = this.segments[this.segments.length - 1];\n    }\n  }\n}\n","export class CsdlAnnotable {\n    constructor(public annotationList?: CsdlAnnotation[]) { }\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n    constructor(\n        public target: string,\n        annotationList: CsdlAnnotation[],\n        public qualifier?: string\n    ) {\n        super(annotationList);\n    }\n}\n\nexport class CsdlAnnotation {\n    constructor(\n        public term: string,\n        public qualifier?: string\n    ) { }\n}\n\nexport class CsdlTerm {\n    constructor(\n        public name: string,\n        public type: string,\n        public baseTerm?: string,\n        public defaultValue?: string,\n        public appliesTo?: string,\n        public nullable?: boolean,\n        public maxLength?: number,\n        public precision?: number,\n        public scale?: number,\n        public srid?: string\n    ) { }\n}\n","import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n    constructor(\n        public name: string,\n        public extend?: string,\n        public entitySets?: CsdlEntitySet[],\n        public singletons?: CsdlSingleton[],\n        public functionImports?: CsdlFunctionImport[],\n        public actionImports?: CsdlActionImport[]\n    ) { }\n}\n","import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n    constructor(\n        public name: string,\n        public entityType: string,\n        public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n        public includeInServiceDocument?: boolean\n    ) {\n\n    }\n}\n","export class CsdlEnumType {\n    constructor(\n        public name: string,\n        public members: CsdlEnumMember[],\n        public underlyingType?: string,\n        public isFlags?: boolean\n    ) { }\n}\n\nexport class CsdlEnumMember {\n    constructor(\n        public name: string,\n        public value?: number\n    ) { }\n}\n","export class CsdlFunction {\n    constructor(\n        public name: string,\n        public returnType: CsdlReturnType,\n        public isBound?: boolean,\n        public entitySetPath?: string,\n        public isComposable?: boolean,\n        public parameters?: CsdlParameter[]\n    ) { }\n}\n\nexport class CsdlAction {\n    constructor(\n        public name: string,\n        public returnType?: CsdlReturnType,\n        public isBound?: boolean,\n        public entitySetPath?: string,\n        public parameters?: CsdlParameter[]\n    ) { }\n}\n\nexport class CsdlFunctionImport {\n    constructor(\n        public name: string,\n        public functionName: string,\n        public entitySet?: string,\n        public IncludeInServiceDocument?: boolean\n    ) { }\n}\n\nexport class CsdlActionImport {\n    constructor(\n        public name: string,\n        public action: string,\n        public entitySet?: string\n    ) { }\n}\n\nexport class CsdlParameter {\n    constructor(\n        public name: string,\n        public type: string,\n        public nullable?: boolean,\n        public maxLength?: number,\n        public precision?: number,\n        public scale?: number,\n        public srid?: string\n    ) { }\n}\n\nexport class CsdlReturnType {\n    constructor(\n        public type: string,\n        public nullable?: boolean,\n        public maxLength?: number,\n        public precision?: number,\n        public scale?: number,\n        public srid?: string\n    ) { }\n}\n","export class CsdlNavigationPropertyBinding {\n    constructor(\n        public path: string,\n        public target: string,\n    ) { }\n}\n","import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n    constructor(\n        public uri: string,\n        public includes?: CsdlInclude[],\n        public includeAnnotations?: CsdlIncludeAnnotations[],\n        annotationList?: CsdlAnnotation[]\n    ) {\n        super(annotationList);\n    }\n}\n\nexport class CsdlInclude {\n    constructor(\n        public namespace: string,\n        public alias?: string\n    ) { }\n}\n\nexport class CsdlIncludeAnnotations {\n    constructor(\n        public termNamespace: string,\n        public qualifier?: string,\n        public targetNamespace?: string\n    ) { }\n}\n","import { CsdlAnnotation, CsdlAnnotable, CsdlTerm, CsdlAnnotations } from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n    constructor(\n        public namespace: string,\n        public alias?: string,\n        public enumTypes?: CsdlEnumType[],\n        public complexTypes?: CsdlComplexType[],\n        public entityTypes?: CsdlEntityType[],\n        public functions?: CsdlFunction[],\n        public actions?: CsdlAction[],\n        public entityContainer?: CsdlEntityContainer,\n        public typeDefinitions?: CsdlTypeDefinition[],\n        public terms?: CsdlTerm[],\n        public annotationsList?: CsdlAnnotations[],\n        annotationList?: CsdlAnnotation[]\n    ) {\n        super(annotationList);\n    }\n}\n","import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n    constructor(\n        public name: string,\n        public type: string,\n        public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n    ) { }\n}\n","export abstract class CsdlStructuralProperty {\n    constructor(\n        public name: string,\n        public type: string,\n        public nullable?: boolean\n    ) { }\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n    constructor(\n        name: string,\n        type: string,\n        nullable?: boolean,\n        public maxLength?: number,\n        public precision?: number,\n        public scale?: number,\n        public unicode?: boolean,\n        public srid?: string,\n        public defaultValue?: string\n    ) {\n        super(name, type, nullable);\n    }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n    constructor(\n        name: string,\n        type: string,\n        nullable?: boolean,\n        public partner?: string,\n        public containsTarget?: boolean,\n        public referentialConstraints?: CsdlReferentialConstraint[],\n        public onDelete?: CsdlOnDelete,\n    ) {\n        super(name, type, nullable);\n    }\n}\n\nexport class CsdlReferentialConstraint {\n    constructor(\n        public property: string,\n        public referencedProperty: string\n    ) { }\n}\n\nexport class CsdlOnDelete {\n    constructor(\n        public action: string\n    ) { }\n}\n","import { CsdlProperty, CsdlNavigationProperty } from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n    constructor(\n        public name: string,\n        public properties?: CsdlProperty[],\n        public navigationProperties?: CsdlNavigationProperty[],\n        public baseType?: string,\n        public openType?: boolean,\n        public abstract?: boolean\n    ) { }\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n    constructor(\n        name: string,\n        properties?: CsdlProperty[],\n        navigationProperties?: CsdlNavigationProperty[],\n        baseType?: string,\n        openType?: boolean,\n        abstract?: boolean\n    ) {\n        super(name, properties, navigationProperties, baseType, openType, abstract);\n    }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n    constructor(\n        name: string,\n        public key?: CsdlKey,\n        properties?: CsdlProperty[],\n        navigationProperties?: CsdlNavigationProperty[],\n        baseType?: string,\n        openType?: boolean,\n        abstract?: boolean,\n        public hasStream?: boolean\n    ) {\n        super(name, properties, navigationProperties, baseType, openType, abstract);\n    }\n}\n\nexport class CsdlKey {\n    constructor(\n        public propertyRefs: CsdlPropertyRef[],\n    ) { }\n}\n\nexport class CsdlPropertyRef {\n    constructor(\n        public name: string,\n        public alias?: string\n    ) { }\n}\n","import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n    constructor(\n        public name: string,\n        public underlayingType: string,\n        public maxLength?: number,\n        public precision?: number,\n        public scale?: number,\n        public unicode?: boolean,\n        public srid?: string,\n        annotationList?: CsdlAnnotation[]) {\n        super(annotationList);\n    }\n}\n","import { Utils } from '../utils/utils';\nexport class EntitySet<T> {\n    private entities: T[];\n    private count: number;\n\n    constructor(entities: T[], count: number, type: (new () => T)) {\n        Utils.requireNotNullNorUndefined(entities, 'entities');\n        this.entities = [];\n        entities.forEach(entity => {\n            if (Utils.isNullOrUndefined(type)) {\n                this.entities.push(Object.assign({}, entity));\n            } else {\n                this.entities.push(Object.assign(new type(), entity));\n            }\n        });\n        this.count = count;\n    }\n\n    getEntities(): T[] {\n        return this.entities;\n    }\n\n    getCount(): number {\n        return this.count;\n    }\n}\n","import { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { Utils } from '../utils/utils';\nimport { CsdlEnumType, CsdlEnumMember } from './csdl/csdl-enum-type';\nimport { CsdlEntityType, CsdlPropertyRef, CsdlKey, CsdlComplexType } from './csdl/csdl-structured-type';\nimport { CsdlFunction, CsdlParameter, CsdlFunctionImport, CsdlActionImport, CsdlReturnType, CsdlAction } from './csdl/csdl-function-action';\nimport { CsdlProperty, CsdlNavigationProperty, CsdlReferentialConstraint, CsdlOnDelete } from './csdl/csdl-structural-property';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlReference, CsdlInclude, CsdlIncludeAnnotations } from './csdl/csdl-reference';\nimport { CsdlAnnotation, CsdlTerm, CsdlAnnotations } from './csdl/csdl-annotation';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\n\nexport enum FieldType {\n    ATTRIBUTE, TAG\n}\nexport class Field {\n    constructor(public name: string, public fieldType: FieldType) { }\n}\n\nexport class Metadata {\n    // TAGS\n    private static readonly TAG_EDMX = 'edmx:Edmx';\n    private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n    private static readonly TAG_REFERENCE = 'edmx:Reference';\n    private static readonly TAG_INCLUDE = 'edmx:Include';\n    private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n    private static readonly TAG_TERM = 'Term';\n    private static readonly TAG_ANNOTATIONS = 'Annotations';\n    private static readonly TAG_ANNOTATION = 'Annotation';\n    private static readonly TAG_SCHEMA = 'Schema';\n    private static readonly TAG_ENUM_TYPE = 'EnumType';\n    private static readonly TAG_MEMBER = 'Member';\n    private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n    private static readonly TAG_ENTITY_TYPE = 'EntityType';\n    private static readonly TAG_PROPERTY = 'Property';\n    private static readonly TAG_KEY = 'Key';\n    private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n    private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n    private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n    private static readonly TAG_ON_DELETE = 'OnDelete';\n    private static readonly TAG_FUNCTION = 'Function';\n    private static readonly TAG_RETURN_TYPE = 'ReturnType';\n    private static readonly TAG_PARAMETER = 'Parameter';\n    private static readonly TAG_ACTION = 'Action';\n    private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n    private static readonly TAG_ENTITY_SET = 'EntitySet';\n    private static readonly TAG_SINGLETON = 'Singleton';\n    private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n    private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n    private static readonly TAG_NAVIGATION_PROPERTY_BINDING = 'NavigationPropertyBinding';\n    private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n    // ATTRIBUTES\n    private static readonly ATTRIBUTE_VERSION = 'Version';\n    private static readonly ATTRIBUTE_URI = 'Uri';\n    private static readonly ATTRIBUTE_ALIAS = 'Alias';\n    private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n    private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n    private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n    private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n    private static readonly ATTRIBUTE_TERM = 'Term';\n    private static readonly ATTRIBUTE_NAME = 'Name';\n    private static readonly ATTRIBUTE_VALUE = 'Value';\n    private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n    private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n    private static readonly ATTRIBUTE_TYPE = 'Type';\n    private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n    private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n    private static readonly ATTRIBUTE_PRECISION = 'Precision';\n    private static readonly ATTRIBUTE_SCALE = 'Scale';\n    private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n    private static readonly ATTRIBUTE_SRID = 'SRID';\n    private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n    private static readonly ATTRIBUTE_PARTNER = 'Partner';\n    private static readonly ATTRIBUTE_PROPERTY = 'Property';\n    private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n    private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n    private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n    private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n    private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n    private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n    private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n    private static readonly ATTRIBUTE_PATH = 'Path';\n    private static readonly ATTRIBUTE_TARGET = 'Target';\n    private static readonly ATTRIBUTE_FUNCTION = 'Function';\n    private static readonly ATTRIBUTE_ACTION = 'Action';\n    private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n    private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT = 'IncludeInServiceDocument';\n    private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n    private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n    private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n    private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n    private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n    private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n    public readonly version: string;\n    public readonly references: CsdlReference[];\n    public readonly schemas: CsdlSchema[];\n\n    constructor(xml: string) {\n        try {\n            const parser: DOMParser = new DOMParser();\n            const document: Document = parser.parseFromString(xml, 'text/xml');\n\n            this.checkVersion(document);\n\n            this.version = this.getFieldValueByAttribute(\n                new Field(Metadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n                document.documentElement.attributes);\n\n            this.references = this.getObjects(document.documentElement, Metadata.TAG_REFERENCE, [\n                new Field(Metadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n                new Field(Metadata.TAG_INCLUDE, FieldType.TAG),\n                new Field(Metadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)\n            ]);\n\n            const dataServices: Element = document.documentElement.getElementsByTagName(Metadata.TAG_DATA_SERVICES)[0];\n            this.schemas = this.getObjects(dataServices, Metadata.TAG_SCHEMA, [\n                new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n                new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n                new Field(Metadata.TAG_ENUM_TYPE, FieldType.TAG),\n                new Field(Metadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n                new Field(Metadata.TAG_ENTITY_TYPE, FieldType.TAG),\n                new Field(Metadata.TAG_FUNCTION, FieldType.TAG),\n                new Field(Metadata.TAG_ACTION, FieldType.TAG),\n                new Field(Metadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n                new Field(Metadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n                new Field(Metadata.TAG_TERM, FieldType.TAG),\n                new Field(Metadata.TAG_ANNOTATIONS, FieldType.TAG),\n                new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)\n            ]);\n        } catch (error) {\n            throw new Error('Unable to parse metadata, ' + error);\n        }\n    }\n\n    protected checkVersion(document: Document) {\n        // check version\n        const attributes: NamedNodeMap = document.documentElement.attributes;\n        if (Utils.isNullOrUndefined(attributes)) {\n            throw new Error('OData version is not specified in the metadata');\n        }\n        const attr: Attr = attributes.getNamedItem('Version');\n        if (Utils.isNullOrUndefined(attr)) {\n            throw new Error('OData version is not specified in the metadata');\n        }\n        const odataVersion: string = attr.nodeValue;\n        if (odataVersion !== '4.0') {\n            throw new Error('OData version \"' + odataVersion + '\" is not supported');\n        }\n    }\n\n    protected getObjects(parentElement: Element, tag: string, fieldNames: Field[]): any[] {\n        let objects: any[];\n\n        const children: HTMLCollection = parentElement.children;\n        for (let index = 0; index < children.length; index++) {\n            const element: Element = children.item(index);\n\n            if (element.nodeName !== tag) {\n                continue;\n            }\n\n            const attributes: NamedNodeMap = element.attributes;\n            const fieldValues: any[] = this.getFieldValues(fieldNames, attributes, element);\n            if (Utils.isNullOrUndefined(objects)) {\n                objects = [];\n            }\n            switch (tag) {\n                case Metadata.TAG_REFERENCE:\n                    objects.push(new CsdlReference(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3]));\n                    break;\n                case Metadata.TAG_INCLUDE:\n                    objects.push(new CsdlInclude(\n                        fieldValues[0],\n                        fieldValues[1]));\n                    break;\n                case Metadata.TAG_INCLUDE_ANNOTATIONS:\n                    objects.push(new CsdlIncludeAnnotations(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2]));\n                    break;\n                case Metadata.TAG_TERM:\n                    objects.push(new CsdlTerm(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6],\n                        fieldValues[7],\n                        fieldValues[8],\n                        fieldValues[9]\n                    ));\n                    break;\n                case Metadata.TAG_ANNOTATIONS:\n                    objects.push(new CsdlAnnotations(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2]\n                    ));\n                    break;\n                case Metadata.TAG_ANNOTATION:\n                    objects.push(new CsdlAnnotation(\n                        fieldValues[0],\n                        fieldValues[1]\n                    ));\n                    break;\n                case Metadata.TAG_SCHEMA:\n                    objects.push(new CsdlSchema(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6],\n                        fieldValues[7],\n                        fieldValues[8],\n                        fieldValues[9],\n                        fieldValues[10],\n                        fieldValues[11]));\n                    break;\n                case Metadata.TAG_ENUM_TYPE:\n                    objects.push(new CsdlEnumType(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3]));\n                    break;\n                case Metadata.TAG_COMPLEX_TYPE:\n                    objects.push(new CsdlComplexType(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5]));\n                    break;\n                case Metadata.TAG_ENTITY_TYPE:\n                    objects.push(new CsdlEntityType(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6],\n                        fieldValues[7]));\n                    break;\n                case Metadata.TAG_FUNCTION:\n                    objects.push(new CsdlFunction(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5]));\n                    break;\n                case Metadata.TAG_MEMBER:\n                    objects.push(new CsdlEnumMember(\n                        fieldValues[0],\n                        fieldValues[1]));\n                    break;\n                case Metadata.TAG_PROPERTY:\n                    objects.push(new CsdlProperty(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6],\n                        fieldValues[7],\n                        fieldValues[8]));\n                    break;\n                case Metadata.TAG_PROPERTY_REF:\n                    objects.push(new CsdlPropertyRef(\n                        fieldValues[0],\n                        fieldValues[1]));\n                    break;\n                case Metadata.TAG_NAVIGATION_PROPERTY:\n                    objects.push(new CsdlNavigationProperty(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6]));\n                    break;\n                case Metadata.TAG_REFERENTIAL_CONSTRAINT:\n                    objects.push(new CsdlReferentialConstraint(\n                        fieldValues[0],\n                        fieldValues[1]));\n                    break;\n                case Metadata.TAG_PARAMETER:\n                    objects.push(new CsdlParameter(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6]));\n                    break;\n                case Metadata.TAG_ACTION:\n                    objects.push(new CsdlAction(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4]));\n                    break;\n                case Metadata.TAG_ENTITY_SET:\n                    objects.push(new CsdlEntitySet(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3]));\n                    break;\n                case Metadata.TAG_SINGLETON:\n                    objects.push(new CsdlSingleton(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2]));\n                    break;\n                case Metadata.TAG_FUNCTION_IMPORT:\n                    objects.push(new CsdlFunctionImport(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3]));\n                    break;\n                case Metadata.TAG_ACTION_IMPORT:\n                    objects.push(new CsdlActionImport(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2]));\n                    break;\n                case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:\n                    objects.push(new CsdlNavigationPropertyBinding(\n                        fieldValues[0],\n                        fieldValues[1]));\n                    break;\n                case Metadata.TAG_TYPE_DEFINITION:\n                    objects.push(new CsdlTypeDefinition(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5],\n                        fieldValues[6],\n                        fieldValues[7]));\n                    break;\n                default: throw new Error('Unknwon tag:' + tag);\n            }\n        }\n\n        return objects;\n    }\n\n    protected getObject(parentElement: Element, tag: string, fieldNames: Field[]): any {\n        let object: any;\n\n        const children: HTMLCollection = parentElement.children;\n        let element: Element;\n        for (let index = 0; index < children.length; index++) {\n            if (children.item(index).nodeName === tag) {\n                if (Utils.isNotNullNorUndefined(element)) {\n                    throw new Error('Expected one ' + tag);\n                }\n                element = children.item(index);\n            }\n        }\n\n        if (Utils.isNotNullNorUndefined(element)) {\n            const attributes: NamedNodeMap = element.attributes;\n            const fieldValues: any[] = this.getFieldValues(fieldNames, attributes, element);\n            switch (tag) {\n                case Metadata.TAG_KEY:\n                    object = new CsdlKey(fieldValues[0]);\n                    break;\n                case Metadata.TAG_RETURN_TYPE:\n                    object = new CsdlReturnType(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5]);\n                    break;\n                case Metadata.TAG_ENTITY_CONTAINER:\n                    object = new CsdlEntityContainer(\n                        fieldValues[0],\n                        fieldValues[1],\n                        fieldValues[2],\n                        fieldValues[3],\n                        fieldValues[4],\n                        fieldValues[5]);\n                    break;\n                case Metadata.TAG_ON_DELETE:\n                    object = new CsdlOnDelete(\n                        fieldValues[0]);\n                    break;\n                default: throw new Error('Unknwon tag:' + tag);\n            }\n        }\n\n        return object;\n    }\n\n    protected getFieldValues(fields: Field[], attributes: NamedNodeMap, element: Element): any[] {\n        const fieldValues: any[] = [];\n\n        for (const field of fields) {\n            if (field.fieldType === FieldType.TAG) {\n                fieldValues.push(this.getFieldValueByTag(field, element));\n            } else if (field.fieldType === FieldType.ATTRIBUTE) {\n                fieldValues.push(this.getFieldValueByAttribute(field, attributes));\n            } else {\n                throw new Error('Unknown field type: ' + field.fieldType);\n            }\n        }\n\n        return fieldValues;\n    }\n\n    protected getFieldValueByAttribute(field: Field, attributes: NamedNodeMap): any {\n        switch (field.name) {\n            case Metadata.ATTRIBUTE_VERSION:\n            case Metadata.ATTRIBUTE_URI:\n            case Metadata.ATTRIBUTE_NAMESPACE:\n            case Metadata.ATTRIBUTE_ALIAS:\n            case Metadata.ATTRIBUTE_TERM_NAMESPACE:\n            case Metadata.ATTRIBUTE_TERM:\n            case Metadata.ATTRIBUTE_QUALIFIER:\n            case Metadata.ATTRIBUTE_TARGET_NAMESPACE:\n            case Metadata.ATTRIBUTE_NAME:\n            case Metadata.ATTRIBUTE_TYPE:\n            case Metadata.ATTRIBUTE_SRID:\n            case Metadata.ATTRIBUTE_DEFAULT_VALUE:\n            case Metadata.ATTRIBUTE_PARTNER:\n            case Metadata.ATTRIBUTE_PROPERTY:\n            case Metadata.ATTRIBUTE_REFERENCED_PROPERTY:\n            case Metadata.ATTRIBUTE_BASE_TYPE:\n            case Metadata.ATTRIBUTE_ENTITY_SET_PATH:\n            case Metadata.ATTRIBUTE_ENTITY_TYPE:\n            case Metadata.ATTRIBUTE_PATH:\n            case Metadata.ATTRIBUTE_TARGET:\n            case Metadata.ATTRIBUTE_FUNCTION:\n            case Metadata.ATTRIBUTE_ACTION:\n            case Metadata.ATTRIBUTE_ENTITY_SET:\n            case Metadata.ATTRIBUTE_UNDERLYING_TYPE:\n            case Metadata.ATTRIBUTE_EXTENDS:\n            case Metadata.ATTRIBUTE_BASE_TERM:\n            case Metadata.ATTRIBUTE_APPLIES_TO:\n                return this.getAttributeValue(attributes, field.name);\n            case Metadata.ATTRIBUTE_NULLABLE:\n            case Metadata.ATTRIBUTE_UNICODE:\n            case Metadata.ATTRIBUTE_OPEN_TYPE:\n            case Metadata.ATTRIBUTE_HAS_STREAM:\n            case Metadata.ATTRIBUTE_IS_BOUND:\n            case Metadata.ATTRIBUTE_IS_COMPOSABLE:\n            case Metadata.ATTRIBUTE_CONTAINS_TARGET:\n            case Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT:\n            case Metadata.ATTRIBUTE_ABSTRACT:\n            case Metadata.ATTRIBUTE_IS_FLAGS:\n                return this.propertyValueToBoolean(this.getAttributeValue(attributes, field.name));\n            case Metadata.ATTRIBUTE_VALUE:\n            case Metadata.ATTRIBUTE_MAX_LENGTH:\n            case Metadata.ATTRIBUTE_PRECISION:\n            case Metadata.ATTRIBUTE_SCALE:\n                return this.propertyValueToNumber(this.getAttributeValue(attributes, field.name));\n            default: throw new Error('Unknwon attribute:' + field.name);\n        }\n    }\n\n    protected getFieldValueByTag(field: Field, element: Element): any[] {\n        switch (field.name) {\n            case Metadata.TAG_INCLUDE:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_INCLUDE_ANNOTATIONS:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_TERM_NAMESPACE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TARGET_NAMESPACE, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_TERM:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_BASE_TERM, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_APPLIES_TO, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ANNOTATIONS:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ANNOTATION:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_TERM, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_QUALIFIER, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ENUM_TYPE:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_MEMBER, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_IS_FLAGS, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_COMPLEX_TYPE:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),\n                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ENTITY_TYPE:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_KEY, FieldType.TAG),\n                    new Field(Metadata.TAG_PROPERTY, FieldType.TAG),\n                    new Field(Metadata.TAG_NAVIGATION_PROPERTY, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_BASE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_OPEN_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_HAS_STREAM, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ABSTRACT, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_FUNCTION:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_IS_COMPOSABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)\n                ]);\n            case Metadata.TAG_MEMBER:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_VALUE, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_PROPERTY:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_DEFAULT_VALUE, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_KEY:\n                return this.getObject(element, field.name, [\n                    new Field(Metadata.TAG_PROPERTY_REF, FieldType.TAG)\n                ]);\n            case Metadata.TAG_PROPERTY_REF:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_NAVIGATION_PROPERTY:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PARTNER, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_CONTAINS_TARGET, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_REFERENTIAL_CONSTRAINT, FieldType.TAG),\n                    new Field(Metadata.TAG_ON_DELETE, FieldType.TAG)\n                ]);\n            case Metadata.TAG_REFERENTIAL_CONSTRAINT:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_PROPERTY, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_REFERENCED_PROPERTY, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ON_DELETE:\n                return this.getObject(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_PARAMETER:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_RETURN_TYPE:\n                return this.getObject(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_NULLABLE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ACTION:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_RETURN_TYPE, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_IS_BOUND, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ENTITY_SET_PATH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_PARAMETER, FieldType.TAG)\n                ]);\n            case Metadata.TAG_ENTITY_CONTAINER:\n                return this.getObject(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_EXTENDS, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_ENTITY_SET, FieldType.TAG),\n                    new Field(Metadata.TAG_SINGLETON, FieldType.TAG),\n                    new Field(Metadata.TAG_FUNCTION_IMPORT, FieldType.TAG),\n                    new Field(Metadata.TAG_ACTION_IMPORT, FieldType.TAG)\n                ]);\n            case Metadata.TAG_ENTITY_SET:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ENTITY_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG),\n                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_SINGLETON:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_NAVIGATION_PROPERTY_BINDING, FieldType.TAG)\n                ]);\n            case Metadata.TAG_FUNCTION_IMPORT:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_FUNCTION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_ACTION_IMPORT:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ACTION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_ENTITY_SET, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_NAVIGATION_PROPERTY_BINDING:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_PATH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_TARGET, FieldType.ATTRIBUTE)\n                ]);\n            case Metadata.TAG_TYPE_DEFINITION:\n                return this.getObjects(element, field.name, [\n                    new Field(Metadata.ATTRIBUTE_NAME, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_UNDERLYING_TYPE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_MAX_LENGTH, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_PRECISION, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SCALE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_UNICODE, FieldType.ATTRIBUTE),\n                    new Field(Metadata.ATTRIBUTE_SRID, FieldType.ATTRIBUTE),\n                    new Field(Metadata.TAG_ANNOTATION, FieldType.TAG)\n                ]);\n            default: throw new Error('Unknwon tag:' + field.name);\n        }\n    }\n\n    protected getAttributeValue(attributes: NamedNodeMap, attributeName: string): string {\n        const attribute: Attr = attributes.getNamedItem(attributeName);\n        if (Utils.isNotNullNorUndefined(attribute)) {\n            return attribute.nodeValue;\n        }\n        return undefined;\n    }\n\n    protected propertyValueToNumber(attributeValue: string): number {\n        return Utils.isNotNullNorUndefined(attributeValue) ? Number(attributeValue) : undefined;\n    }\n\n    protected propertyValueToBoolean(attributeValue: string): boolean {\n        return Utils.isNotNullNorUndefined(attributeValue) ? attributeValue === 'true' : undefined;\n    }\n}\n","import { HttpResponse } from '@angular/common/http';\n\nimport { Utils } from '../utils/utils';\n\nexport abstract class ODataResponseAbstract {\n    private httpResponse: HttpResponse<string>;\n\n    constructor(httpResponse: HttpResponse<string>) {\n        this.httpResponse = httpResponse;\n    }\n\n    getHttpResponse() {\n        return this.httpResponse;\n    }\n\n    isOk(): boolean {\n        return this.httpResponse.ok;\n    }\n\n    getBodyAsJson(): any {\n        return null;\n    }\n\n    getBodyAsText(): string {\n        return this.httpResponse.body;\n    }\n\n    toString(): string {\n        let res = `${this.httpResponse.status} ${this.httpResponse.statusText}\\n`;\n\n        const headers = this.httpResponse.headers;\n        for (const key of headers.keys()) {\n            res += key + ': ';\n            let valueString = '';\n            for (const value of headers.getAll(key)) {\n                if (valueString.length) {\n                    valueString += ' ';\n                }\n                valueString += value;\n            }\n            res += valueString + '\\n';\n        }\n\n        const json = this.getBodyAsJson();\n        if (Utils.isNotNullNorUndefined(json)) {\n            res += JSON.stringify(json, null, 4);\n        } else {\n            res += this.getBodyAsText();\n        }\n        return res;\n    }\n}\n","import { HttpResponse } from '@angular/common/http';\n\nimport { Utils } from '../utils/utils';\nimport { EntitySet } from './entity-collection';\nimport { Metadata } from './metadata';\nimport { ODataResponseAbstract } from './odata-response-abstract';\nimport { ODataResponseBatch } from './odata-response-batch';\n\nexport class ODataResponse extends ODataResponseAbstract {\n    private static readonly VALUE = 'value';\n    private static readonly ODATA_COUNT = '@odata.count';\n\n    constructor(httpResponse: HttpResponse<string>) {\n        super(httpResponse);\n    }\n\n    getBodyAsJson(): any {\n        const contentType: string = this.getHttpResponse().headers.get('Content-Type');\n        if (Utils.isNotNullNorUndefined(contentType) && contentType.includes('json')) {\n            try {\n                return JSON.parse(this.getBodyAsText());\n            } catch (error) {\n                return null;\n            }\n        }\n        return null;\n    }\n\n    toMetadata(): Metadata {\n        const xml: string = this.getBodyAsText();\n        return new Metadata(xml);\n    }\n\n    toEntitySet<T>(type?: (new () => T)): EntitySet<T> {\n        const json: any = this.getBodyAsJson();\n        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {\n            let count: number = null;\n            if (json.hasOwnProperty(ODataResponse.ODATA_COUNT)) {\n                count = json[ODataResponse.ODATA_COUNT];\n            }\n            return new EntitySet<T>(json[ODataResponse.VALUE], count, type);\n        }\n        return null;\n    }\n\n    toComplexCollection<T>(type?: (new () => T)): T[] {\n        const json: any = this.getBodyAsJson();\n\n        if (Utils.isNotNullNorUndefined(json) && json.hasOwnProperty(ODataResponse.VALUE)) {\n            const res: T[] = [];\n            for (const object of json[ODataResponse.VALUE]) {\n                res.push(this.toObject<T>(object, type));\n            }\n            return res;\n        }\n\n        return null;\n    }\n\n    toEntity<T>(type?: (new () => T)): T {\n        const json: any = this.getBodyAsJson();\n        return this.toObject<T>(json, type);\n    }\n\n    toComplexValue<T>(type?: (new () => T)): T {\n        const json: any = this.getBodyAsJson();\n        return this.toObject<T>(json, type);\n    }\n\n    toPropertyValue<T>(): T {\n        const json: any = this.getBodyAsJson();\n        if (Utils.isNotNullNorUndefined(json)) {\n            if (json.hasOwnProperty(ODataResponse.VALUE)) {\n                return <T>json[ODataResponse.VALUE];\n            }\n            return null;\n        } else {\n            return <T>JSON.parse(this.getBodyAsText());\n        }\n    }\n\n    toCount(): number {\n        return Number(this.getBodyAsText());\n    }\n\n    toODataResponseBatch(): ODataResponseBatch {\n        return new ODataResponseBatch(this.getHttpResponse());\n    }\n\n    protected toObject<T>(object: any, type: (new () => T)): T {\n        if (Utils.isNotNullNorUndefined(object)) {\n            if (Utils.isNullOrUndefined(type)) {\n                return Object.assign({}, object);\n            } else {\n                return Object.assign(new type(), object);\n            }\n        }\n        return null;\n    }\n}\n","import { HttpHeaders, HttpResponse } from '@angular/common/http';\n\nimport { Utils } from '../utils/utils';\nimport { ODataResponse } from './odata-response';\nimport { ODataResponseAbstract } from './odata-response-abstract';\n\nexport class ODataResponseBatch extends ODataResponseAbstract {\n    private static readonly CONTENT_TYPE = 'Content-Type';\n    private static readonly CONTENT_ID = 'Content-ID';\n    private static readonly HTTP11 = 'HTTP/1.1';\n    private static readonly BOUNDARY_PREFIX_SUFFIX = '--';\n    private static readonly NEWLINE = '\\r\\n';\n    private static readonly MULTIPART_MIXED = 'multipart/mixed';\n\n    private odataResponses: ODataResponse[];\n\n    constructor(httpResponse: HttpResponse<string>) {\n        super(httpResponse);\n        this.odataResponses = [];\n        this.parseResponses();\n    }\n\n    getODataResponses(): ODataResponse[] {\n        return this.odataResponses;\n    }\n\n    protected parseResponses(): void {\n        const contentType: string = this.getHttpResponse().headers.get(ODataResponseBatch.CONTENT_TYPE);\n        const boundaryDelimiterBatch: string = this.getBoundaryDelimiter(contentType);\n        const boundaryEndBatch: string = this.getBoundaryEnd(boundaryDelimiterBatch);\n\n        const batchBody: string = this.getBodyAsText();\n        const batchBodyLines: string[] = batchBody.split(ODataResponseBatch.NEWLINE);\n\n        let odataResponseCS: ODataResponse[];\n        let contentId: number;\n        let boundaryDelimiterCS;\n        let boundaryEndCS;\n        let batchPartStartIndex;\n        for (let index = 0; index < batchBodyLines.length; index++) {\n            const batchBodyLine: string = batchBodyLines[index];\n\n            if (batchBodyLine.startsWith(ODataResponseBatch.CONTENT_TYPE)) {\n                const contentTypeValue: string = this.getHeaderValue(batchBodyLine);\n                if (contentTypeValue === ODataResponseBatch.MULTIPART_MIXED) {\n                    odataResponseCS = [];\n                    contentId = undefined;\n                    boundaryDelimiterCS = this.getBoundaryDelimiter(batchBodyLine);\n                    boundaryEndCS = this.getBoundaryEnd(boundaryDelimiterCS);\n                    batchPartStartIndex = undefined;\n                }\n                continue;\n            } else if (Utils.isNotNullNorUndefined(odataResponseCS) && batchBodyLine.startsWith(ODataResponseBatch.CONTENT_ID)) {\n                contentId = Number(this.getHeaderValue(batchBodyLine));\n            } else if (batchBodyLine.startsWith(ODataResponseBatch.HTTP11)) {\n                batchPartStartIndex = index;\n            } else if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS\n                || batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {\n                if (!batchPartStartIndex) {\n                    continue;\n                }\n\n                const odataResponse: ODataResponse = this.createODataResponse(batchBodyLines, batchPartStartIndex, index - 1);\n                if (Utils.isNotNullNorUndefined(odataResponseCS)) {\n                    odataResponseCS[contentId] = odataResponse;\n                } else {\n                    this.odataResponses.push(odataResponse);\n                }\n\n                if (batchBodyLine === boundaryDelimiterBatch || batchBodyLine === boundaryDelimiterCS) {\n                    batchPartStartIndex = index + 1;\n                } else if (batchBodyLine === boundaryEndBatch || batchBodyLine === boundaryEndCS) {\n                    if (Utils.isNotNullNorUndefined(odataResponseCS)) {\n                        for (const response of odataResponseCS) {\n                            if (Utils.isNotNullNorUndefined(response)) {\n                                this.odataResponses.push(response);\n                            }\n                        }\n                    }\n                    odataResponseCS = undefined;\n                    boundaryDelimiterCS = undefined;\n                    boundaryEndCS = undefined;\n                    batchPartStartIndex = undefined;\n                }\n            }\n        }\n    }\n\n    protected getHeaderValue(header: string): string {\n        let res: string = header.split(';')[0].trim();\n        res = res.split(':')[1].trim();\n        return res;\n    }\n\n    protected getBoundaryDelimiter(contentType: string): string {\n        const contentTypeParts: string[] = contentType.split(';');\n        if (contentTypeParts.length === 2) {\n            const boundary: string = contentType.split(';')[1].trim();\n            const boundaryDelimiter: string = ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX + boundary.split('=')[1];\n            return boundaryDelimiter;\n        } else {\n            return '';\n        }\n    }\n\n    protected getBoundaryEnd(boundaryDelimiter: string): string {\n        if (!boundaryDelimiter.length) {\n            return '';\n        }\n        const boundaryEnd: string = boundaryDelimiter + ODataResponseBatch.BOUNDARY_PREFIX_SUFFIX;\n        return boundaryEnd;\n    }\n\n    protected createODataResponse(batchBodyLines: string[], batchPartStartIndex: number, batchPartEndIndex: number): ODataResponse {\n        let index: number = batchPartStartIndex;\n        const statusLine: string = batchBodyLines[index];\n        const statusLineParts: string[] = batchBodyLines[index].split(' ');\n        const status: string = statusLineParts[1];\n        const statusTextIndex = statusLine.indexOf(status) + status.length + 1;\n        const statusText: string = statusLine.substring(statusTextIndex);\n\n        let httpHeaders: HttpHeaders = new HttpHeaders();\n        for (++index; index <= batchPartEndIndex; index++) {\n            const batchBodyLine: string = batchBodyLines[index];\n\n            if (batchBodyLine === '') {\n                break;\n            }\n\n            const batchBodyLineParts: string[] = batchBodyLine.split(': ');\n            httpHeaders = httpHeaders.append(batchBodyLineParts[0].trim(), batchBodyLineParts[1].trim());\n        }\n\n        let body = '';\n        for (; index <= batchPartEndIndex; index++) {\n            body += batchBodyLines[index];\n        }\n\n        return new ODataResponse(new HttpResponse({\n            body: body,\n            headers: httpHeaders,\n            status: Number(status),\n            statusText: statusText\n        }));\n    }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface HttpOptionsI {\n    headers?: HttpHeaders;\n    params?: HttpParams;\n    reportProgress?: boolean;\n    withCredentials?: boolean;\n}\n\nexport class HttpOptions implements HttpOptionsI {\n    constructor(\n        public headers?: HttpHeaders,\n        public observe: 'response' = 'response',\n        public params?: HttpParams,\n        public reportProgress?: boolean,\n        public responseType: 'text' = 'text',\n        public withCredentials?: boolean\n    ) { }\n}\n","\nimport {map} from 'rxjs/operators';\n\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ODataQuery } from '../odata-query/odata-query';\nimport { ODataQueryAbstract } from '../odata-query/odata-query-abstract';\nimport { ODataResponse } from '../odata-response/odata-response';\nimport { Utils } from '../utils/utils';\nimport { HttpOptions, HttpOptionsI } from './http-options';\n\n@Injectable()\nexport class ODataService {\n  private static readonly IF_MATCH_HEADER = 'If-Match';\n\n  constructor(private http: HttpClient) { }\n\n  get(odataQuery: ODataQuery, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    const url: string = odataQuery.toString();\n    const options: HttpOptions = this.createHttpOptions(httpOptions);\n    return this.http.get(url, options).pipe(\n      map(response => new ODataResponse(response)));\n  }\n\n  post(odataQuery: ODataQueryAbstract, body: any, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    const url: string = odataQuery.toString();\n    const options: HttpOptions = this.createHttpOptions(httpOptions);\n    return this.http.post(url, body, options).pipe(\n      map(response => new ODataResponse(response)));\n  }\n\n  patch(odataQuery: ODataQuery, body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    const url: string = odataQuery.toString();\n    let options: HttpOptions = this.createHttpOptions(httpOptions);\n    options = this.mergeETag(options, etag);\n    return this.http.patch(url, body, options).pipe(\n      map(response => new ODataResponse(response)));\n  }\n\n  put(odataQuery: ODataQuery, body: any, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    const url: string = odataQuery.toString();\n    let options: HttpOptions = this.createHttpOptions(httpOptions);\n    options = this.mergeETag(options, etag);\n    return this.http.put(url, body, options).pipe(\n      map(response => new ODataResponse(response)));\n  }\n\n  delete(odataQuery: ODataQuery, etag?: string, httpOptions?: HttpOptionsI): Observable<ODataResponse> {\n    const url: string = odataQuery.toString();\n    let options: HttpOptions = this.createHttpOptions(httpOptions);\n    options = this.mergeETag(options, etag);\n    return this.http.delete(url, options).pipe(\n      map(response => new ODataResponse(response)));\n  }\n\n  protected createHttpOptions(httpOptions: HttpOptionsI): HttpOptions {\n    if (httpOptions instanceof HttpOptions) {\n      return httpOptions;\n    }\n    return Object.assign(new HttpOptions(), httpOptions);\n  }\n\n  protected mergeETag(httpOptions: HttpOptions, etag: string): HttpOptions {\n    if (Utils.isNullOrUndefined(etag)) {\n      return httpOptions;\n    }\n    if (Utils.isNullOrUndefined(httpOptions)) {\n      httpOptions = new HttpOptions();\n    }\n    if (Utils.isNullOrUndefined(httpOptions.headers)) {\n      httpOptions.headers = new HttpHeaders();\n    }\n\n    httpOptions.headers[ODataService.IF_MATCH_HEADER] = etag;\n\n    return httpOptions;\n  }\n}\n","export abstract class Filter {\n    abstract toString(): string;\n    abstract isEmpty(): boolean;\n}\n","import { Utils } from '../../utils/utils';\n\nexport abstract class FilterHasProperty {\n    protected property: string;\n\n    constructor(property: string) {\n        this.setProperty(property);\n    }\n\n    setProperty(property: string): void {\n        Utils.requireNotNullNorUndefined(property, 'property');\n        this.property = property;\n    }\n\n    getProperty(): string {\n        return this.property;\n    }\n}\n","import { Utils } from '../../utils/utils';\nimport { QuotedString } from '../../odata-query/quoted-string';\nimport { OperatorComparison } from '../operator';\nimport { Filter } from './filter';\nimport { FilterHasProperty } from './filter-has-property';\n\nexport class FilterComparison extends FilterHasProperty implements Filter {\n    private operator: OperatorComparison;\n    private value: any;\n\n    constructor(property: string, operator: OperatorComparison, value: boolean | number | string | QuotedString) {\n        super(property);\n        Utils.requireNotNullNorUndefined(property, 'property');\n        Utils.requireNotNullNorUndefined(operator, 'operator');\n        Utils.requireNotUndefined(value, 'value');\n        this.operator = operator;\n        this.value = value;\n    }\n\n    toString(): string {\n        return `${this.property} ${OperatorComparison[this.operator].toLowerCase()} ${Utils.getValueURI(this.value, false)}`;\n    }\n\n    isEmpty(): boolean {\n        return (Utils.isNullOrUndefined(this.property) || !this.property.length)\n            && Utils.isNullOrUndefined(this.operator)\n            && Utils.isNullOrUndefined(this.value) || (this.value instanceof Filter && !this.value.isEmpty() || this.value instanceof Array && !this.value.length);\n    }\n}\n","import { Utils } from '../../utils/utils';\nimport { Filter } from './filter';\nimport { FilterHasProperty } from './filter-has-property';\nimport { QuotedString } from '../../odata-query/quoted-string';\n\nexport class FilterFunction extends FilterHasProperty implements Filter {\n    private functionName: string;\n    private value: boolean | number | string | QuotedString;\n\n    constructor(functionName: string, property: string, value?: boolean | number | string | QuotedString) {\n        super(property);\n        Utils.requireNotNullNorUndefined(functionName, 'functionName');\n        Utils.requireNotEmpty(functionName, 'functionName');\n        Utils.requireNotNullNorUndefined(property, 'property');\n        Utils.requireNotEmpty(property, 'property');\n        this.functionName = functionName;\n        this.property = property;\n        this.value = value;\n    }\n\n    toString(): string {\n        if (Utils.isNotNullNorUndefined(this.property) && Utils.isNotNullNorUndefined(this.value)) {\n            return `${this.functionName}(${this.property},${Utils.getValueURI(this.value, false)})`;\n        } else if (Utils.isNotNullNorUndefined(this.property)) {\n            return `${this.functionName}(${this.property})`;\n        } else if (Utils.isNotNullNorUndefined(this.value)) {\n            return `${this.functionName}(${Utils.getValueURI(this.value, false)})`;\n        } else {\n            return `${this.functionName}()`;\n        }\n    }\n\n    isEmpty(): boolean {\n        if (Utils.isNullOrUndefined(this.property)\n            && Utils.isNullOrUndefined(this.value)) {\n            return true;\n        }\n        if (Utils.isNullOrUndefined(this.property)\n            && Utils.isNotNullNorUndefined(this.value) && Utils.isEmpty(this.value)) {\n            return true;\n        }\n        if (Utils.isNullOrUndefined(this.value)\n            && Utils.isNotNullNorUndefined(this.property) && !this.property.length) {\n            return true;\n        }\n        return false;\n    }\n}\n\nexport class FilterFunctionString extends FilterFunction {\n    constructor(functionName: string, property?: string, value?: number | string | FilterFunctionString) {\n        super(functionName, property, typeof (value) === 'string'\n            ? new QuotedString(value)\n            : value instanceof FilterFunctionString ? value.toString() : value);\n    }\n}\n\nexport class FilterContains extends FilterFunctionString {\n    constructor(property: string, value: string | FilterFunctionString) {\n        super('contains', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n\nexport class FilterEndswith extends FilterFunctionString {\n    constructor(property: string, value: string | FilterFunctionString) {\n        super('endswith', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n\nexport class FilterStartswith extends FilterFunctionString {\n    constructor(property: string, value: string | FilterFunctionString) {\n        super('startswith', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n\nexport class FilterLength extends FilterFunctionString {\n    constructor(property: string) {\n        super('length', property);\n    }\n}\n\nexport class FilterIndexof extends FilterFunctionString {\n    constructor(property: string, value: string | FilterFunctionString) {\n        super('indexof', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n\nexport class FilterSubstring extends FilterFunctionString {\n    constructor(property: string, value: number) {\n        super('substring', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n\nexport class FilterTolower extends FilterFunctionString {\n    constructor(property: string) {\n        super('tolower', property);\n    }\n}\n\nexport class FilterToupper extends FilterFunctionString {\n    constructor(property: string) {\n        super('toupper', property);\n    }\n}\n\nexport class FilterTrim extends FilterFunctionString {\n    constructor(property: string) {\n        super('trim', property);\n    }\n}\n\nexport class FilterConcat extends FilterFunctionString {\n    constructor(property: string, value: string | FilterFunctionString) {\n        super('concat', property, value);\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n}\n","import { Filter } from './filter';\n\nexport abstract class FilterHasFilter {\n    protected filter: Filter | Filter[];\n\n    constructor(filter: Filter | Filter[]) {\n        this.filter = filter;\n    }\n\n    getFilter(): Filter | Filter[] {\n        return this.filter;\n    }\n}\n","import { Utils } from '../../utils/utils';\nimport { Filter } from './filter';\nimport { FilterHasFilter } from './filter-has-filter';\nimport { FilterHasProperty } from './filter-has-property';\n\nexport enum LambdaOperator {\n    ANY, ALL\n}\n\nexport enum LambdaCollection {\n    PROPERTY_COLLECTION, ENTITY_SET\n}\n\nexport class FilterLambda extends FilterHasFilter implements Filter {\n    private lambdaCollection: LambdaCollection;\n    private propertyOrEntitySet: string;\n    private lambdaOperator: LambdaOperator;\n\n    constructor(lambdaCollection: LambdaCollection, propertyOrEntitySet: string, lambdaOperator: LambdaOperator, filter: Filter) {\n        super(filter);\n        Utils.requireNotNullNorUndefined(lambdaCollection, 'lambdaCollection');\n        Utils.requireNotNullNorUndefined(propertyOrEntitySet, 'propertyOrEntitySet');\n        Utils.requireNotNullNorUndefined(lambdaOperator, 'lambdaOperator');\n        Utils.requireNotNullNorUndefined(filter, 'filter');\n        if (lambdaCollection === LambdaCollection.PROPERTY_COLLECTION) {\n            this.checkProperty(propertyOrEntitySet, filter);\n        }\n        this.lambdaCollection = lambdaCollection;\n        this.propertyOrEntitySet = propertyOrEntitySet;\n        this.lambdaOperator = lambdaOperator;\n    }\n\n    toString(): string {\n        switch (this.lambdaCollection) {\n            case LambdaCollection.PROPERTY_COLLECTION:\n                this.replaceProperty(this.filter);\n                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:${this.filter.toString()})`;\n            case LambdaCollection.ENTITY_SET:\n                return `${this.propertyOrEntitySet}/${LambdaOperator[this.lambdaOperator].toLowerCase()}(x:x/${this.filter.toString()})`;\n            default:\n                throw new Error('unknown lambdaCollection: ' + this.lambdaCollection);\n        }\n    }\n\n    isEmpty(): boolean {\n        if (Utils.isNullOrUndefined(this.lambdaCollection)\n            && Utils.isNullOrUndefined(this.propertyOrEntitySet)\n            && Utils.isNullOrUndefined(this.lambdaOperator)\n            && Utils.isNullOrUndefined(this.filter)) {\n            return true;\n        }\n        if (Utils.isNullOrUndefined(this.propertyOrEntitySet)\n            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {\n            return true;\n        }\n        if (Utils.isNullOrUndefined(this.filter)\n            && Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length) {\n            return true;\n        }\n        if (Utils.isNotNullNorUndefined(this.propertyOrEntitySet) && !this.propertyOrEntitySet.length\n            && Utils.isNotNullNorUndefined(this.filter) && Utils.isEmpty(this.filter)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    protected checkProperty(propertyOrEntitySet: string, filter: Filter | Filter[]) {\n        if (Utils.isNullOrUndefined(filter)) {\n            return;\n        }\n        if (filter instanceof FilterHasProperty) {\n            if (propertyOrEntitySet !== filter.getProperty()) {\n                throw new Error('lambda property to filter must match inner filters property');\n            }\n        }\n        if (filter instanceof FilterHasFilter) {\n            const filterChild: Filter | Filter[] = filter.getFilter();\n            if (filterChild instanceof Filter) {\n                this.replaceProperty(filterChild);\n            } else {\n                for (const f of filterChild) {\n                    this.replaceProperty(f);\n                }\n            }\n        }\n    }\n\n    protected replaceProperty(filter: Filter | Filter[]) {\n        if (Utils.isNullOrUndefined(filter)) {\n            return;\n        }\n        if (filter instanceof FilterHasProperty) {\n            filter.setProperty('x');\n        }\n        if (filter instanceof FilterHasFilter) {\n            const filterChild: Filter | Filter[] = filter.getFilter();\n            if (filterChild instanceof Filter) {\n                this.replaceProperty(filterChild);\n            } else {\n                for (const f of filterChild) {\n                    this.replaceProperty(f);\n                }\n            }\n        }\n    }\n}\n","import { Utils } from '../../utils/utils';\nimport { OperatorLogical } from '../operator';\nimport { Filter } from './filter';\nimport { FilterHasFilter } from './filter-has-filter';\n\nexport class FilterLogical extends FilterHasFilter implements Filter {\n    private operator: OperatorLogical;\n\n    constructor(filters: Filter[], operator: OperatorLogical) {\n        super(filters);\n        Utils.requireNotNullNorUndefined(filters, 'filters');\n        Utils.requireNotEmpty(filters, 'filters');\n        Utils.requireNotNullNorUndefined(operator, 'operator');\n        this.operator = operator;\n    }\n\n    toString(): string {\n        if (this.filter instanceof Array) {\n            return Utils.toString(this.filter, this.operator);\n        }\n        return this.filter.toString();\n    }\n\n    isEmpty(): boolean {\n        if (Utils.isNullOrUndefined(this.filter)) {\n            return true;\n        }\n        for (const filter of <Filter[]>this.filter) {\n            if (filter.isEmpty()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","export abstract class Search {\n    abstract toString(): string;\n    abstract isEmpty(): boolean;\n}\n","import { Utils } from '../../utils/utils';\nimport { OperatorLogical } from '../operator';\nimport { Search } from './search';\n\nexport class SearchLogical extends Search {\n    constructor(private values: Search[], private operator: OperatorLogical) {\n        super();\n        Utils.requireNotNullNorUndefined(values, 'values');\n        Utils.requireNotNullNorUndefined(operator, 'operator');\n        Utils.requireNotEmpty(values, 'values');\n\n        if (operator === OperatorLogical.NOT && values.length !== 1) {\n            throw new Error('operator ' + OperatorLogical[operator] + ' requires a single value');\n        }\n    }\n\n    toString(): string {\n        return Utils.toString(this.values, this.operator, true);\n    }\n\n    isEmpty(): boolean {\n        if (Utils.isNullOrUndefined(this.values)) {\n            return true;\n        }\n        for (const value of this.values) {\n            if (value.isEmpty()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import { Utils } from '../../utils/utils';\nimport { Search } from './search';\n\nexport class SearchSimple extends Search {\n    constructor(protected value: string) {\n        super();\n        Utils.requireNotNullNorUndefined(value, 'value');\n        Utils.requireNotEmpty(value, 'value');\n    }\n\n    toString(): string {\n        return this.value;\n    }\n\n    isEmpty(): boolean {\n        return Utils.isNullOrUndefined(this.value) || !this.value.length;\n    }\n}\n","import { SearchSimple } from './search-simple';\n\nexport class SearchPhrase extends SearchSimple {\n    toString(): string {\n        return `\"${this.value}\"`;\n    }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { ODataService } from './odata-service/odata.service';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [ODataService]\n})\nexport class ODataModule { }\n"]}